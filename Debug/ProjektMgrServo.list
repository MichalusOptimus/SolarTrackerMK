
ProjektMgrServo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016b4  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001864  08001864  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08001864  08001864  00011864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001868  08001868  00011868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  0800186c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ram2         00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          00000094  2000000c  2000000c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200000a0  200000a0  0002000c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00002b27  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000095e  00000000  00000000  00022b63  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000001b8  00000000  00000000  000234c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000130  00000000  00000000  00023680  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000131b  00000000  00000000  000237b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000e87  00000000  00000000  00024acb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00025952  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000568  00000000  00000000  000259d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00025f38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800184c 	.word	0x0800184c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000010 	.word	0x20000010
 80001ec:	0800184c 	.word	0x0800184c

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f092 0f00 	teq	r2, #0
 80004da:	bf14      	ite	ne
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e720      	b.n	8000334 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aedc 	beq.w	80002e2 <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6c1      	b.n	80002e2 <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__aeabi_d2uiz>:
 8000984:	004a      	lsls	r2, r1, #1
 8000986:	d211      	bcs.n	80009ac <__aeabi_d2uiz+0x28>
 8000988:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800098c:	d211      	bcs.n	80009b2 <__aeabi_d2uiz+0x2e>
 800098e:	d50d      	bpl.n	80009ac <__aeabi_d2uiz+0x28>
 8000990:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000994:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000998:	d40e      	bmi.n	80009b8 <__aeabi_d2uiz+0x34>
 800099a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800099e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009a2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009a6:	fa23 f002 	lsr.w	r0, r3, r2
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009b6:	d102      	bne.n	80009be <__aeabi_d2uiz+0x3a>
 80009b8:	f04f 30ff 	mov.w	r0, #4294967295
 80009bc:	4770      	bx	lr
 80009be:	f04f 0000 	mov.w	r0, #0
 80009c2:	4770      	bx	lr

080009c4 <ButtonsInit>:
int startPressedTimeRight=0, pressedTimeRight = 0, stopPressedTimeRight=0;

int debouncingTime = 20;

void ButtonsInit()
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOEEN; // enable clock for GPIO E
 80009c8:	4a1d      	ldr	r2, [pc, #116]	; (8000a40 <ButtonsInit+0x7c>)
 80009ca:	4b1d      	ldr	r3, [pc, #116]	; (8000a40 <ButtonsInit+0x7c>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	f043 0310 	orr.w	r3, r3, #16
 80009d2:	64d3      	str	r3, [r2, #76]	; 0x4c

	GPIOE->MODER &= ~(GPIO_MODER_MODE14_0 | GPIO_MODER_MODE14_1); //  configure PE14 [00] -> input mode
 80009d4:	4a1b      	ldr	r2, [pc, #108]	; (8000a44 <ButtonsInit+0x80>)
 80009d6:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <ButtonsInit+0x80>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80009de:	6013      	str	r3, [r2, #0]
	GPIOE->MODER &= ~(GPIO_MODER_MODE15_0 | GPIO_MODER_MODE15_1); //  configure PE15 [00] -> input mode
 80009e0:	4a18      	ldr	r2, [pc, #96]	; (8000a44 <ButtonsInit+0x80>)
 80009e2:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <ButtonsInit+0x80>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80009ea:	6013      	str	r3, [r2, #0]
	GPIOE->MODER &= ~(GPIO_MODER_MODE10_0 | GPIO_MODER_MODE10_1); //  configure PE10 [00] -> input mode
 80009ec:	4a15      	ldr	r2, [pc, #84]	; (8000a44 <ButtonsInit+0x80>)
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <ButtonsInit+0x80>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80009f6:	6013      	str	r3, [r2, #0]
	GPIOE->MODER &= ~(GPIO_MODER_MODE12_0 | GPIO_MODER_MODE12_1); //  configure PE12 [00] -> input mode
 80009f8:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <ButtonsInit+0x80>)
 80009fa:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <ButtonsInit+0x80>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000a02:	6013      	str	r3, [r2, #0]

	GPIOE->PUPDR |= GPIO_PUPDR_PUPD14_0; // configure PE14 [01] -> internal pull-up
 8000a04:	4a0f      	ldr	r2, [pc, #60]	; (8000a44 <ButtonsInit+0x80>)
 8000a06:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <ButtonsInit+0x80>)
 8000a08:	68db      	ldr	r3, [r3, #12]
 8000a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	60d3      	str	r3, [r2, #12]
	GPIOE->PUPDR |= GPIO_PUPDR_PUPD15_0; // configure PE15 [01] -> internal pull-up
 8000a10:	4a0c      	ldr	r2, [pc, #48]	; (8000a44 <ButtonsInit+0x80>)
 8000a12:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <ButtonsInit+0x80>)
 8000a14:	68db      	ldr	r3, [r3, #12]
 8000a16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000a1a:	60d3      	str	r3, [r2, #12]
	GPIOE->PUPDR |= GPIO_PUPDR_PUPD10_0; // configure PE10 [01] -> internal pull-up
 8000a1c:	4a09      	ldr	r2, [pc, #36]	; (8000a44 <ButtonsInit+0x80>)
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <ButtonsInit+0x80>)
 8000a20:	68db      	ldr	r3, [r3, #12]
 8000a22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a26:	60d3      	str	r3, [r2, #12]
	GPIOE->PUPDR |= GPIO_PUPDR_PUPD12_0; // configure PE12 [01] -> internal pull-up
 8000a28:	4a06      	ldr	r2, [pc, #24]	; (8000a44 <ButtonsInit+0x80>)
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <ButtonsInit+0x80>)
 8000a2c:	68db      	ldr	r3, [r3, #12]
 8000a2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a32:	60d3      	str	r3, [r2, #12]
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	40021000 	.word	0x40021000
 8000a44:	48001000 	.word	0x48001000

08000a48 <ButtonUpRead>:

/* Button UP */
char ButtonUpRead()
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
	int currentTime = millis();
 8000a4e:	f000 fd29 	bl	80014a4 <millis>
 8000a52:	4603      	mov	r3, r0
 8000a54:	607b      	str	r3, [r7, #4]

	switch(stateButtonUp)
 8000a56:	4b4f      	ldr	r3, [pc, #316]	; (8000b94 <ButtonUpRead+0x14c>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	2b03      	cmp	r3, #3
 8000a5e:	f200 8094 	bhi.w	8000b8a <ButtonUpRead+0x142>
 8000a62:	a201      	add	r2, pc, #4	; (adr r2, 8000a68 <ButtonUpRead+0x20>)
 8000a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a68:	08000a79 	.word	0x08000a79
 8000a6c:	08000a9f 	.word	0x08000a9f
 8000a70:	08000ae7 	.word	0x08000ae7
 8000a74:	08000b13 	.word	0x08000b13
	{
	case 1:
		if(buttonUpPressed)
 8000a78:	4b47      	ldr	r3, [pc, #284]	; (8000b98 <ButtonUpRead+0x150>)
 8000a7a:	691b      	ldr	r3, [r3, #16]
 8000a7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d17b      	bne.n	8000b7c <ButtonUpRead+0x134>
		{	stateButtonUp = 2;
 8000a84:	4b43      	ldr	r3, [pc, #268]	; (8000b94 <ButtonUpRead+0x14c>)
 8000a86:	2202      	movs	r2, #2
 8000a88:	701a      	strb	r2, [r3, #0]
			startPressedTimeUp = millis();
 8000a8a:	f000 fd0b 	bl	80014a4 <millis>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	461a      	mov	r2, r3
 8000a92:	4b42      	ldr	r3, [pc, #264]	; (8000b9c <ButtonUpRead+0x154>)
 8000a94:	601a      	str	r2, [r3, #0]
			pressedTimeUp = 0;
 8000a96:	4b42      	ldr	r3, [pc, #264]	; (8000ba0 <ButtonUpRead+0x158>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
		}
	break;
 8000a9c:	e06e      	b.n	8000b7c <ButtonUpRead+0x134>

	case 2:
		if((currentTime - startPressedTimeUp>debouncingTime) && buttonUpPressed) stateButtonUp = 3;
 8000a9e:	4b3f      	ldr	r3, [pc, #252]	; (8000b9c <ButtonUpRead+0x154>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	1ad2      	subs	r2, r2, r3
 8000aa6:	4b3f      	ldr	r3, [pc, #252]	; (8000ba4 <ButtonUpRead+0x15c>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	dd09      	ble.n	8000ac2 <ButtonUpRead+0x7a>
 8000aae:	4b3a      	ldr	r3, [pc, #232]	; (8000b98 <ButtonUpRead+0x150>)
 8000ab0:	691b      	ldr	r3, [r3, #16]
 8000ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d103      	bne.n	8000ac2 <ButtonUpRead+0x7a>
 8000aba:	4b36      	ldr	r3, [pc, #216]	; (8000b94 <ButtonUpRead+0x14c>)
 8000abc:	2203      	movs	r2, #3
 8000abe:	701a      	strb	r2, [r3, #0]
		else if((currentTime - startPressedTimeUp>debouncingTime) && !buttonUpPressed) stateButtonUp = 1;
	break;
 8000ac0:	e05e      	b.n	8000b80 <ButtonUpRead+0x138>
		else if((currentTime - startPressedTimeUp>debouncingTime) && !buttonUpPressed) stateButtonUp = 1;
 8000ac2:	4b36      	ldr	r3, [pc, #216]	; (8000b9c <ButtonUpRead+0x154>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	1ad2      	subs	r2, r2, r3
 8000aca:	4b36      	ldr	r3, [pc, #216]	; (8000ba4 <ButtonUpRead+0x15c>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	dd56      	ble.n	8000b80 <ButtonUpRead+0x138>
 8000ad2:	4b31      	ldr	r3, [pc, #196]	; (8000b98 <ButtonUpRead+0x150>)
 8000ad4:	691b      	ldr	r3, [r3, #16]
 8000ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d050      	beq.n	8000b80 <ButtonUpRead+0x138>
 8000ade:	4b2d      	ldr	r3, [pc, #180]	; (8000b94 <ButtonUpRead+0x14c>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	701a      	strb	r2, [r3, #0]
	break;
 8000ae4:	e04c      	b.n	8000b80 <ButtonUpRead+0x138>

	case 3:
		pressedTimeUp = currentTime - startPressedTimeUp;	// debouncing, counting pressed time
 8000ae6:	4b2d      	ldr	r3, [pc, #180]	; (8000b9c <ButtonUpRead+0x154>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	4a2c      	ldr	r2, [pc, #176]	; (8000ba0 <ButtonUpRead+0x158>)
 8000af0:	6013      	str	r3, [r2, #0]
		if(!buttonUpPressed) {stateButtonUp = 4; stopPressedTimeUp = millis();}
 8000af2:	4b29      	ldr	r3, [pc, #164]	; (8000b98 <ButtonUpRead+0x150>)
 8000af4:	691b      	ldr	r3, [r3, #16]
 8000af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d042      	beq.n	8000b84 <ButtonUpRead+0x13c>
 8000afe:	4b25      	ldr	r3, [pc, #148]	; (8000b94 <ButtonUpRead+0x14c>)
 8000b00:	2204      	movs	r2, #4
 8000b02:	701a      	strb	r2, [r3, #0]
 8000b04:	f000 fcce 	bl	80014a4 <millis>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	4b26      	ldr	r3, [pc, #152]	; (8000ba8 <ButtonUpRead+0x160>)
 8000b0e:	601a      	str	r2, [r3, #0]
	break;
 8000b10:	e038      	b.n	8000b84 <ButtonUpRead+0x13c>

	case 4:
		if((currentTime - stopPressedTimeUp>debouncingTime) && buttonUpPressed) stateButtonUp = 3;
 8000b12:	4b25      	ldr	r3, [pc, #148]	; (8000ba8 <ButtonUpRead+0x160>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	1ad2      	subs	r2, r2, r3
 8000b1a:	4b22      	ldr	r3, [pc, #136]	; (8000ba4 <ButtonUpRead+0x15c>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	dd09      	ble.n	8000b36 <ButtonUpRead+0xee>
 8000b22:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <ButtonUpRead+0x150>)
 8000b24:	691b      	ldr	r3, [r3, #16]
 8000b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d103      	bne.n	8000b36 <ButtonUpRead+0xee>
 8000b2e:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <ButtonUpRead+0x14c>)
 8000b30:	2203      	movs	r2, #3
 8000b32:	701a      	strb	r2, [r3, #0]
		{
		stateButtonUp = 1;
		if((pressedTimeUp >= 50) && (pressedTimeUp <= 1000)) return 1;	// short press, one click
		else if(pressedTimeUp > 1000) return 2;
		}
	break;
 8000b34:	e028      	b.n	8000b88 <ButtonUpRead+0x140>
		else if((currentTime - stopPressedTimeUp>debouncingTime) && !buttonUpPressed)
 8000b36:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <ButtonUpRead+0x160>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	1ad2      	subs	r2, r2, r3
 8000b3e:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <ButtonUpRead+0x15c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	dd20      	ble.n	8000b88 <ButtonUpRead+0x140>
 8000b46:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <ButtonUpRead+0x150>)
 8000b48:	691b      	ldr	r3, [r3, #16]
 8000b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d01a      	beq.n	8000b88 <ButtonUpRead+0x140>
		stateButtonUp = 1;
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <ButtonUpRead+0x14c>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	701a      	strb	r2, [r3, #0]
		if((pressedTimeUp >= 50) && (pressedTimeUp <= 1000)) return 1;	// short press, one click
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <ButtonUpRead+0x158>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2b31      	cmp	r3, #49	; 0x31
 8000b5e:	dd06      	ble.n	8000b6e <ButtonUpRead+0x126>
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <ButtonUpRead+0x158>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b68:	dc01      	bgt.n	8000b6e <ButtonUpRead+0x126>
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e00d      	b.n	8000b8a <ButtonUpRead+0x142>
		else if(pressedTimeUp > 1000) return 2;
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <ButtonUpRead+0x158>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b76:	dd07      	ble.n	8000b88 <ButtonUpRead+0x140>
 8000b78:	2302      	movs	r3, #2
 8000b7a:	e006      	b.n	8000b8a <ButtonUpRead+0x142>
	break;
 8000b7c:	bf00      	nop
 8000b7e:	e004      	b.n	8000b8a <ButtonUpRead+0x142>
	break;
 8000b80:	bf00      	nop
 8000b82:	e002      	b.n	8000b8a <ButtonUpRead+0x142>
	break;
 8000b84:	bf00      	nop
 8000b86:	e000      	b.n	8000b8a <ButtonUpRead+0x142>
	break;
 8000b88:	bf00      	nop
	}
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000000 	.word	0x20000000
 8000b98:	48001000 	.word	0x48001000
 8000b9c:	20000028 	.word	0x20000028
 8000ba0:	2000002c 	.word	0x2000002c
 8000ba4:	20000004 	.word	0x20000004
 8000ba8:	20000030 	.word	0x20000030

08000bac <ButtonDownRead>:

/* Button DOWN */
char ButtonDownRead()
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
	int currentTime = millis();
 8000bb2:	f000 fc77 	bl	80014a4 <millis>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	607b      	str	r3, [r7, #4]

	switch(stateButtonDown)
 8000bba:	4b4f      	ldr	r3, [pc, #316]	; (8000cf8 <ButtonDownRead+0x14c>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	2b03      	cmp	r3, #3
 8000bc2:	f200 8094 	bhi.w	8000cee <ButtonDownRead+0x142>
 8000bc6:	a201      	add	r2, pc, #4	; (adr r2, 8000bcc <ButtonDownRead+0x20>)
 8000bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bcc:	08000bdd 	.word	0x08000bdd
 8000bd0:	08000c03 	.word	0x08000c03
 8000bd4:	08000c4b 	.word	0x08000c4b
 8000bd8:	08000c77 	.word	0x08000c77
	{
	case 1:
		if(buttonDownPressed)
 8000bdc:	4b47      	ldr	r3, [pc, #284]	; (8000cfc <ButtonDownRead+0x150>)
 8000bde:	691b      	ldr	r3, [r3, #16]
 8000be0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d17b      	bne.n	8000ce0 <ButtonDownRead+0x134>
		{	stateButtonDown = 2;
 8000be8:	4b43      	ldr	r3, [pc, #268]	; (8000cf8 <ButtonDownRead+0x14c>)
 8000bea:	2202      	movs	r2, #2
 8000bec:	701a      	strb	r2, [r3, #0]
			startPressedTimeDown = millis();
 8000bee:	f000 fc59 	bl	80014a4 <millis>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4b42      	ldr	r3, [pc, #264]	; (8000d00 <ButtonDownRead+0x154>)
 8000bf8:	601a      	str	r2, [r3, #0]
			pressedTimeDown = 0;
 8000bfa:	4b42      	ldr	r3, [pc, #264]	; (8000d04 <ButtonDownRead+0x158>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
		}
	break;
 8000c00:	e06e      	b.n	8000ce0 <ButtonDownRead+0x134>

	case 2:
		if((currentTime - startPressedTimeDown>debouncingTime) && buttonDownPressed) stateButtonDown = 3;
 8000c02:	4b3f      	ldr	r3, [pc, #252]	; (8000d00 <ButtonDownRead+0x154>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	1ad2      	subs	r2, r2, r3
 8000c0a:	4b3f      	ldr	r3, [pc, #252]	; (8000d08 <ButtonDownRead+0x15c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	dd09      	ble.n	8000c26 <ButtonDownRead+0x7a>
 8000c12:	4b3a      	ldr	r3, [pc, #232]	; (8000cfc <ButtonDownRead+0x150>)
 8000c14:	691b      	ldr	r3, [r3, #16]
 8000c16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d103      	bne.n	8000c26 <ButtonDownRead+0x7a>
 8000c1e:	4b36      	ldr	r3, [pc, #216]	; (8000cf8 <ButtonDownRead+0x14c>)
 8000c20:	2203      	movs	r2, #3
 8000c22:	701a      	strb	r2, [r3, #0]
		else if((currentTime - startPressedTimeDown>debouncingTime) && !buttonDownPressed) stateButtonDown = 1;
	break;
 8000c24:	e05e      	b.n	8000ce4 <ButtonDownRead+0x138>
		else if((currentTime - startPressedTimeDown>debouncingTime) && !buttonDownPressed) stateButtonDown = 1;
 8000c26:	4b36      	ldr	r3, [pc, #216]	; (8000d00 <ButtonDownRead+0x154>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	1ad2      	subs	r2, r2, r3
 8000c2e:	4b36      	ldr	r3, [pc, #216]	; (8000d08 <ButtonDownRead+0x15c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	dd56      	ble.n	8000ce4 <ButtonDownRead+0x138>
 8000c36:	4b31      	ldr	r3, [pc, #196]	; (8000cfc <ButtonDownRead+0x150>)
 8000c38:	691b      	ldr	r3, [r3, #16]
 8000c3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d050      	beq.n	8000ce4 <ButtonDownRead+0x138>
 8000c42:	4b2d      	ldr	r3, [pc, #180]	; (8000cf8 <ButtonDownRead+0x14c>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	701a      	strb	r2, [r3, #0]
	break;
 8000c48:	e04c      	b.n	8000ce4 <ButtonDownRead+0x138>

	case 3:
		pressedTimeDown = currentTime - startPressedTimeDown;	// debouncing, counting pressed time
 8000c4a:	4b2d      	ldr	r3, [pc, #180]	; (8000d00 <ButtonDownRead+0x154>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	4a2c      	ldr	r2, [pc, #176]	; (8000d04 <ButtonDownRead+0x158>)
 8000c54:	6013      	str	r3, [r2, #0]
		if(!buttonDownPressed) {stateButtonDown = 4; stopPressedTimeDown = millis();}
 8000c56:	4b29      	ldr	r3, [pc, #164]	; (8000cfc <ButtonDownRead+0x150>)
 8000c58:	691b      	ldr	r3, [r3, #16]
 8000c5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d042      	beq.n	8000ce8 <ButtonDownRead+0x13c>
 8000c62:	4b25      	ldr	r3, [pc, #148]	; (8000cf8 <ButtonDownRead+0x14c>)
 8000c64:	2204      	movs	r2, #4
 8000c66:	701a      	strb	r2, [r3, #0]
 8000c68:	f000 fc1c 	bl	80014a4 <millis>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	461a      	mov	r2, r3
 8000c70:	4b26      	ldr	r3, [pc, #152]	; (8000d0c <ButtonDownRead+0x160>)
 8000c72:	601a      	str	r2, [r3, #0]
	break;
 8000c74:	e038      	b.n	8000ce8 <ButtonDownRead+0x13c>

	case 4:
		if((currentTime - stopPressedTimeDown>debouncingTime) && buttonDownPressed) stateButtonDown = 3;
 8000c76:	4b25      	ldr	r3, [pc, #148]	; (8000d0c <ButtonDownRead+0x160>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	1ad2      	subs	r2, r2, r3
 8000c7e:	4b22      	ldr	r3, [pc, #136]	; (8000d08 <ButtonDownRead+0x15c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	dd09      	ble.n	8000c9a <ButtonDownRead+0xee>
 8000c86:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <ButtonDownRead+0x150>)
 8000c88:	691b      	ldr	r3, [r3, #16]
 8000c8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d103      	bne.n	8000c9a <ButtonDownRead+0xee>
 8000c92:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <ButtonDownRead+0x14c>)
 8000c94:	2203      	movs	r2, #3
 8000c96:	701a      	strb	r2, [r3, #0]
		{
		stateButtonDown = 1;
		if((pressedTimeDown >= 50) && (pressedTimeDown <= 1000)) return 1;	// short press, one click
		else if(pressedTimeDown > 1000) return 2;
		}
	break;
 8000c98:	e028      	b.n	8000cec <ButtonDownRead+0x140>
		else if((currentTime - stopPressedTimeDown>debouncingTime) && !buttonDownPressed)
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <ButtonDownRead+0x160>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	1ad2      	subs	r2, r2, r3
 8000ca2:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <ButtonDownRead+0x15c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	dd20      	ble.n	8000cec <ButtonDownRead+0x140>
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <ButtonDownRead+0x150>)
 8000cac:	691b      	ldr	r3, [r3, #16]
 8000cae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d01a      	beq.n	8000cec <ButtonDownRead+0x140>
		stateButtonDown = 1;
 8000cb6:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <ButtonDownRead+0x14c>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	701a      	strb	r2, [r3, #0]
		if((pressedTimeDown >= 50) && (pressedTimeDown <= 1000)) return 1;	// short press, one click
 8000cbc:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <ButtonDownRead+0x158>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b31      	cmp	r3, #49	; 0x31
 8000cc2:	dd06      	ble.n	8000cd2 <ButtonDownRead+0x126>
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <ButtonDownRead+0x158>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ccc:	dc01      	bgt.n	8000cd2 <ButtonDownRead+0x126>
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e00d      	b.n	8000cee <ButtonDownRead+0x142>
		else if(pressedTimeDown > 1000) return 2;
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <ButtonDownRead+0x158>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cda:	dd07      	ble.n	8000cec <ButtonDownRead+0x140>
 8000cdc:	2302      	movs	r3, #2
 8000cde:	e006      	b.n	8000cee <ButtonDownRead+0x142>
	break;
 8000ce0:	bf00      	nop
 8000ce2:	e004      	b.n	8000cee <ButtonDownRead+0x142>
	break;
 8000ce4:	bf00      	nop
 8000ce6:	e002      	b.n	8000cee <ButtonDownRead+0x142>
	break;
 8000ce8:	bf00      	nop
 8000cea:	e000      	b.n	8000cee <ButtonDownRead+0x142>
	break;
 8000cec:	bf00      	nop
	}
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000001 	.word	0x20000001
 8000cfc:	48001000 	.word	0x48001000
 8000d00:	20000034 	.word	0x20000034
 8000d04:	20000038 	.word	0x20000038
 8000d08:	20000004 	.word	0x20000004
 8000d0c:	2000003c 	.word	0x2000003c

08000d10 <ButtonLeftRead>:

/* Button LEFT */
char ButtonLeftRead()
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
	int currentTime = millis();
 8000d16:	f000 fbc5 	bl	80014a4 <millis>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	607b      	str	r3, [r7, #4]

	switch(stateButtonLeft)
 8000d1e:	4b4f      	ldr	r3, [pc, #316]	; (8000e5c <ButtonLeftRead+0x14c>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	2b03      	cmp	r3, #3
 8000d26:	f200 8094 	bhi.w	8000e52 <ButtonLeftRead+0x142>
 8000d2a:	a201      	add	r2, pc, #4	; (adr r2, 8000d30 <ButtonLeftRead+0x20>)
 8000d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d30:	08000d41 	.word	0x08000d41
 8000d34:	08000d67 	.word	0x08000d67
 8000d38:	08000daf 	.word	0x08000daf
 8000d3c:	08000ddb 	.word	0x08000ddb
	{
	case 1:
		if(buttonLeftPressed)
 8000d40:	4b47      	ldr	r3, [pc, #284]	; (8000e60 <ButtonLeftRead+0x150>)
 8000d42:	691b      	ldr	r3, [r3, #16]
 8000d44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d17b      	bne.n	8000e44 <ButtonLeftRead+0x134>
		{	stateButtonLeft = 2;
 8000d4c:	4b43      	ldr	r3, [pc, #268]	; (8000e5c <ButtonLeftRead+0x14c>)
 8000d4e:	2202      	movs	r2, #2
 8000d50:	701a      	strb	r2, [r3, #0]
			startPressedTimeLeft = millis();
 8000d52:	f000 fba7 	bl	80014a4 <millis>
 8000d56:	4603      	mov	r3, r0
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b42      	ldr	r3, [pc, #264]	; (8000e64 <ButtonLeftRead+0x154>)
 8000d5c:	601a      	str	r2, [r3, #0]
			pressedTimeLeft = 0;
 8000d5e:	4b42      	ldr	r3, [pc, #264]	; (8000e68 <ButtonLeftRead+0x158>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
		}
	break;
 8000d64:	e06e      	b.n	8000e44 <ButtonLeftRead+0x134>

	case 2:
		if((currentTime - startPressedTimeLeft>debouncingTime) && buttonLeftPressed) stateButtonLeft = 3;
 8000d66:	4b3f      	ldr	r3, [pc, #252]	; (8000e64 <ButtonLeftRead+0x154>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	1ad2      	subs	r2, r2, r3
 8000d6e:	4b3f      	ldr	r3, [pc, #252]	; (8000e6c <ButtonLeftRead+0x15c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	dd09      	ble.n	8000d8a <ButtonLeftRead+0x7a>
 8000d76:	4b3a      	ldr	r3, [pc, #232]	; (8000e60 <ButtonLeftRead+0x150>)
 8000d78:	691b      	ldr	r3, [r3, #16]
 8000d7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d103      	bne.n	8000d8a <ButtonLeftRead+0x7a>
 8000d82:	4b36      	ldr	r3, [pc, #216]	; (8000e5c <ButtonLeftRead+0x14c>)
 8000d84:	2203      	movs	r2, #3
 8000d86:	701a      	strb	r2, [r3, #0]
		else if((currentTime - startPressedTimeLeft>debouncingTime) && !buttonLeftPressed) stateButtonLeft = 1;
	break;
 8000d88:	e05e      	b.n	8000e48 <ButtonLeftRead+0x138>
		else if((currentTime - startPressedTimeLeft>debouncingTime) && !buttonLeftPressed) stateButtonLeft = 1;
 8000d8a:	4b36      	ldr	r3, [pc, #216]	; (8000e64 <ButtonLeftRead+0x154>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	1ad2      	subs	r2, r2, r3
 8000d92:	4b36      	ldr	r3, [pc, #216]	; (8000e6c <ButtonLeftRead+0x15c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	dd56      	ble.n	8000e48 <ButtonLeftRead+0x138>
 8000d9a:	4b31      	ldr	r3, [pc, #196]	; (8000e60 <ButtonLeftRead+0x150>)
 8000d9c:	691b      	ldr	r3, [r3, #16]
 8000d9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d050      	beq.n	8000e48 <ButtonLeftRead+0x138>
 8000da6:	4b2d      	ldr	r3, [pc, #180]	; (8000e5c <ButtonLeftRead+0x14c>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	701a      	strb	r2, [r3, #0]
	break;
 8000dac:	e04c      	b.n	8000e48 <ButtonLeftRead+0x138>

	case 3:
		pressedTimeLeft = currentTime - startPressedTimeLeft;	// debouncing, counting pressed time
 8000dae:	4b2d      	ldr	r3, [pc, #180]	; (8000e64 <ButtonLeftRead+0x154>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	4a2c      	ldr	r2, [pc, #176]	; (8000e68 <ButtonLeftRead+0x158>)
 8000db8:	6013      	str	r3, [r2, #0]
		if(!buttonLeftPressed) {stateButtonLeft = 4; stopPressedTimeLeft = millis();}
 8000dba:	4b29      	ldr	r3, [pc, #164]	; (8000e60 <ButtonLeftRead+0x150>)
 8000dbc:	691b      	ldr	r3, [r3, #16]
 8000dbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d042      	beq.n	8000e4c <ButtonLeftRead+0x13c>
 8000dc6:	4b25      	ldr	r3, [pc, #148]	; (8000e5c <ButtonLeftRead+0x14c>)
 8000dc8:	2204      	movs	r2, #4
 8000dca:	701a      	strb	r2, [r3, #0]
 8000dcc:	f000 fb6a 	bl	80014a4 <millis>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	4b26      	ldr	r3, [pc, #152]	; (8000e70 <ButtonLeftRead+0x160>)
 8000dd6:	601a      	str	r2, [r3, #0]
	break;
 8000dd8:	e038      	b.n	8000e4c <ButtonLeftRead+0x13c>

	case 4:
		if((currentTime - stopPressedTimeLeft>debouncingTime) && buttonLeftPressed) stateButtonLeft = 3;
 8000dda:	4b25      	ldr	r3, [pc, #148]	; (8000e70 <ButtonLeftRead+0x160>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	1ad2      	subs	r2, r2, r3
 8000de2:	4b22      	ldr	r3, [pc, #136]	; (8000e6c <ButtonLeftRead+0x15c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	dd09      	ble.n	8000dfe <ButtonLeftRead+0xee>
 8000dea:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <ButtonLeftRead+0x150>)
 8000dec:	691b      	ldr	r3, [r3, #16]
 8000dee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d103      	bne.n	8000dfe <ButtonLeftRead+0xee>
 8000df6:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <ButtonLeftRead+0x14c>)
 8000df8:	2203      	movs	r2, #3
 8000dfa:	701a      	strb	r2, [r3, #0]
		{
		stateButtonLeft = 1;
		if((pressedTimeLeft >= 50) && (pressedTimeLeft <= 1000)) return 1;	// short press, one click
		else if(pressedTimeLeft > 1000) return 2;
		}
	break;
 8000dfc:	e028      	b.n	8000e50 <ButtonLeftRead+0x140>
		else if((currentTime - stopPressedTimeLeft>debouncingTime) && !buttonLeftPressed)
 8000dfe:	4b1c      	ldr	r3, [pc, #112]	; (8000e70 <ButtonLeftRead+0x160>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	1ad2      	subs	r2, r2, r3
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <ButtonLeftRead+0x15c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	dd20      	ble.n	8000e50 <ButtonLeftRead+0x140>
 8000e0e:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <ButtonLeftRead+0x150>)
 8000e10:	691b      	ldr	r3, [r3, #16]
 8000e12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d01a      	beq.n	8000e50 <ButtonLeftRead+0x140>
		stateButtonLeft = 1;
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <ButtonLeftRead+0x14c>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	701a      	strb	r2, [r3, #0]
		if((pressedTimeLeft >= 50) && (pressedTimeLeft <= 1000)) return 1;	// short press, one click
 8000e20:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <ButtonLeftRead+0x158>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b31      	cmp	r3, #49	; 0x31
 8000e26:	dd06      	ble.n	8000e36 <ButtonLeftRead+0x126>
 8000e28:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <ButtonLeftRead+0x158>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e30:	dc01      	bgt.n	8000e36 <ButtonLeftRead+0x126>
 8000e32:	2301      	movs	r3, #1
 8000e34:	e00d      	b.n	8000e52 <ButtonLeftRead+0x142>
		else if(pressedTimeLeft > 1000) return 2;
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <ButtonLeftRead+0x158>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e3e:	dd07      	ble.n	8000e50 <ButtonLeftRead+0x140>
 8000e40:	2302      	movs	r3, #2
 8000e42:	e006      	b.n	8000e52 <ButtonLeftRead+0x142>
	break;
 8000e44:	bf00      	nop
 8000e46:	e004      	b.n	8000e52 <ButtonLeftRead+0x142>
	break;
 8000e48:	bf00      	nop
 8000e4a:	e002      	b.n	8000e52 <ButtonLeftRead+0x142>
	break;
 8000e4c:	bf00      	nop
 8000e4e:	e000      	b.n	8000e52 <ButtonLeftRead+0x142>
	break;
 8000e50:	bf00      	nop
	}
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000002 	.word	0x20000002
 8000e60:	48001000 	.word	0x48001000
 8000e64:	20000040 	.word	0x20000040
 8000e68:	20000044 	.word	0x20000044
 8000e6c:	20000004 	.word	0x20000004
 8000e70:	20000048 	.word	0x20000048

08000e74 <ButtonRightRead>:

/* Button RIGHT */
char ButtonRightRead()
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
	int currentTime = millis();
 8000e7a:	f000 fb13 	bl	80014a4 <millis>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	607b      	str	r3, [r7, #4]

	switch(stateButtonRight)
 8000e82:	4b4f      	ldr	r3, [pc, #316]	; (8000fc0 <ButtonRightRead+0x14c>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	2b03      	cmp	r3, #3
 8000e8a:	f200 8094 	bhi.w	8000fb6 <ButtonRightRead+0x142>
 8000e8e:	a201      	add	r2, pc, #4	; (adr r2, 8000e94 <ButtonRightRead+0x20>)
 8000e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e94:	08000ea5 	.word	0x08000ea5
 8000e98:	08000ecb 	.word	0x08000ecb
 8000e9c:	08000f13 	.word	0x08000f13
 8000ea0:	08000f3f 	.word	0x08000f3f
	{
	case 1:
		if(buttonRightPressed)
 8000ea4:	4b47      	ldr	r3, [pc, #284]	; (8000fc4 <ButtonRightRead+0x150>)
 8000ea6:	691b      	ldr	r3, [r3, #16]
 8000ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d17b      	bne.n	8000fa8 <ButtonRightRead+0x134>
		{	stateButtonRight = 2;
 8000eb0:	4b43      	ldr	r3, [pc, #268]	; (8000fc0 <ButtonRightRead+0x14c>)
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	701a      	strb	r2, [r3, #0]
			startPressedTimeRight = millis();
 8000eb6:	f000 faf5 	bl	80014a4 <millis>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b42      	ldr	r3, [pc, #264]	; (8000fc8 <ButtonRightRead+0x154>)
 8000ec0:	601a      	str	r2, [r3, #0]
			pressedTimeRight = 0;
 8000ec2:	4b42      	ldr	r3, [pc, #264]	; (8000fcc <ButtonRightRead+0x158>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
		}
	break;
 8000ec8:	e06e      	b.n	8000fa8 <ButtonRightRead+0x134>

	case 2:
		if((currentTime - startPressedTimeRight>debouncingTime) && buttonRightPressed) stateButtonRight = 3;
 8000eca:	4b3f      	ldr	r3, [pc, #252]	; (8000fc8 <ButtonRightRead+0x154>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	1ad2      	subs	r2, r2, r3
 8000ed2:	4b3f      	ldr	r3, [pc, #252]	; (8000fd0 <ButtonRightRead+0x15c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	dd09      	ble.n	8000eee <ButtonRightRead+0x7a>
 8000eda:	4b3a      	ldr	r3, [pc, #232]	; (8000fc4 <ButtonRightRead+0x150>)
 8000edc:	691b      	ldr	r3, [r3, #16]
 8000ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d103      	bne.n	8000eee <ButtonRightRead+0x7a>
 8000ee6:	4b36      	ldr	r3, [pc, #216]	; (8000fc0 <ButtonRightRead+0x14c>)
 8000ee8:	2203      	movs	r2, #3
 8000eea:	701a      	strb	r2, [r3, #0]
		else if((currentTime - startPressedTimeRight>debouncingTime) && !buttonRightPressed) stateButtonRight = 1;
	break;
 8000eec:	e05e      	b.n	8000fac <ButtonRightRead+0x138>
		else if((currentTime - startPressedTimeRight>debouncingTime) && !buttonRightPressed) stateButtonRight = 1;
 8000eee:	4b36      	ldr	r3, [pc, #216]	; (8000fc8 <ButtonRightRead+0x154>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	1ad2      	subs	r2, r2, r3
 8000ef6:	4b36      	ldr	r3, [pc, #216]	; (8000fd0 <ButtonRightRead+0x15c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	dd56      	ble.n	8000fac <ButtonRightRead+0x138>
 8000efe:	4b31      	ldr	r3, [pc, #196]	; (8000fc4 <ButtonRightRead+0x150>)
 8000f00:	691b      	ldr	r3, [r3, #16]
 8000f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d050      	beq.n	8000fac <ButtonRightRead+0x138>
 8000f0a:	4b2d      	ldr	r3, [pc, #180]	; (8000fc0 <ButtonRightRead+0x14c>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	701a      	strb	r2, [r3, #0]
	break;
 8000f10:	e04c      	b.n	8000fac <ButtonRightRead+0x138>

	case 3:
		pressedTimeRight = currentTime - startPressedTimeRight;	// debouncing, counting pressed time
 8000f12:	4b2d      	ldr	r3, [pc, #180]	; (8000fc8 <ButtonRightRead+0x154>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	4a2c      	ldr	r2, [pc, #176]	; (8000fcc <ButtonRightRead+0x158>)
 8000f1c:	6013      	str	r3, [r2, #0]
		if(!buttonRightPressed) {stateButtonRight = 4; stopPressedTimeRight = millis();}
 8000f1e:	4b29      	ldr	r3, [pc, #164]	; (8000fc4 <ButtonRightRead+0x150>)
 8000f20:	691b      	ldr	r3, [r3, #16]
 8000f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d042      	beq.n	8000fb0 <ButtonRightRead+0x13c>
 8000f2a:	4b25      	ldr	r3, [pc, #148]	; (8000fc0 <ButtonRightRead+0x14c>)
 8000f2c:	2204      	movs	r2, #4
 8000f2e:	701a      	strb	r2, [r3, #0]
 8000f30:	f000 fab8 	bl	80014a4 <millis>
 8000f34:	4603      	mov	r3, r0
 8000f36:	461a      	mov	r2, r3
 8000f38:	4b26      	ldr	r3, [pc, #152]	; (8000fd4 <ButtonRightRead+0x160>)
 8000f3a:	601a      	str	r2, [r3, #0]
	break;
 8000f3c:	e038      	b.n	8000fb0 <ButtonRightRead+0x13c>

	case 4:
		if((currentTime - stopPressedTimeRight>debouncingTime) && buttonRightPressed) stateButtonRight = 3;
 8000f3e:	4b25      	ldr	r3, [pc, #148]	; (8000fd4 <ButtonRightRead+0x160>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	1ad2      	subs	r2, r2, r3
 8000f46:	4b22      	ldr	r3, [pc, #136]	; (8000fd0 <ButtonRightRead+0x15c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	dd09      	ble.n	8000f62 <ButtonRightRead+0xee>
 8000f4e:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <ButtonRightRead+0x150>)
 8000f50:	691b      	ldr	r3, [r3, #16]
 8000f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d103      	bne.n	8000f62 <ButtonRightRead+0xee>
 8000f5a:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <ButtonRightRead+0x14c>)
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	701a      	strb	r2, [r3, #0]
		{
		stateButtonRight = 1;
		if((pressedTimeRight >= 50) && (pressedTimeRight <= 1000)) return 1;	// short press, one click
		else if(pressedTimeRight > 1000) return 2;
		}
	break;
 8000f60:	e028      	b.n	8000fb4 <ButtonRightRead+0x140>
		else if((currentTime - stopPressedTimeRight>debouncingTime) && !buttonRightPressed)
 8000f62:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <ButtonRightRead+0x160>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	1ad2      	subs	r2, r2, r3
 8000f6a:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <ButtonRightRead+0x15c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	dd20      	ble.n	8000fb4 <ButtonRightRead+0x140>
 8000f72:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <ButtonRightRead+0x150>)
 8000f74:	691b      	ldr	r3, [r3, #16]
 8000f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d01a      	beq.n	8000fb4 <ButtonRightRead+0x140>
		stateButtonRight = 1;
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <ButtonRightRead+0x14c>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	701a      	strb	r2, [r3, #0]
		if((pressedTimeRight >= 50) && (pressedTimeRight <= 1000)) return 1;	// short press, one click
 8000f84:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <ButtonRightRead+0x158>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b31      	cmp	r3, #49	; 0x31
 8000f8a:	dd06      	ble.n	8000f9a <ButtonRightRead+0x126>
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <ButtonRightRead+0x158>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f94:	dc01      	bgt.n	8000f9a <ButtonRightRead+0x126>
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00d      	b.n	8000fb6 <ButtonRightRead+0x142>
		else if(pressedTimeRight > 1000) return 2;
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <ButtonRightRead+0x158>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fa2:	dd07      	ble.n	8000fb4 <ButtonRightRead+0x140>
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	e006      	b.n	8000fb6 <ButtonRightRead+0x142>
	break;
 8000fa8:	bf00      	nop
 8000faa:	e004      	b.n	8000fb6 <ButtonRightRead+0x142>
	break;
 8000fac:	bf00      	nop
 8000fae:	e002      	b.n	8000fb6 <ButtonRightRead+0x142>
	break;
 8000fb0:	bf00      	nop
 8000fb2:	e000      	b.n	8000fb6 <ButtonRightRead+0x142>
	break;
 8000fb4:	bf00      	nop
	}
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000003 	.word	0x20000003
 8000fc4:	48001000 	.word	0x48001000
 8000fc8:	2000004c 	.word	0x2000004c
 8000fcc:	20000050 	.word	0x20000050
 8000fd0:	20000004 	.word	0x20000004
 8000fd4:	20000054 	.word	0x20000054

08000fd8 <LedInit>:
#include "stm32l4xx.h"
#include "LED.h"


void LedInit()
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
	// 1. Enable clock on port B and A
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN | RCC_AHB2ENR_GPIOAEN;
 8000fdc:	4a17      	ldr	r2, [pc, #92]	; (800103c <LedInit+0x64>)
 8000fde:	4b17      	ldr	r3, [pc, #92]	; (800103c <LedInit+0x64>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	f043 0303 	orr.w	r3, r3, #3
 8000fe6:	64d3      	str	r3, [r2, #76]	; 0x4c

	// 2. Set outputs
	// Default GPIO->MODER = 0xFFFF,
	GPIOB->MODER &= ~GPIO_MODER_MODE7_1; 	// Set PB7 as output, bits(15:14)=(0:1)
 8000fe8:	4a15      	ldr	r2, [pc, #84]	; (8001040 <LedInit+0x68>)
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <LedInit+0x68>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ff2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~GPIO_MODER_MODE14_1; 	// Set PB14 as output, bits(29:28)=(0:1)
 8000ff4:	4a12      	ldr	r2, [pc, #72]	; (8001040 <LedInit+0x68>)
 8000ff6:	4b12      	ldr	r3, [pc, #72]	; (8001040 <LedInit+0x68>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000ffe:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~GPIO_MODER_MODE0_1;	// Set PA0 as output, bits(1:0)=(0:1)
 8001000:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001004:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f023 0302 	bic.w	r3, r3, #2
 800100e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~GPIO_MODER_MODE1_1;	// Set PA1 as output, bits(3:2)=(0:1)
 8001010:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001014:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f023 0308 	bic.w	r3, r3, #8
 800101e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~GPIO_MODER_MODE2_1;	// Set PA2 as output, bits(5:4)=(0:1)
 8001020:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001024:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f023 0320 	bic.w	r3, r3, #32
 800102e:	6013      	str	r3, [r2, #0]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40021000 	.word	0x40021000
 8001040:	48000400 	.word	0x48000400

08001044 <LedWrite>:

// Write LED state
void LedWrite(LedPin pin, LedState state)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	460a      	mov	r2, r1
 800104e:	80fb      	strh	r3, [r7, #6]
 8001050:	4613      	mov	r3, r2
 8001052:	717b      	strb	r3, [r7, #5]
	switch(pin)
 8001054:	88fb      	ldrh	r3, [r7, #6]
 8001056:	2b04      	cmp	r3, #4
 8001058:	f000 8092 	beq.w	8001180 <LedWrite+0x13c>
 800105c:	2b04      	cmp	r3, #4
 800105e:	dc04      	bgt.n	800106a <LedWrite+0x26>
 8001060:	2b01      	cmp	r3, #1
 8001062:	d045      	beq.n	80010f0 <LedWrite+0xac>
 8001064:	2b02      	cmp	r3, #2
 8001066:	d067      	beq.n	8001138 <LedWrite+0xf4>
		if(state == ON) GPIOA->BSRR |= LED_B;
		else if(state == OFF) GPIOA->BRR |= LED_B;
		else if(state == TOG) GPIOA->ODR ^= LED_B;
	break;
	}
}
 8001068:	e0b7      	b.n	80011da <LedWrite+0x196>
	switch(pin)
 800106a:	2b80      	cmp	r3, #128	; 0x80
 800106c:	d003      	beq.n	8001076 <LedWrite+0x32>
 800106e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001072:	d01f      	beq.n	80010b4 <LedWrite+0x70>
}
 8001074:	e0b1      	b.n	80011da <LedWrite+0x196>
		if(state == ON) GPIOB->BSRR |= LED2;
 8001076:	797b      	ldrb	r3, [r7, #5]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d106      	bne.n	800108a <LedWrite+0x46>
 800107c:	4a5a      	ldr	r2, [pc, #360]	; (80011e8 <LedWrite+0x1a4>)
 800107e:	4b5a      	ldr	r3, [pc, #360]	; (80011e8 <LedWrite+0x1a4>)
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001086:	6193      	str	r3, [r2, #24]
	break;
 8001088:	e09e      	b.n	80011c8 <LedWrite+0x184>
		else if(state == OFF) GPIOB->BRR |= LED2;
 800108a:	797b      	ldrb	r3, [r7, #5]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d106      	bne.n	800109e <LedWrite+0x5a>
 8001090:	4a55      	ldr	r2, [pc, #340]	; (80011e8 <LedWrite+0x1a4>)
 8001092:	4b55      	ldr	r3, [pc, #340]	; (80011e8 <LedWrite+0x1a4>)
 8001094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800109a:	6293      	str	r3, [r2, #40]	; 0x28
	break;
 800109c:	e094      	b.n	80011c8 <LedWrite+0x184>
		else if(state == TOG) GPIOB->ODR ^= LED2;
 800109e:	797b      	ldrb	r3, [r7, #5]
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	f040 8091 	bne.w	80011c8 <LedWrite+0x184>
 80010a6:	4a50      	ldr	r2, [pc, #320]	; (80011e8 <LedWrite+0x1a4>)
 80010a8:	4b4f      	ldr	r3, [pc, #316]	; (80011e8 <LedWrite+0x1a4>)
 80010aa:	695b      	ldr	r3, [r3, #20]
 80010ac:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 80010b0:	6153      	str	r3, [r2, #20]
	break;
 80010b2:	e089      	b.n	80011c8 <LedWrite+0x184>
		if(state == ON) GPIOB->BSRR |= LED3;
 80010b4:	797b      	ldrb	r3, [r7, #5]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d106      	bne.n	80010c8 <LedWrite+0x84>
 80010ba:	4a4b      	ldr	r2, [pc, #300]	; (80011e8 <LedWrite+0x1a4>)
 80010bc:	4b4a      	ldr	r3, [pc, #296]	; (80011e8 <LedWrite+0x1a4>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c4:	6193      	str	r3, [r2, #24]
	break;
 80010c6:	e081      	b.n	80011cc <LedWrite+0x188>
		else if(state == OFF) GPIOB->BRR |= LED3;
 80010c8:	797b      	ldrb	r3, [r7, #5]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d106      	bne.n	80010dc <LedWrite+0x98>
 80010ce:	4a46      	ldr	r2, [pc, #280]	; (80011e8 <LedWrite+0x1a4>)
 80010d0:	4b45      	ldr	r3, [pc, #276]	; (80011e8 <LedWrite+0x1a4>)
 80010d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d8:	6293      	str	r3, [r2, #40]	; 0x28
	break;
 80010da:	e077      	b.n	80011cc <LedWrite+0x188>
		else if(state == TOG) GPIOB->ODR ^= LED3;
 80010dc:	797b      	ldrb	r3, [r7, #5]
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d174      	bne.n	80011cc <LedWrite+0x188>
 80010e2:	4a41      	ldr	r2, [pc, #260]	; (80011e8 <LedWrite+0x1a4>)
 80010e4:	4b40      	ldr	r3, [pc, #256]	; (80011e8 <LedWrite+0x1a4>)
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 80010ec:	6153      	str	r3, [r2, #20]
	break;
 80010ee:	e06d      	b.n	80011cc <LedWrite+0x188>
		if(state == ON) GPIOA->BSRR |= LED_R;
 80010f0:	797b      	ldrb	r3, [r7, #5]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d108      	bne.n	8001108 <LedWrite+0xc4>
 80010f6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80010fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6193      	str	r3, [r2, #24]
	break;
 8001106:	e063      	b.n	80011d0 <LedWrite+0x18c>
		else if(state == OFF) GPIOA->BRR |= LED_R;
 8001108:	797b      	ldrb	r3, [r7, #5]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d108      	bne.n	8001120 <LedWrite+0xdc>
 800110e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001112:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6293      	str	r3, [r2, #40]	; 0x28
	break;
 800111e:	e057      	b.n	80011d0 <LedWrite+0x18c>
		else if(state == TOG) GPIOA->ODR ^= LED_R;
 8001120:	797b      	ldrb	r3, [r7, #5]
 8001122:	2b02      	cmp	r3, #2
 8001124:	d154      	bne.n	80011d0 <LedWrite+0x18c>
 8001126:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800112a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800112e:	695b      	ldr	r3, [r3, #20]
 8001130:	f083 0301 	eor.w	r3, r3, #1
 8001134:	6153      	str	r3, [r2, #20]
	break;
 8001136:	e04b      	b.n	80011d0 <LedWrite+0x18c>
		if(state == ON) GPIOA->BSRR |= LED_G;
 8001138:	797b      	ldrb	r3, [r7, #5]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d108      	bne.n	8001150 <LedWrite+0x10c>
 800113e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001142:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	6193      	str	r3, [r2, #24]
	break;
 800114e:	e041      	b.n	80011d4 <LedWrite+0x190>
		else if(state == OFF) GPIOA->BRR |= LED_G;
 8001150:	797b      	ldrb	r3, [r7, #5]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d108      	bne.n	8001168 <LedWrite+0x124>
 8001156:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800115a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800115e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001160:	f043 0302 	orr.w	r3, r3, #2
 8001164:	6293      	str	r3, [r2, #40]	; 0x28
	break;
 8001166:	e035      	b.n	80011d4 <LedWrite+0x190>
		else if(state == TOG) GPIOA->ODR ^= LED_G;
 8001168:	797b      	ldrb	r3, [r7, #5]
 800116a:	2b02      	cmp	r3, #2
 800116c:	d132      	bne.n	80011d4 <LedWrite+0x190>
 800116e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001172:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001176:	695b      	ldr	r3, [r3, #20]
 8001178:	f083 0302 	eor.w	r3, r3, #2
 800117c:	6153      	str	r3, [r2, #20]
	break;
 800117e:	e029      	b.n	80011d4 <LedWrite+0x190>
		if(state == ON) GPIOA->BSRR |= LED_B;
 8001180:	797b      	ldrb	r3, [r7, #5]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d108      	bne.n	8001198 <LedWrite+0x154>
 8001186:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800118a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	f043 0304 	orr.w	r3, r3, #4
 8001194:	6193      	str	r3, [r2, #24]
	break;
 8001196:	e01f      	b.n	80011d8 <LedWrite+0x194>
		else if(state == OFF) GPIOA->BRR |= LED_B;
 8001198:	797b      	ldrb	r3, [r7, #5]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d108      	bne.n	80011b0 <LedWrite+0x16c>
 800119e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80011a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a8:	f043 0304 	orr.w	r3, r3, #4
 80011ac:	6293      	str	r3, [r2, #40]	; 0x28
	break;
 80011ae:	e013      	b.n	80011d8 <LedWrite+0x194>
		else if(state == TOG) GPIOA->ODR ^= LED_B;
 80011b0:	797b      	ldrb	r3, [r7, #5]
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d110      	bne.n	80011d8 <LedWrite+0x194>
 80011b6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80011ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011be:	695b      	ldr	r3, [r3, #20]
 80011c0:	f083 0304 	eor.w	r3, r3, #4
 80011c4:	6153      	str	r3, [r2, #20]
	break;
 80011c6:	e007      	b.n	80011d8 <LedWrite+0x194>
	break;
 80011c8:	bf00      	nop
 80011ca:	e006      	b.n	80011da <LedWrite+0x196>
	break;
 80011cc:	bf00      	nop
 80011ce:	e004      	b.n	80011da <LedWrite+0x196>
	break;
 80011d0:	bf00      	nop
 80011d2:	e002      	b.n	80011da <LedWrite+0x196>
	break;
 80011d4:	bf00      	nop
 80011d6:	e000      	b.n	80011da <LedWrite+0x196>
	break;
 80011d8:	bf00      	nop
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	48000400 	.word	0x48000400

080011ec <SysClockHSI_Init>:
#include "stm32l4xx.h"
#include "RccConfig.h"


void SysClockHSI_Init()
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
	// 1. Enable HSI 16MHz and wait for confirmation
	RCC->CR |= RCC_CR_HSION;
 80011f0:	4a2a      	ldr	r2, [pc, #168]	; (800129c <SysClockHSI_Init+0xb0>)
 80011f2:	4b2a      	ldr	r3, [pc, #168]	; (800129c <SysClockHSI_Init+0xb0>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011fa:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSIRDY));
 80011fc:	bf00      	nop
 80011fe:	4b27      	ldr	r3, [pc, #156]	; (800129c <SysClockHSI_Init+0xb0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0f9      	beq.n	80011fe <SysClockHSI_Init+0x12>
	//RCC->APB1ENR1 |= RCC_APB1ENR1_PWREN;

	// 3. Configure the FLASH and the LATENCY Related Settings
	//FLASH->ACR |= FLASH_ACR_ICEN; // instruction cache enable, RESET VALUE
	//FLASH->ACR |= FLASH_ACR_DCEN; // data cache enable, RESET VALUE
	FLASH->ACR |= FLASH_ACR_LATENCY_4WS; // 4 wait states (number of HCLK period to the Flash access time)
 800120a:	4a25      	ldr	r2, [pc, #148]	; (80012a0 <SysClockHSI_Init+0xb4>)
 800120c:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <SysClockHSI_Init+0xb4>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f043 0304 	orr.w	r3, r3, #4
 8001214:	6013      	str	r3, [r2, #0]

	// 4. Configure PRESCALERS HCLK, PCLK1, PCLK2
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1; // AHB prescaler, HCLK
 8001216:	4a21      	ldr	r2, [pc, #132]	; (800129c <SysClockHSI_Init+0xb0>)
 8001218:	4b20      	ldr	r3, [pc, #128]	; (800129c <SysClockHSI_Init+0xb0>)
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV1; // APB1 prescaler, PCLK1
 800121e:	4a1f      	ldr	r2, [pc, #124]	; (800129c <SysClockHSI_Init+0xb0>)
 8001220:	4b1e      	ldr	r3, [pc, #120]	; (800129c <SysClockHSI_Init+0xb0>)
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1; // APB2 prescaler, PCLK2
 8001226:	4a1d      	ldr	r2, [pc, #116]	; (800129c <SysClockHSI_Init+0xb0>)
 8001228:	4b1c      	ldr	r3, [pc, #112]	; (800129c <SysClockHSI_Init+0xb0>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	6093      	str	r3, [r2, #8]

	// 5. Configure PLL
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI; 					// set source PLL as HSI
 800122e:	4a1b      	ldr	r2, [pc, #108]	; (800129c <SysClockHSI_Init+0xb0>)
 8001230:	4b1a      	ldr	r3, [pc, #104]	; (800129c <SysClockHSI_Init+0xb0>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	f043 0302 	orr.w	r3, r3, #2
 8001238:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |=	RCC_PLLCFGR_PLLM_0; 						// PLLM(6:4)=(001) -> PLLM = 2
 800123a:	4a18      	ldr	r2, [pc, #96]	; (800129c <SysClockHSI_Init+0xb0>)
 800123c:	4b17      	ldr	r3, [pc, #92]	; (800129c <SysClockHSI_Init+0xb0>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	f043 0310 	orr.w	r3, r3, #16
 8001244:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |=	RCC_PLLCFGR_PLLN_2 | RCC_PLLCFGR_PLLN_4;	// PLLN(14:8)=(0010100) -> PLLN = 20
 8001246:	4a15      	ldr	r2, [pc, #84]	; (800129c <SysClockHSI_Init+0xb0>)
 8001248:	4b14      	ldr	r3, [pc, #80]	; (800129c <SysClockHSI_Init+0xb0>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001250:	60d3      	str	r3, [r2, #12]
	//RCC->PLLCFGR |=	RCC_PLLCFGR_PLLN_5 | RCC_PLLCFGR_PLLN_3;
																// PLLR(26:25)=(00) -> PLLR = 2 RESET VALUE
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN;							// PLLCLK output ENABLE
 8001252:	4a12      	ldr	r2, [pc, #72]	; (800129c <SysClockHSI_Init+0xb0>)
 8001254:	4b11      	ldr	r3, [pc, #68]	; (800129c <SysClockHSI_Init+0xb0>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800125c:	60d3      	str	r3, [r2, #12]

	// 6. Enable PLL and wait for confirmation
	RCC->CR |= RCC_CR_PLLON;
 800125e:	4a0f      	ldr	r2, [pc, #60]	; (800129c <SysClockHSI_Init+0xb0>)
 8001260:	4b0e      	ldr	r3, [pc, #56]	; (800129c <SysClockHSI_Init+0xb0>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001268:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY));
 800126a:	bf00      	nop
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <SysClockHSI_Init+0xb0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d0f9      	beq.n	800126c <SysClockHSI_Init+0x80>

	// 7. Select the Clock Source
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001278:	4a08      	ldr	r2, [pc, #32]	; (800129c <SysClockHSI_Init+0xb0>)
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <SysClockHSI_Init+0xb0>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f043 0303 	orr.w	r3, r3, #3
 8001282:	6093      	str	r3, [r2, #8]
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL );
 8001284:	bf00      	nop
 8001286:	4b05      	ldr	r3, [pc, #20]	; (800129c <SysClockHSI_Init+0xb0>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f003 030c 	and.w	r3, r3, #12
 800128e:	2b0c      	cmp	r3, #12
 8001290:	d1f9      	bne.n	8001286 <SysClockHSI_Init+0x9a>
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	40021000 	.word	0x40021000
 80012a0:	40022000 	.word	0x40022000

080012a4 <ServoInit>:
#include "stm32l4xx.h"
#include "Servo.h"

// Initialization servo
void ServoInit()
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
	// Enable clock for TIM3 and GPIO C
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM3EN;
 80012a8:	4a2b      	ldr	r2, [pc, #172]	; (8001358 <ServoInit+0xb4>)
 80012aa:	4b2b      	ldr	r3, [pc, #172]	; (8001358 <ServoInit+0xb4>)
 80012ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ae:	f043 0302 	orr.w	r3, r3, #2
 80012b2:	6593      	str	r3, [r2, #88]	; 0x58
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 80012b4:	4a28      	ldr	r2, [pc, #160]	; (8001358 <ServoInit+0xb4>)
 80012b6:	4b28      	ldr	r3, [pc, #160]	; (8001358 <ServoInit+0xb4>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ba:	f043 0304 	orr.w	r3, r3, #4
 80012be:	64d3      	str	r3, [r2, #76]	; 0x4c

	// Configure pin PC8 and PC9 as alternate function
	GPIOC->MODER &= ~GPIO_MODER_MODE8_0; 	// Set PC8 as Alternate function, 0 write in MODER8[1]
 80012c0:	4a26      	ldr	r2, [pc, #152]	; (800135c <ServoInit+0xb8>)
 80012c2:	4b26      	ldr	r3, [pc, #152]	; (800135c <ServoInit+0xb8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ca:	6013      	str	r3, [r2, #0]
	GPIOC->AFR[1] |= GPIO_AFRH_AFSEL8_1; 	// AF 2 on PC8 -> TIM3_CH3
 80012cc:	4a23      	ldr	r2, [pc, #140]	; (800135c <ServoInit+0xb8>)
 80012ce:	4b23      	ldr	r3, [pc, #140]	; (800135c <ServoInit+0xb8>)
 80012d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d2:	f043 0302 	orr.w	r3, r3, #2
 80012d6:	6253      	str	r3, [r2, #36]	; 0x24

	GPIOC->MODER &= ~GPIO_MODER_MODE9_0; 	// Set PC9 as Alternate function, 0 write in MODER9[1]
 80012d8:	4a20      	ldr	r2, [pc, #128]	; (800135c <ServoInit+0xb8>)
 80012da:	4b20      	ldr	r3, [pc, #128]	; (800135c <ServoInit+0xb8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e2:	6013      	str	r3, [r2, #0]
	GPIOC->AFR[1] |= GPIO_AFRH_AFSEL9_1; 	// AF 2 on PC9 -> TIM3_CH4
 80012e4:	4a1d      	ldr	r2, [pc, #116]	; (800135c <ServoInit+0xb8>)
 80012e6:	4b1d      	ldr	r3, [pc, #116]	; (800135c <ServoInit+0xb8>)
 80012e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ea:	f043 0320 	orr.w	r3, r3, #32
 80012ee:	6253      	str	r3, [r2, #36]	; 0x24


	// Configure TIM3, channel 3 and 4
	TIM3->PSC = 79;				// prescaler 80 MHz / (79 + 1) = 1 MHz
 80012f0:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <ServoInit+0xbc>)
 80012f2:	224f      	movs	r2, #79	; 0x4f
 80012f4:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 20000;			// 20000us = 20ms = 50Hz -> required by servo
 80012f6:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <ServoInit+0xbc>)
 80012f8:	f644 6220 	movw	r2, #20000	; 0x4e20
 80012fc:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;	// OCxM = 0110 -> PWM mode 1, channel is active when TIM3_CNT < TIM3_CCRx
 80012fe:	4a18      	ldr	r2, [pc, #96]	; (8001360 <ServoInit+0xbc>)
 8001300:	4b17      	ldr	r3, [pc, #92]	; (8001360 <ServoInit+0xbc>)
 8001302:	69db      	ldr	r3, [r3, #28]
 8001304:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8001308:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800130c:	61d3      	str	r3, [r2, #28]
	TIM3->CCMR2 |= TIM_CCMR2_OC3PE | TIM_CCMR2_OC4PE;	// output compare preload enable
 800130e:	4a14      	ldr	r2, [pc, #80]	; (8001360 <ServoInit+0xbc>)
 8001310:	4b13      	ldr	r3, [pc, #76]	; (8001360 <ServoInit+0xbc>)
 8001312:	69db      	ldr	r3, [r3, #28]
 8001314:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001318:	f043 0308 	orr.w	r3, r3, #8
 800131c:	61d3      	str	r3, [r2, #28]
	TIM3->CCER |= TIM_CCER_CC3E | TIM_CCER_CC4E;	// capture/compare 3 output enable
 800131e:	4a10      	ldr	r2, [pc, #64]	; (8001360 <ServoInit+0xbc>)
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <ServoInit+0xbc>)
 8001322:	6a1b      	ldr	r3, [r3, #32]
 8001324:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8001328:	6213      	str	r3, [r2, #32]
	TIM3->CR1 |= TIM_CR1_ARPE;	// auto-reload preload enable
 800132a:	4a0d      	ldr	r2, [pc, #52]	; (8001360 <ServoInit+0xbc>)
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <ServoInit+0xbc>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001334:	6013      	str	r3, [r2, #0]
	TIM3->EGR |= TIM_EGR_UG;	// update generation
 8001336:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <ServoInit+0xbc>)
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <ServoInit+0xbc>)
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6153      	str	r3, [r2, #20]
	TIM3->CR1 |= TIM_CR1_CEN;	// counter enable
 8001342:	4a07      	ldr	r2, [pc, #28]	; (8001360 <ServoInit+0xbc>)
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <ServoInit+0xbc>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6013      	str	r3, [r2, #0]
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	40021000 	.word	0x40021000
 800135c:	48000800 	.word	0x48000800
 8001360:	40000400 	.word	0x40000400
 8001364:	00000000 	.word	0x00000000

08001368 <ServoSetAngleHorizontal>:

void ServoSetAngleHorizontal(int angle)
{
 8001368:	b590      	push	{r4, r7, lr}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	if(angle<0) angle = 0;				// limits
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	da02      	bge.n	800137c <ServoSetAngleHorizontal+0x14>
 8001376:	2300      	movs	r3, #0
 8001378:	607b      	str	r3, [r7, #4]
 800137a:	e004      	b.n	8001386 <ServoSetAngleHorizontal+0x1e>
	else if(angle>180) angle = 180;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2bb4      	cmp	r3, #180	; 0xb4
 8001380:	dd01      	ble.n	8001386 <ServoSetAngleHorizontal+0x1e>
 8001382:	23b4      	movs	r3, #180	; 0xb4
 8001384:	607b      	str	r3, [r7, #4]

	TIM3->CCR3 = 11.11 * (180 - angle) + 500; 	// servo can work in range 500 - 2500ms, factor 11.11 -> 2000ms /180 deg
 8001386:	4c12      	ldr	r4, [pc, #72]	; (80013d0 <ServoSetAngleHorizontal+0x68>)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff f880 	bl	8000494 <__aeabi_i2d>
 8001394:	a30c      	add	r3, pc, #48	; (adr r3, 80013c8 <ServoSetAngleHorizontal+0x60>)
 8001396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139a:	f7ff f8e1 	bl	8000560 <__aeabi_dmul>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4610      	mov	r0, r2
 80013a4:	4619      	mov	r1, r3
 80013a6:	f04f 0200 	mov.w	r2, #0
 80013aa:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <ServoSetAngleHorizontal+0x6c>)
 80013ac:	f7fe ff26 	bl	80001fc <__adddf3>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4610      	mov	r0, r2
 80013b6:	4619      	mov	r1, r3
 80013b8:	f7ff fae4 	bl	8000984 <__aeabi_d2uiz>
 80013bc:	4603      	mov	r3, r0
 80013be:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd90      	pop	{r4, r7, pc}
 80013c8:	eb851eb8 	.word	0xeb851eb8
 80013cc:	40263851 	.word	0x40263851
 80013d0:	40000400 	.word	0x40000400
 80013d4:	407f4000 	.word	0x407f4000

080013d8 <ServoSetAngleVertical>:

void ServoSetAngleVertical(int angle)
{
 80013d8:	b590      	push	{r4, r7, lr}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	if(angle<0) angle = 0;				// limits
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	da02      	bge.n	80013ec <ServoSetAngleVertical+0x14>
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	e004      	b.n	80013f6 <ServoSetAngleVertical+0x1e>
	else if(angle>90) angle = 90;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b5a      	cmp	r3, #90	; 0x5a
 80013f0:	dd01      	ble.n	80013f6 <ServoSetAngleVertical+0x1e>
 80013f2:	235a      	movs	r3, #90	; 0x5a
 80013f4:	607b      	str	r3, [r7, #4]

	TIM3->CCR4 = 11.11 * angle + 500; 	// servo can work in range 500 - 2500ms, factor 11.11 -> 2000ms /180 deg
 80013f6:	4c12      	ldr	r4, [pc, #72]	; (8001440 <ServoSetAngleVertical+0x68>)
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff f84b 	bl	8000494 <__aeabi_i2d>
 80013fe:	a30e      	add	r3, pc, #56	; (adr r3, 8001438 <ServoSetAngleVertical+0x60>)
 8001400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001404:	f7ff f8ac 	bl	8000560 <__aeabi_dmul>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	4610      	mov	r0, r2
 800140e:	4619      	mov	r1, r3
 8001410:	f04f 0200 	mov.w	r2, #0
 8001414:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <ServoSetAngleVertical+0x6c>)
 8001416:	f7fe fef1 	bl	80001fc <__adddf3>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4610      	mov	r0, r2
 8001420:	4619      	mov	r1, r3
 8001422:	f7ff faaf 	bl	8000984 <__aeabi_d2uiz>
 8001426:	4603      	mov	r3, r0
 8001428:	6423      	str	r3, [r4, #64]	; 0x40
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	bd90      	pop	{r4, r7, pc}
 8001432:	bf00      	nop
 8001434:	f3af 8000 	nop.w
 8001438:	eb851eb8 	.word	0xeb851eb8
 800143c:	40263851 	.word	0x40263851
 8001440:	40000400 	.word	0x40000400
 8001444:	407f4000 	.word	0x407f4000

08001448 <SysTickInit>:

volatile int ticks;

// Configuration SysTick registers
void SysTickInit()
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
	SysTick->LOAD = SYSTICK_CONFIG_MS - 1;			// Number of cycles between interrupts
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <SysTickInit+0x38>)
 800144e:	4a0d      	ldr	r2, [pc, #52]	; (8001484 <SysTickInit+0x3c>)
 8001450:	605a      	str	r2, [r3, #4]

	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;		// Enable interrupt
 8001452:	4a0b      	ldr	r2, [pc, #44]	; (8001480 <SysTickInit+0x38>)
 8001454:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <SysTickInit+0x38>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;	// Enable clock system AHB
 800145e:	4a08      	ldr	r2, [pc, #32]	; (8001480 <SysTickInit+0x38>)
 8001460:	4b07      	ldr	r3, [pc, #28]	; (8001480 <SysTickInit+0x38>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f043 0304 	orr.w	r3, r3, #4
 8001468:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;		// Enable SysTick
 800146a:	4a05      	ldr	r2, [pc, #20]	; (8001480 <SysTickInit+0x38>)
 800146c:	4b04      	ldr	r3, [pc, #16]	; (8001480 <SysTickInit+0x38>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6013      	str	r3, [r2, #0]
}
 8001476:	bf00      	nop
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000e010 	.word	0xe000e010
 8001484:	0001387f 	.word	0x0001387f

08001488 <SysTick_Handler>:

void SysTick_Handler()
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
	ticks++;
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <SysTick_Handler+0x18>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	3301      	adds	r3, #1
 8001492:	4a03      	ldr	r2, [pc, #12]	; (80014a0 <SysTick_Handler+0x18>)
 8001494:	6013      	str	r3, [r2, #0]
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	20000064 	.word	0x20000064

080014a4 <millis>:

// Return current time in milliseconds
uint32_t millis()
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
	return ticks;
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <millis+0x14>)
 80014aa:	681b      	ldr	r3, [r3, #0]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	20000064 	.word	0x20000064

080014bc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80014c6:	4909      	ldr	r1, [pc, #36]	; (80014ec <NVIC_EnableIRQ+0x30>)
 80014c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014cc:	095b      	lsrs	r3, r3, #5
 80014ce:	79fa      	ldrb	r2, [r7, #7]
 80014d0:	f002 021f 	and.w	r2, r2, #31
 80014d4:	2001      	movs	r0, #1
 80014d6:	fa00 f202 	lsl.w	r2, r0, r2
 80014da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000e100 	.word	0xe000e100

080014f0 <USART3_Init>:
	float a;
}floatToBytes;


void USART3_Init()
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0

	// 1. Enable USART3 clock and GPIOB GPIOD (PB10 -> TX, PD9 - RX)
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN | RCC_AHB2ENR_GPIODEN;
 80014f4:	4a1c      	ldr	r2, [pc, #112]	; (8001568 <USART3_Init+0x78>)
 80014f6:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <USART3_Init+0x78>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fa:	f043 030a 	orr.w	r3, r3, #10
 80014fe:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART3EN;
 8001500:	4a19      	ldr	r2, [pc, #100]	; (8001568 <USART3_Init+0x78>)
 8001502:	4b19      	ldr	r3, [pc, #100]	; (8001568 <USART3_Init+0x78>)
 8001504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001506:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800150a:	6593      	str	r3, [r2, #88]	; 0x58

	// 2. Configure LPUART pins as alternate functions
	GPIOB->MODER &= ~GPIO_MODER_MODE10_0; 	// Set PB10 as Alternate function, 0 write in MODER7[1]
 800150c:	4a17      	ldr	r2, [pc, #92]	; (800156c <USART3_Init+0x7c>)
 800150e:	4b17      	ldr	r3, [pc, #92]	; (800156c <USART3_Init+0x7c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001516:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~GPIO_MODER_MODE9_0; 	// Set PD9 as Alternate function, 0 write in MODER8[1]
 8001518:	4a15      	ldr	r2, [pc, #84]	; (8001570 <USART3_Init+0x80>)
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <USART3_Init+0x80>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001522:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[1] |= GPIO_AFRH_AFSEL10_0 | GPIO_AFRH_AFSEL10_1 | GPIO_AFRH_AFSEL10_2;	//PB10 -> Select alternate function in AFRH (USART3_TX), AF7 -> bits(11:10:9:8)=(0:1:1:1)
 8001524:	4a11      	ldr	r2, [pc, #68]	; (800156c <USART3_Init+0x7c>)
 8001526:	4b11      	ldr	r3, [pc, #68]	; (800156c <USART3_Init+0x7c>)
 8001528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800152e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= GPIO_AFRH_AFSEL9_0 | GPIO_AFRH_AFSEL9_1 | GPIO_AFRH_AFSEL9_2;		//PD9 -> Select alternate function in AFRH (USART3_RX), Table 16 datasheet STM32L496
 8001530:	4a0f      	ldr	r2, [pc, #60]	; (8001570 <USART3_Init+0x80>)
 8001532:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <USART3_Init+0x80>)
 8001534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001536:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800153a:	6253      	str	r3, [r2, #36]	; 0x24

	// 3. Set word length, baud rate
	// USART3->CR1 |=				// Default word length -> 1 start bit, 8 data bits
	// USART3->CR2 |=				// Default 1 STOP bits
	USART3->BRR = F_CLK/BAUDRATE;	// 115200 baudrate
 800153c:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <USART3_Init+0x84>)
 800153e:	f240 22b6 	movw	r2, #694	; 0x2b6
 8001542:	60da      	str	r2, [r3, #12]

	// 4. Enable UART, transmitter and receiver
	USART3->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8001544:	4a0b      	ldr	r2, [pc, #44]	; (8001574 <USART3_Init+0x84>)
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <USART3_Init+0x84>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f043 030d 	orr.w	r3, r3, #13
 800154e:	6013      	str	r3, [r2, #0]

	// 5. Enable USART interrupt
	USART3->CR1 |= USART_CR1_RXNEIE; //| USART_CR1_IDLEIE;
 8001550:	4a08      	ldr	r2, [pc, #32]	; (8001574 <USART3_Init+0x84>)
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <USART3_Init+0x84>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f043 0320 	orr.w	r3, r3, #32
 800155a:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(USART3_IRQn);
 800155c:	2027      	movs	r0, #39	; 0x27
 800155e:	f7ff ffad 	bl	80014bc <NVIC_EnableIRQ>

}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40021000 	.word	0x40021000
 800156c:	48000400 	.word	0x48000400
 8001570:	48000c00 	.word	0x48000c00
 8001574:	40004800 	.word	0x40004800

08001578 <USART3_IRQHandler>:
	}
	}
}

void USART3_IRQHandler()
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
	// Receive buffer not empty
	// Frame checking
	if(USART3->ISR & USART_ISR_RXNE)
 800157e:	4b41      	ldr	r3, [pc, #260]	; (8001684 <USART3_IRQHandler+0x10c>)
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	f003 0320 	and.w	r3, r3, #32
 8001586:	2b00      	cmp	r3, #0
 8001588:	d075      	beq.n	8001676 <USART3_IRQHandler+0xfe>
	{
		unsigned char data = USART3->RDR;
 800158a:	4b3e      	ldr	r3, [pc, #248]	; (8001684 <USART3_IRQHandler+0x10c>)
 800158c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800158e:	b29b      	uxth	r3, r3
 8001590:	71fb      	strb	r3, [r7, #7]
		switch(stateFrame)
 8001592:	4b3d      	ldr	r3, [pc, #244]	; (8001688 <USART3_IRQHandler+0x110>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	3b01      	subs	r3, #1
 8001598:	2b04      	cmp	r3, #4
 800159a:	d861      	bhi.n	8001660 <USART3_IRQHandler+0xe8>
 800159c:	a201      	add	r2, pc, #4	; (adr r2, 80015a4 <USART3_IRQHandler+0x2c>)
 800159e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a2:	bf00      	nop
 80015a4:	080015b9 	.word	0x080015b9
 80015a8:	080015d3 	.word	0x080015d3
 80015ac:	080015f5 	.word	0x080015f5
 80015b0:	08001617 	.word	0x08001617
 80015b4:	08001633 	.word	0x08001633
		{
		case 1:
			if(data == '#')
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	2b23      	cmp	r3, #35	; 0x23
 80015bc:	d14d      	bne.n	800165a <USART3_IRQHandler+0xe2>
			{
				bufReceive[wp]=data;
 80015be:	4b33      	ldr	r3, [pc, #204]	; (800168c <USART3_IRQHandler+0x114>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	4619      	mov	r1, r3
 80015c4:	4a32      	ldr	r2, [pc, #200]	; (8001690 <USART3_IRQHandler+0x118>)
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	5453      	strb	r3, [r2, r1]
				stateFrame = 2;
 80015ca:	4b2f      	ldr	r3, [pc, #188]	; (8001688 <USART3_IRQHandler+0x110>)
 80015cc:	2202      	movs	r2, #2
 80015ce:	701a      	strb	r2, [r3, #0]
			}
		break;
 80015d0:	e043      	b.n	800165a <USART3_IRQHandler+0xe2>
		case 2:
			if(data == '#')
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	2b23      	cmp	r3, #35	; 0x23
 80015d6:	d109      	bne.n	80015ec <USART3_IRQHandler+0x74>
			{
				bufReceive[wp]=data;
 80015d8:	4b2c      	ldr	r3, [pc, #176]	; (800168c <USART3_IRQHandler+0x114>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4619      	mov	r1, r3
 80015de:	4a2c      	ldr	r2, [pc, #176]	; (8001690 <USART3_IRQHandler+0x118>)
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	5453      	strb	r3, [r2, r1]
				stateFrame = 3;
 80015e4:	4b28      	ldr	r3, [pc, #160]	; (8001688 <USART3_IRQHandler+0x110>)
 80015e6:	2203      	movs	r2, #3
 80015e8:	701a      	strb	r2, [r3, #0]
			}
			else stateFrame = 1;
		break;
 80015ea:	e039      	b.n	8001660 <USART3_IRQHandler+0xe8>
			else stateFrame = 1;
 80015ec:	4b26      	ldr	r3, [pc, #152]	; (8001688 <USART3_IRQHandler+0x110>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	701a      	strb	r2, [r3, #0]
		break;
 80015f2:	e035      	b.n	8001660 <USART3_IRQHandler+0xe8>
		case 3:
			if(data == '#')
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	2b23      	cmp	r3, #35	; 0x23
 80015f8:	d109      	bne.n	800160e <USART3_IRQHandler+0x96>
			{
				bufReceive[wp]=data;
 80015fa:	4b24      	ldr	r3, [pc, #144]	; (800168c <USART3_IRQHandler+0x114>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	4619      	mov	r1, r3
 8001600:	4a23      	ldr	r2, [pc, #140]	; (8001690 <USART3_IRQHandler+0x118>)
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	5453      	strb	r3, [r2, r1]
				stateFrame = 4;
 8001606:	4b20      	ldr	r3, [pc, #128]	; (8001688 <USART3_IRQHandler+0x110>)
 8001608:	2204      	movs	r2, #4
 800160a:	701a      	strb	r2, [r3, #0]
			}
			else stateFrame = 1;
		break;
 800160c:	e028      	b.n	8001660 <USART3_IRQHandler+0xe8>
			else stateFrame = 1;
 800160e:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <USART3_IRQHandler+0x110>)
 8001610:	2201      	movs	r2, #1
 8001612:	701a      	strb	r2, [r3, #0]
		break;
 8001614:	e024      	b.n	8001660 <USART3_IRQHandler+0xe8>
		case 4:
				bufReceive[wp]=data;
 8001616:	4b1d      	ldr	r3, [pc, #116]	; (800168c <USART3_IRQHandler+0x114>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	4619      	mov	r1, r3
 800161c:	4a1c      	ldr	r2, [pc, #112]	; (8001690 <USART3_IRQHandler+0x118>)
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	5453      	strb	r3, [r2, r1]
				if(wp == 31) stateFrame = 5;
 8001622:	4b1a      	ldr	r3, [pc, #104]	; (800168c <USART3_IRQHandler+0x114>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b1f      	cmp	r3, #31
 8001628:	d119      	bne.n	800165e <USART3_IRQHandler+0xe6>
 800162a:	4b17      	ldr	r3, [pc, #92]	; (8001688 <USART3_IRQHandler+0x110>)
 800162c:	2205      	movs	r2, #5
 800162e:	701a      	strb	r2, [r3, #0]
		break;
 8001630:	e015      	b.n	800165e <USART3_IRQHandler+0xe6>
		case 5:
			if(data == '!')
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	2b21      	cmp	r3, #33	; 0x21
 8001636:	d10c      	bne.n	8001652 <USART3_IRQHandler+0xda>
			{
				bufReceive[wp]=data;
 8001638:	4b14      	ldr	r3, [pc, #80]	; (800168c <USART3_IRQHandler+0x114>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	4619      	mov	r1, r3
 800163e:	4a14      	ldr	r2, [pc, #80]	; (8001690 <USART3_IRQHandler+0x118>)
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	5453      	strb	r3, [r2, r1]
				stateFrame = 1;
 8001644:	4b10      	ldr	r3, [pc, #64]	; (8001688 <USART3_IRQHandler+0x110>)
 8001646:	2201      	movs	r2, #1
 8001648:	701a      	strb	r2, [r3, #0]
				receivedMessageFromUSART = 1;
 800164a:	4b12      	ldr	r3, [pc, #72]	; (8001694 <USART3_IRQHandler+0x11c>)
 800164c:	2201      	movs	r2, #1
 800164e:	701a      	strb	r2, [r3, #0]
			}
			else stateFrame = 1;
		break;
 8001650:	e006      	b.n	8001660 <USART3_IRQHandler+0xe8>
			else stateFrame = 1;
 8001652:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <USART3_IRQHandler+0x110>)
 8001654:	2201      	movs	r2, #1
 8001656:	701a      	strb	r2, [r3, #0]
		break;
 8001658:	e002      	b.n	8001660 <USART3_IRQHandler+0xe8>
		break;
 800165a:	bf00      	nop
 800165c:	e000      	b.n	8001660 <USART3_IRQHandler+0xe8>
		break;
 800165e:	bf00      	nop
		}
		if(wp++ >= sizeof(bufReceive)-1) wp = 0;
 8001660:	4b0a      	ldr	r3, [pc, #40]	; (800168c <USART3_IRQHandler+0x114>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	1c5a      	adds	r2, r3, #1
 8001666:	b2d1      	uxtb	r1, r2
 8001668:	4a08      	ldr	r2, [pc, #32]	; (800168c <USART3_IRQHandler+0x114>)
 800166a:	7011      	strb	r1, [r2, #0]
 800166c:	2b1f      	cmp	r3, #31
 800166e:	d902      	bls.n	8001676 <USART3_IRQHandler+0xfe>
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <USART3_IRQHandler+0x114>)
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]
	{
		USART3_ReadMessage(wp);
		wp=0;
		USART3->ICR |= USART_ICR_IDLECF;
	}*/
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	40004800 	.word	0x40004800
 8001688:	20000008 	.word	0x20000008
 800168c:	20000058 	.word	0x20000058
 8001690:	2000007c 	.word	0x2000007c
 8001694:	20000074 	.word	0x20000074

08001698 <main>:

float varToSend[]={0,0,0};


int main(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0

	/*Init peripherials */
	SysClockHSI_Init();
 800169c:	f7ff fda6 	bl	80011ec <SysClockHSI_Init>
	SysTickInit();
 80016a0:	f7ff fed2 	bl	8001448 <SysTickInit>
	USART3_Init();
 80016a4:	f7ff ff24 	bl	80014f0 <USART3_Init>
	LedInit();
 80016a8:	f7ff fc96 	bl	8000fd8 <LedInit>
	ServoInit();
 80016ac:	f7ff fdfa 	bl	80012a4 <ServoInit>
	ButtonsInit();
 80016b0:	f7ff f988 	bl	80009c4 <ButtonsInit>

  /* Infinite loop */
  while (1)
  {
	  if(ButtonUpRead()== 1) {LedWrite(LED_B,TOG); angleVertical +=5;}
 80016b4:	f7ff f9c8 	bl	8000a48 <ButtonUpRead>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d108      	bne.n	80016d0 <main+0x38>
 80016be:	2102      	movs	r1, #2
 80016c0:	2004      	movs	r0, #4
 80016c2:	f7ff fcbf 	bl	8001044 <LedWrite>
 80016c6:	4b1d      	ldr	r3, [pc, #116]	; (800173c <main+0xa4>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	3305      	adds	r3, #5
 80016cc:	4a1b      	ldr	r2, [pc, #108]	; (800173c <main+0xa4>)
 80016ce:	6013      	str	r3, [r2, #0]
	  if(ButtonDownRead() == 1) {LedWrite(LED_R,TOG); angleVertical -=5;}
 80016d0:	f7ff fa6c 	bl	8000bac <ButtonDownRead>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d108      	bne.n	80016ec <main+0x54>
 80016da:	2102      	movs	r1, #2
 80016dc:	2001      	movs	r0, #1
 80016de:	f7ff fcb1 	bl	8001044 <LedWrite>
 80016e2:	4b16      	ldr	r3, [pc, #88]	; (800173c <main+0xa4>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	3b05      	subs	r3, #5
 80016e8:	4a14      	ldr	r2, [pc, #80]	; (800173c <main+0xa4>)
 80016ea:	6013      	str	r3, [r2, #0]
	  if(ButtonLeftRead() == 1) {LedWrite(LED2,TOG); angleHorizontal +=5;}
 80016ec:	f7ff fb10 	bl	8000d10 <ButtonLeftRead>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d108      	bne.n	8001708 <main+0x70>
 80016f6:	2102      	movs	r1, #2
 80016f8:	2080      	movs	r0, #128	; 0x80
 80016fa:	f7ff fca3 	bl	8001044 <LedWrite>
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <main+0xa8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	3305      	adds	r3, #5
 8001704:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <main+0xa8>)
 8001706:	6013      	str	r3, [r2, #0]
	  if(ButtonRightRead() == 1) {LedWrite(LED3,TOG); angleHorizontal -=5;}
 8001708:	f7ff fbb4 	bl	8000e74 <ButtonRightRead>
 800170c:	4603      	mov	r3, r0
 800170e:	2b01      	cmp	r3, #1
 8001710:	d109      	bne.n	8001726 <main+0x8e>
 8001712:	2102      	movs	r1, #2
 8001714:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001718:	f7ff fc94 	bl	8001044 <LedWrite>
 800171c:	4b08      	ldr	r3, [pc, #32]	; (8001740 <main+0xa8>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	3b05      	subs	r3, #5
 8001722:	4a07      	ldr	r2, [pc, #28]	; (8001740 <main+0xa8>)
 8001724:	6013      	str	r3, [r2, #0]

	  ServoSetAngleHorizontal(angleHorizontal);
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <main+0xa8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff fe1c 	bl	8001368 <ServoSetAngleHorizontal>
	  ServoSetAngleVertical(angleVertical);
 8001730:	4b02      	ldr	r3, [pc, #8]	; (800173c <main+0xa4>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fe4f 	bl	80013d8 <ServoSetAngleVertical>
	  if(ButtonUpRead()== 1) {LedWrite(LED_B,TOG); angleVertical +=5;}
 800173a:	e7bb      	b.n	80016b4 <main+0x1c>
 800173c:	2000005c 	.word	0x2000005c
 8001740:	20000060 	.word	0x20000060

08001744 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001744:	f8df d034 	ldr.w	sp, [pc, #52]	; 800177c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001748:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800174a:	e003      	b.n	8001754 <LoopCopyDataInit>

0800174c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800174e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001750:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001752:	3104      	adds	r1, #4

08001754 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001754:	480b      	ldr	r0, [pc, #44]	; (8001784 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001756:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001758:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800175a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800175c:	d3f6      	bcc.n	800174c <CopyDataInit>
	ldr	r2, =_sbss
 800175e:	4a0b      	ldr	r2, [pc, #44]	; (800178c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001760:	e002      	b.n	8001768 <LoopFillZerobss>

08001762 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001762:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001764:	f842 3b04 	str.w	r3, [r2], #4

08001768 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <LoopForever+0x16>)
	cmp	r2, r3
 800176a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800176c:	d3f9      	bcc.n	8001762 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800176e:	f000 f813 	bl	8001798 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001772:	f000 f847 	bl	8001804 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001776:	f7ff ff8f 	bl	8001698 <main>

0800177a <LoopForever>:

LoopForever:
    b LoopForever
 800177a:	e7fe      	b.n	800177a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800177c:	20040000 	.word	0x20040000
	ldr	r3, =_sidata
 8001780:	0800186c 	.word	0x0800186c
	ldr	r0, =_sdata
 8001784:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001788:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800178c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001790:	200000a0 	.word	0x200000a0

08001794 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001794:	e7fe      	b.n	8001794 <ADC1_2_IRQHandler>
	...

08001798 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800179c:	4a17      	ldr	r2, [pc, #92]	; (80017fc <SystemInit+0x64>)
 800179e:	4b17      	ldr	r3, [pc, #92]	; (80017fc <SystemInit+0x64>)
 80017a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80017ac:	4a14      	ldr	r2, [pc, #80]	; (8001800 <SystemInit+0x68>)
 80017ae:	4b14      	ldr	r3, [pc, #80]	; (8001800 <SystemInit+0x68>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <SystemInit+0x68>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80017be:	4a10      	ldr	r2, [pc, #64]	; (8001800 <SystemInit+0x68>)
 80017c0:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <SystemInit+0x68>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80017c8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80017cc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80017ce:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <SystemInit+0x68>)
 80017d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017d4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017d6:	4a0a      	ldr	r2, [pc, #40]	; (8001800 <SystemInit+0x68>)
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <SystemInit+0x68>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017e0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80017e2:	4b07      	ldr	r3, [pc, #28]	; (8001800 <SystemInit+0x68>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017e8:	4b04      	ldr	r3, [pc, #16]	; (80017fc <SystemInit+0x64>)
 80017ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017ee:	609a      	str	r2, [r3, #8]
#endif
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000ed00 	.word	0xe000ed00
 8001800:	40021000 	.word	0x40021000

08001804 <__libc_init_array>:
 8001804:	b570      	push	{r4, r5, r6, lr}
 8001806:	4e0d      	ldr	r6, [pc, #52]	; (800183c <__libc_init_array+0x38>)
 8001808:	4c0d      	ldr	r4, [pc, #52]	; (8001840 <__libc_init_array+0x3c>)
 800180a:	1ba4      	subs	r4, r4, r6
 800180c:	10a4      	asrs	r4, r4, #2
 800180e:	2500      	movs	r5, #0
 8001810:	42a5      	cmp	r5, r4
 8001812:	d109      	bne.n	8001828 <__libc_init_array+0x24>
 8001814:	4e0b      	ldr	r6, [pc, #44]	; (8001844 <__libc_init_array+0x40>)
 8001816:	4c0c      	ldr	r4, [pc, #48]	; (8001848 <__libc_init_array+0x44>)
 8001818:	f000 f818 	bl	800184c <_init>
 800181c:	1ba4      	subs	r4, r4, r6
 800181e:	10a4      	asrs	r4, r4, #2
 8001820:	2500      	movs	r5, #0
 8001822:	42a5      	cmp	r5, r4
 8001824:	d105      	bne.n	8001832 <__libc_init_array+0x2e>
 8001826:	bd70      	pop	{r4, r5, r6, pc}
 8001828:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800182c:	4798      	blx	r3
 800182e:	3501      	adds	r5, #1
 8001830:	e7ee      	b.n	8001810 <__libc_init_array+0xc>
 8001832:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001836:	4798      	blx	r3
 8001838:	3501      	adds	r5, #1
 800183a:	e7f2      	b.n	8001822 <__libc_init_array+0x1e>
 800183c:	08001864 	.word	0x08001864
 8001840:	08001864 	.word	0x08001864
 8001844:	08001864 	.word	0x08001864
 8001848:	08001868 	.word	0x08001868

0800184c <_init>:
 800184c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800184e:	bf00      	nop
 8001850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001852:	bc08      	pop	{r3}
 8001854:	469e      	mov	lr, r3
 8001856:	4770      	bx	lr

08001858 <_fini>:
 8001858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800185a:	bf00      	nop
 800185c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800185e:	bc08      	pop	{r3}
 8001860:	469e      	mov	lr, r3
 8001862:	4770      	bx	lr
