
ProjektMgrServo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003518  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  080036c8  080036c8  000136c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003ab8  08003ab8  00013ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003abc  08003abc  00013abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000084  20000000  08003ac0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ram2         00000000  10000000  10000000  00020084  2**0
                  CONTENTS
  7 .bss          000000b4  20000084  20000084  00020084  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000138  20000138  00020084  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   00003b26  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000c0e  00000000  00000000  00023bda  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000001f8  00000000  00000000  000247e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000160  00000000  00000000  000249e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000015bb  00000000  00000000  00024b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001407  00000000  00000000  000260fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00027502  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000acc  00000000  00000000  00027580  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002804c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080036b0 	.word	0x080036b0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	080036b0 	.word	0x080036b0

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f092 0f00 	teq	r2, #0
 80004da:	bf14      	ite	ne
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e720      	b.n	8000334 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aedc 	beq.w	80002e2 <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6c1      	b.n	80002e2 <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpun>:
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x10>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d10a      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x20>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d102      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0001 	mov.w	r0, #1
 8000abe:	4770      	bx	lr

08000ac0 <__aeabi_d2uiz>:
 8000ac0:	004a      	lsls	r2, r1, #1
 8000ac2:	d211      	bcs.n	8000ae8 <__aeabi_d2uiz+0x28>
 8000ac4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac8:	d211      	bcs.n	8000aee <__aeabi_d2uiz+0x2e>
 8000aca:	d50d      	bpl.n	8000ae8 <__aeabi_d2uiz+0x28>
 8000acc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad4:	d40e      	bmi.n	8000af4 <__aeabi_d2uiz+0x34>
 8000ad6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ada:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ade:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_d2uiz+0x3a>
 8000af4:	f04f 30ff 	mov.w	r0, #4294967295
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0000 	mov.w	r0, #0
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000baa:	4909      	ldr	r1, [pc, #36]	; (8000bd0 <NVIC_EnableIRQ+0x30>)
 8000bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb0:	095b      	lsrs	r3, r3, #5
 8000bb2:	79fa      	ldrb	r2, [r7, #7]
 8000bb4:	f002 021f 	and.w	r2, r2, #31
 8000bb8:	2001      	movs	r0, #1
 8000bba:	fa00 f202 	lsl.w	r2, r0, r2
 8000bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000e100 	.word	0xe000e100

08000bd4 <ButtonsInit>:
int startPressedTimeRight=0, pressedTimeRight = 0, stopPressedTimeRight=0;

int debouncingTime = 20;

void ButtonsInit()
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOEEN; // enable clock for GPIO E
 8000bd8:	4a35      	ldr	r2, [pc, #212]	; (8000cb0 <ButtonsInit+0xdc>)
 8000bda:	4b35      	ldr	r3, [pc, #212]	; (8000cb0 <ButtonsInit+0xdc>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f043 0310 	orr.w	r3, r3, #16
 8000be2:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; // enable clock for SYSCFG + COMP + VREFBUF
 8000be4:	4a32      	ldr	r2, [pc, #200]	; (8000cb0 <ButtonsInit+0xdc>)
 8000be6:	4b32      	ldr	r3, [pc, #200]	; (8000cb0 <ButtonsInit+0xdc>)
 8000be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bea:	f043 0301 	orr.w	r3, r3, #1
 8000bee:	6613      	str	r3, [r2, #96]	; 0x60

	GPIOE->MODER &= ~(GPIO_MODER_MODE14_0 | GPIO_MODER_MODE14_1); //  configure PE14 [00] -> input mode, button UP
 8000bf0:	4a30      	ldr	r2, [pc, #192]	; (8000cb4 <ButtonsInit+0xe0>)
 8000bf2:	4b30      	ldr	r3, [pc, #192]	; (8000cb4 <ButtonsInit+0xe0>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000bfa:	6013      	str	r3, [r2, #0]
	GPIOE->MODER &= ~(GPIO_MODER_MODE15_0 | GPIO_MODER_MODE15_1); //  configure PE15 [00] -> input mode, button DOWN
 8000bfc:	4a2d      	ldr	r2, [pc, #180]	; (8000cb4 <ButtonsInit+0xe0>)
 8000bfe:	4b2d      	ldr	r3, [pc, #180]	; (8000cb4 <ButtonsInit+0xe0>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000c06:	6013      	str	r3, [r2, #0]
	GPIOE->MODER &= ~(GPIO_MODER_MODE10_0 | GPIO_MODER_MODE10_1); //  configure PE10 [00] -> input mode, button LEFT
 8000c08:	4a2a      	ldr	r2, [pc, #168]	; (8000cb4 <ButtonsInit+0xe0>)
 8000c0a:	4b2a      	ldr	r3, [pc, #168]	; (8000cb4 <ButtonsInit+0xe0>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000c12:	6013      	str	r3, [r2, #0]
	GPIOE->MODER &= ~(GPIO_MODER_MODE12_0 | GPIO_MODER_MODE12_1); //  configure PE12 [00] -> input mode, button RIGHT
 8000c14:	4a27      	ldr	r2, [pc, #156]	; (8000cb4 <ButtonsInit+0xe0>)
 8000c16:	4b27      	ldr	r3, [pc, #156]	; (8000cb4 <ButtonsInit+0xe0>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000c1e:	6013      	str	r3, [r2, #0]
	GPIOE->MODER &= ~(GPIO_MODER_MODE7_0 | GPIO_MODER_MODE7_1); //    configure PE7 [00] -> input mode, button MODE
 8000c20:	4a24      	ldr	r2, [pc, #144]	; (8000cb4 <ButtonsInit+0xe0>)
 8000c22:	4b24      	ldr	r3, [pc, #144]	; (8000cb4 <ButtonsInit+0xe0>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c2a:	6013      	str	r3, [r2, #0]

	GPIOE->PUPDR |= GPIO_PUPDR_PUPD14_0; // configure PE14 [01] -> internal pull-up
 8000c2c:	4a21      	ldr	r2, [pc, #132]	; (8000cb4 <ButtonsInit+0xe0>)
 8000c2e:	4b21      	ldr	r3, [pc, #132]	; (8000cb4 <ButtonsInit+0xe0>)
 8000c30:	68db      	ldr	r3, [r3, #12]
 8000c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c36:	60d3      	str	r3, [r2, #12]
	GPIOE->PUPDR |= GPIO_PUPDR_PUPD15_0; // configure PE15 [01] -> internal pull-up
 8000c38:	4a1e      	ldr	r2, [pc, #120]	; (8000cb4 <ButtonsInit+0xe0>)
 8000c3a:	4b1e      	ldr	r3, [pc, #120]	; (8000cb4 <ButtonsInit+0xe0>)
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000c42:	60d3      	str	r3, [r2, #12]
	GPIOE->PUPDR |= GPIO_PUPDR_PUPD10_0; // configure PE10 [01] -> internal pull-up
 8000c44:	4a1b      	ldr	r2, [pc, #108]	; (8000cb4 <ButtonsInit+0xe0>)
 8000c46:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <ButtonsInit+0xe0>)
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c4e:	60d3      	str	r3, [r2, #12]
	GPIOE->PUPDR |= GPIO_PUPDR_PUPD12_0; // configure PE12 [01] -> internal pull-up
 8000c50:	4a18      	ldr	r2, [pc, #96]	; (8000cb4 <ButtonsInit+0xe0>)
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <ButtonsInit+0xe0>)
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c5a:	60d3      	str	r3, [r2, #12]
	GPIOE->PUPDR |= GPIO_PUPDR_PUPD7_0; // configure PE7 [01] -> internal pull-up
 8000c5c:	4a15      	ldr	r2, [pc, #84]	; (8000cb4 <ButtonsInit+0xe0>)
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <ButtonsInit+0xe0>)
 8000c60:	68db      	ldr	r3, [r3, #12]
 8000c62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c66:	60d3      	str	r3, [r2, #12]

	SYSCFG->EXTICR[1] |= SYSCFG_EXTICR2_EXTI7_PE; // select PE line for EXTI
 8000c68:	4a13      	ldr	r2, [pc, #76]	; (8000cb8 <ButtonsInit+0xe4>)
 8000c6a:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <ButtonsInit+0xe4>)
 8000c6c:	68db      	ldr	r3, [r3, #12]
 8000c6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c72:	60d3      	str	r3, [r2, #12]

	EXTI->FTSR1 |= EXTI_FTSR1_FT7; // falling trigger enable
 8000c74:	4a11      	ldr	r2, [pc, #68]	; (8000cbc <ButtonsInit+0xe8>)
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <ButtonsInit+0xe8>)
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c7e:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR1 |= EXTI_RTSR1_RT7; // rising trigger enable
 8000c80:	4a0e      	ldr	r2, [pc, #56]	; (8000cbc <ButtonsInit+0xe8>)
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <ButtonsInit+0xe8>)
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c8a:	6093      	str	r3, [r2, #8]

	EXTI->IMR1 |= EXTI_IMR1_IM7; // unmask interrupt line
 8000c8c:	4a0b      	ldr	r2, [pc, #44]	; (8000cbc <ButtonsInit+0xe8>)
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <ButtonsInit+0xe8>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c96:	6013      	str	r3, [r2, #0]
	EXTI->EMR1 |= EXTI_EMR1_EM7; // event
 8000c98:	4a08      	ldr	r2, [pc, #32]	; (8000cbc <ButtonsInit+0xe8>)
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <ButtonsInit+0xe8>)
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca2:	6053      	str	r3, [r2, #4]

	NVIC_EnableIRQ(EXTI9_5_IRQn); // enable NVIC interface
 8000ca4:	2017      	movs	r0, #23
 8000ca6:	f7ff ff7b 	bl	8000ba0 <NVIC_EnableIRQ>

}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	48001000 	.word	0x48001000
 8000cb8:	40010000 	.word	0x40010000
 8000cbc:	40010400 	.word	0x40010400

08000cc0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler()
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
	//if(EXTI->PR1 & EXTI_PR1_PIF7)
	//{
		if(GPIOE->IDR & GPIO_IDR_ID7) autoMode = 0;
 8000cc4:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <EXTI9_5_IRQHandler+0x34>)
 8000cc6:	691b      	ldr	r3, [r3, #16]
 8000cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d003      	beq.n	8000cd8 <EXTI9_5_IRQHandler+0x18>
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <EXTI9_5_IRQHandler+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
 8000cd6:	e002      	b.n	8000cde <EXTI9_5_IRQHandler+0x1e>
		else autoMode = 1;
 8000cd8:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <EXTI9_5_IRQHandler+0x38>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	701a      	strb	r2, [r3, #0]

		EXTI->PR1 |= EXTI_PR1_PIF7;
 8000cde:	4a07      	ldr	r2, [pc, #28]	; (8000cfc <EXTI9_5_IRQHandler+0x3c>)
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <EXTI9_5_IRQHandler+0x3c>)
 8000ce2:	695b      	ldr	r3, [r3, #20]
 8000ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ce8:	6153      	str	r3, [r2, #20]
	//}

}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	48001000 	.word	0x48001000
 8000cf8:	200000f0 	.word	0x200000f0
 8000cfc:	40010400 	.word	0x40010400

08000d00 <ButtonUpRead>:

/* Button UP */
char ButtonUpRead()
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
	int currentTime = millis();
 8000d06:	f001 f8d1 	bl	8001eac <millis>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	607b      	str	r3, [r7, #4]

	switch(stateButtonUp)
 8000d0e:	4b4f      	ldr	r3, [pc, #316]	; (8000e4c <ButtonUpRead+0x14c>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	2b03      	cmp	r3, #3
 8000d16:	f200 8094 	bhi.w	8000e42 <ButtonUpRead+0x142>
 8000d1a:	a201      	add	r2, pc, #4	; (adr r2, 8000d20 <ButtonUpRead+0x20>)
 8000d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d20:	08000d31 	.word	0x08000d31
 8000d24:	08000d57 	.word	0x08000d57
 8000d28:	08000d9f 	.word	0x08000d9f
 8000d2c:	08000dcb 	.word	0x08000dcb
	{
	case 1:
		if(buttonUpPressed)
 8000d30:	4b47      	ldr	r3, [pc, #284]	; (8000e50 <ButtonUpRead+0x150>)
 8000d32:	691b      	ldr	r3, [r3, #16]
 8000d34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d17b      	bne.n	8000e34 <ButtonUpRead+0x134>
		{	stateButtonUp = 2;
 8000d3c:	4b43      	ldr	r3, [pc, #268]	; (8000e4c <ButtonUpRead+0x14c>)
 8000d3e:	2202      	movs	r2, #2
 8000d40:	701a      	strb	r2, [r3, #0]
			startPressedTimeUp = millis();
 8000d42:	f001 f8b3 	bl	8001eac <millis>
 8000d46:	4603      	mov	r3, r0
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4b42      	ldr	r3, [pc, #264]	; (8000e54 <ButtonUpRead+0x154>)
 8000d4c:	601a      	str	r2, [r3, #0]
			pressedTimeUp = 0;
 8000d4e:	4b42      	ldr	r3, [pc, #264]	; (8000e58 <ButtonUpRead+0x158>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
		}
	break;
 8000d54:	e06e      	b.n	8000e34 <ButtonUpRead+0x134>

	case 2:
		if((currentTime - startPressedTimeUp>debouncingTime) && buttonUpPressed) stateButtonUp = 3;
 8000d56:	4b3f      	ldr	r3, [pc, #252]	; (8000e54 <ButtonUpRead+0x154>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	1ad2      	subs	r2, r2, r3
 8000d5e:	4b3f      	ldr	r3, [pc, #252]	; (8000e5c <ButtonUpRead+0x15c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	429a      	cmp	r2, r3
 8000d64:	dd09      	ble.n	8000d7a <ButtonUpRead+0x7a>
 8000d66:	4b3a      	ldr	r3, [pc, #232]	; (8000e50 <ButtonUpRead+0x150>)
 8000d68:	691b      	ldr	r3, [r3, #16]
 8000d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d103      	bne.n	8000d7a <ButtonUpRead+0x7a>
 8000d72:	4b36      	ldr	r3, [pc, #216]	; (8000e4c <ButtonUpRead+0x14c>)
 8000d74:	2203      	movs	r2, #3
 8000d76:	701a      	strb	r2, [r3, #0]
		else if((currentTime - startPressedTimeUp>debouncingTime) && !buttonUpPressed) stateButtonUp = 1;
	break;
 8000d78:	e05e      	b.n	8000e38 <ButtonUpRead+0x138>
		else if((currentTime - startPressedTimeUp>debouncingTime) && !buttonUpPressed) stateButtonUp = 1;
 8000d7a:	4b36      	ldr	r3, [pc, #216]	; (8000e54 <ButtonUpRead+0x154>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	1ad2      	subs	r2, r2, r3
 8000d82:	4b36      	ldr	r3, [pc, #216]	; (8000e5c <ButtonUpRead+0x15c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	dd56      	ble.n	8000e38 <ButtonUpRead+0x138>
 8000d8a:	4b31      	ldr	r3, [pc, #196]	; (8000e50 <ButtonUpRead+0x150>)
 8000d8c:	691b      	ldr	r3, [r3, #16]
 8000d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d050      	beq.n	8000e38 <ButtonUpRead+0x138>
 8000d96:	4b2d      	ldr	r3, [pc, #180]	; (8000e4c <ButtonUpRead+0x14c>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	701a      	strb	r2, [r3, #0]
	break;
 8000d9c:	e04c      	b.n	8000e38 <ButtonUpRead+0x138>

	case 3:
		pressedTimeUp = currentTime - startPressedTimeUp;	// debouncing, counting pressed time
 8000d9e:	4b2d      	ldr	r3, [pc, #180]	; (8000e54 <ButtonUpRead+0x154>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	4a2c      	ldr	r2, [pc, #176]	; (8000e58 <ButtonUpRead+0x158>)
 8000da8:	6013      	str	r3, [r2, #0]
		if(!buttonUpPressed) {stateButtonUp = 4; stopPressedTimeUp = millis();}
 8000daa:	4b29      	ldr	r3, [pc, #164]	; (8000e50 <ButtonUpRead+0x150>)
 8000dac:	691b      	ldr	r3, [r3, #16]
 8000dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d042      	beq.n	8000e3c <ButtonUpRead+0x13c>
 8000db6:	4b25      	ldr	r3, [pc, #148]	; (8000e4c <ButtonUpRead+0x14c>)
 8000db8:	2204      	movs	r2, #4
 8000dba:	701a      	strb	r2, [r3, #0]
 8000dbc:	f001 f876 	bl	8001eac <millis>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	4b26      	ldr	r3, [pc, #152]	; (8000e60 <ButtonUpRead+0x160>)
 8000dc6:	601a      	str	r2, [r3, #0]
	break;
 8000dc8:	e038      	b.n	8000e3c <ButtonUpRead+0x13c>

	case 4:
		if((currentTime - stopPressedTimeUp>debouncingTime) && buttonUpPressed) stateButtonUp = 3;
 8000dca:	4b25      	ldr	r3, [pc, #148]	; (8000e60 <ButtonUpRead+0x160>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	1ad2      	subs	r2, r2, r3
 8000dd2:	4b22      	ldr	r3, [pc, #136]	; (8000e5c <ButtonUpRead+0x15c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	dd09      	ble.n	8000dee <ButtonUpRead+0xee>
 8000dda:	4b1d      	ldr	r3, [pc, #116]	; (8000e50 <ButtonUpRead+0x150>)
 8000ddc:	691b      	ldr	r3, [r3, #16]
 8000dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d103      	bne.n	8000dee <ButtonUpRead+0xee>
 8000de6:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <ButtonUpRead+0x14c>)
 8000de8:	2203      	movs	r2, #3
 8000dea:	701a      	strb	r2, [r3, #0]
		{
		stateButtonUp = 1;
		if((pressedTimeUp >= 50) && (pressedTimeUp <= 1000)) return 1;	// short press, one click
		else if(pressedTimeUp > 1000) return 2;
		}
	break;
 8000dec:	e028      	b.n	8000e40 <ButtonUpRead+0x140>
		else if((currentTime - stopPressedTimeUp>debouncingTime) && !buttonUpPressed)
 8000dee:	4b1c      	ldr	r3, [pc, #112]	; (8000e60 <ButtonUpRead+0x160>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	1ad2      	subs	r2, r2, r3
 8000df6:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <ButtonUpRead+0x15c>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	dd20      	ble.n	8000e40 <ButtonUpRead+0x140>
 8000dfe:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <ButtonUpRead+0x150>)
 8000e00:	691b      	ldr	r3, [r3, #16]
 8000e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d01a      	beq.n	8000e40 <ButtonUpRead+0x140>
		stateButtonUp = 1;
 8000e0a:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <ButtonUpRead+0x14c>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	701a      	strb	r2, [r3, #0]
		if((pressedTimeUp >= 50) && (pressedTimeUp <= 1000)) return 1;	// short press, one click
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <ButtonUpRead+0x158>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b31      	cmp	r3, #49	; 0x31
 8000e16:	dd06      	ble.n	8000e26 <ButtonUpRead+0x126>
 8000e18:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <ButtonUpRead+0x158>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e20:	dc01      	bgt.n	8000e26 <ButtonUpRead+0x126>
 8000e22:	2301      	movs	r3, #1
 8000e24:	e00d      	b.n	8000e42 <ButtonUpRead+0x142>
		else if(pressedTimeUp > 1000) return 2;
 8000e26:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <ButtonUpRead+0x158>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e2e:	dd07      	ble.n	8000e40 <ButtonUpRead+0x140>
 8000e30:	2302      	movs	r3, #2
 8000e32:	e006      	b.n	8000e42 <ButtonUpRead+0x142>
	break;
 8000e34:	bf00      	nop
 8000e36:	e004      	b.n	8000e42 <ButtonUpRead+0x142>
	break;
 8000e38:	bf00      	nop
 8000e3a:	e002      	b.n	8000e42 <ButtonUpRead+0x142>
	break;
 8000e3c:	bf00      	nop
 8000e3e:	e000      	b.n	8000e42 <ButtonUpRead+0x142>
	break;
 8000e40:	bf00      	nop
	}
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000000 	.word	0x20000000
 8000e50:	48001000 	.word	0x48001000
 8000e54:	200000a0 	.word	0x200000a0
 8000e58:	200000a4 	.word	0x200000a4
 8000e5c:	20000004 	.word	0x20000004
 8000e60:	200000a8 	.word	0x200000a8

08000e64 <ButtonDownRead>:

/* Button DOWN */
char ButtonDownRead()
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
	int currentTime = millis();
 8000e6a:	f001 f81f 	bl	8001eac <millis>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	607b      	str	r3, [r7, #4]

	switch(stateButtonDown)
 8000e72:	4b4f      	ldr	r3, [pc, #316]	; (8000fb0 <ButtonDownRead+0x14c>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	2b03      	cmp	r3, #3
 8000e7a:	f200 8094 	bhi.w	8000fa6 <ButtonDownRead+0x142>
 8000e7e:	a201      	add	r2, pc, #4	; (adr r2, 8000e84 <ButtonDownRead+0x20>)
 8000e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e84:	08000e95 	.word	0x08000e95
 8000e88:	08000ebb 	.word	0x08000ebb
 8000e8c:	08000f03 	.word	0x08000f03
 8000e90:	08000f2f 	.word	0x08000f2f
	{
	case 1:
		if(buttonDownPressed)
 8000e94:	4b47      	ldr	r3, [pc, #284]	; (8000fb4 <ButtonDownRead+0x150>)
 8000e96:	691b      	ldr	r3, [r3, #16]
 8000e98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d17b      	bne.n	8000f98 <ButtonDownRead+0x134>
		{	stateButtonDown = 2;
 8000ea0:	4b43      	ldr	r3, [pc, #268]	; (8000fb0 <ButtonDownRead+0x14c>)
 8000ea2:	2202      	movs	r2, #2
 8000ea4:	701a      	strb	r2, [r3, #0]
			startPressedTimeDown = millis();
 8000ea6:	f001 f801 	bl	8001eac <millis>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b42      	ldr	r3, [pc, #264]	; (8000fb8 <ButtonDownRead+0x154>)
 8000eb0:	601a      	str	r2, [r3, #0]
			pressedTimeDown = 0;
 8000eb2:	4b42      	ldr	r3, [pc, #264]	; (8000fbc <ButtonDownRead+0x158>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
		}
	break;
 8000eb8:	e06e      	b.n	8000f98 <ButtonDownRead+0x134>

	case 2:
		if((currentTime - startPressedTimeDown>debouncingTime) && buttonDownPressed) stateButtonDown = 3;
 8000eba:	4b3f      	ldr	r3, [pc, #252]	; (8000fb8 <ButtonDownRead+0x154>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	1ad2      	subs	r2, r2, r3
 8000ec2:	4b3f      	ldr	r3, [pc, #252]	; (8000fc0 <ButtonDownRead+0x15c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	dd09      	ble.n	8000ede <ButtonDownRead+0x7a>
 8000eca:	4b3a      	ldr	r3, [pc, #232]	; (8000fb4 <ButtonDownRead+0x150>)
 8000ecc:	691b      	ldr	r3, [r3, #16]
 8000ece:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d103      	bne.n	8000ede <ButtonDownRead+0x7a>
 8000ed6:	4b36      	ldr	r3, [pc, #216]	; (8000fb0 <ButtonDownRead+0x14c>)
 8000ed8:	2203      	movs	r2, #3
 8000eda:	701a      	strb	r2, [r3, #0]
		else if((currentTime - startPressedTimeDown>debouncingTime) && !buttonDownPressed) stateButtonDown = 1;
	break;
 8000edc:	e05e      	b.n	8000f9c <ButtonDownRead+0x138>
		else if((currentTime - startPressedTimeDown>debouncingTime) && !buttonDownPressed) stateButtonDown = 1;
 8000ede:	4b36      	ldr	r3, [pc, #216]	; (8000fb8 <ButtonDownRead+0x154>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	1ad2      	subs	r2, r2, r3
 8000ee6:	4b36      	ldr	r3, [pc, #216]	; (8000fc0 <ButtonDownRead+0x15c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	dd56      	ble.n	8000f9c <ButtonDownRead+0x138>
 8000eee:	4b31      	ldr	r3, [pc, #196]	; (8000fb4 <ButtonDownRead+0x150>)
 8000ef0:	691b      	ldr	r3, [r3, #16]
 8000ef2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d050      	beq.n	8000f9c <ButtonDownRead+0x138>
 8000efa:	4b2d      	ldr	r3, [pc, #180]	; (8000fb0 <ButtonDownRead+0x14c>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	701a      	strb	r2, [r3, #0]
	break;
 8000f00:	e04c      	b.n	8000f9c <ButtonDownRead+0x138>

	case 3:
		pressedTimeDown = currentTime - startPressedTimeDown;	// debouncing, counting pressed time
 8000f02:	4b2d      	ldr	r3, [pc, #180]	; (8000fb8 <ButtonDownRead+0x154>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	4a2c      	ldr	r2, [pc, #176]	; (8000fbc <ButtonDownRead+0x158>)
 8000f0c:	6013      	str	r3, [r2, #0]
		if(!buttonDownPressed) {stateButtonDown = 4; stopPressedTimeDown = millis();}
 8000f0e:	4b29      	ldr	r3, [pc, #164]	; (8000fb4 <ButtonDownRead+0x150>)
 8000f10:	691b      	ldr	r3, [r3, #16]
 8000f12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d042      	beq.n	8000fa0 <ButtonDownRead+0x13c>
 8000f1a:	4b25      	ldr	r3, [pc, #148]	; (8000fb0 <ButtonDownRead+0x14c>)
 8000f1c:	2204      	movs	r2, #4
 8000f1e:	701a      	strb	r2, [r3, #0]
 8000f20:	f000 ffc4 	bl	8001eac <millis>
 8000f24:	4603      	mov	r3, r0
 8000f26:	461a      	mov	r2, r3
 8000f28:	4b26      	ldr	r3, [pc, #152]	; (8000fc4 <ButtonDownRead+0x160>)
 8000f2a:	601a      	str	r2, [r3, #0]
	break;
 8000f2c:	e038      	b.n	8000fa0 <ButtonDownRead+0x13c>

	case 4:
		if((currentTime - stopPressedTimeDown>debouncingTime) && buttonDownPressed) stateButtonDown = 3;
 8000f2e:	4b25      	ldr	r3, [pc, #148]	; (8000fc4 <ButtonDownRead+0x160>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	1ad2      	subs	r2, r2, r3
 8000f36:	4b22      	ldr	r3, [pc, #136]	; (8000fc0 <ButtonDownRead+0x15c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	dd09      	ble.n	8000f52 <ButtonDownRead+0xee>
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <ButtonDownRead+0x150>)
 8000f40:	691b      	ldr	r3, [r3, #16]
 8000f42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d103      	bne.n	8000f52 <ButtonDownRead+0xee>
 8000f4a:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <ButtonDownRead+0x14c>)
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	701a      	strb	r2, [r3, #0]
		{
		stateButtonDown = 1;
		if((pressedTimeDown >= 50) && (pressedTimeDown <= 1000)) return 1;	// short press, one click
		else if(pressedTimeDown > 1000) return 2;
		}
	break;
 8000f50:	e028      	b.n	8000fa4 <ButtonDownRead+0x140>
		else if((currentTime - stopPressedTimeDown>debouncingTime) && !buttonDownPressed)
 8000f52:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <ButtonDownRead+0x160>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	1ad2      	subs	r2, r2, r3
 8000f5a:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <ButtonDownRead+0x15c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	dd20      	ble.n	8000fa4 <ButtonDownRead+0x140>
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <ButtonDownRead+0x150>)
 8000f64:	691b      	ldr	r3, [r3, #16]
 8000f66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d01a      	beq.n	8000fa4 <ButtonDownRead+0x140>
		stateButtonDown = 1;
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <ButtonDownRead+0x14c>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	701a      	strb	r2, [r3, #0]
		if((pressedTimeDown >= 50) && (pressedTimeDown <= 1000)) return 1;	// short press, one click
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <ButtonDownRead+0x158>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b31      	cmp	r3, #49	; 0x31
 8000f7a:	dd06      	ble.n	8000f8a <ButtonDownRead+0x126>
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <ButtonDownRead+0x158>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f84:	dc01      	bgt.n	8000f8a <ButtonDownRead+0x126>
 8000f86:	2301      	movs	r3, #1
 8000f88:	e00d      	b.n	8000fa6 <ButtonDownRead+0x142>
		else if(pressedTimeDown > 1000) return 2;
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <ButtonDownRead+0x158>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f92:	dd07      	ble.n	8000fa4 <ButtonDownRead+0x140>
 8000f94:	2302      	movs	r3, #2
 8000f96:	e006      	b.n	8000fa6 <ButtonDownRead+0x142>
	break;
 8000f98:	bf00      	nop
 8000f9a:	e004      	b.n	8000fa6 <ButtonDownRead+0x142>
	break;
 8000f9c:	bf00      	nop
 8000f9e:	e002      	b.n	8000fa6 <ButtonDownRead+0x142>
	break;
 8000fa0:	bf00      	nop
 8000fa2:	e000      	b.n	8000fa6 <ButtonDownRead+0x142>
	break;
 8000fa4:	bf00      	nop
	}
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000001 	.word	0x20000001
 8000fb4:	48001000 	.word	0x48001000
 8000fb8:	200000ac 	.word	0x200000ac
 8000fbc:	200000b0 	.word	0x200000b0
 8000fc0:	20000004 	.word	0x20000004
 8000fc4:	200000b4 	.word	0x200000b4

08000fc8 <ButtonLeftRead>:

/* Button LEFT */
char ButtonLeftRead()
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
	int currentTime = millis();
 8000fce:	f000 ff6d 	bl	8001eac <millis>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	607b      	str	r3, [r7, #4]

	switch(stateButtonLeft)
 8000fd6:	4b4f      	ldr	r3, [pc, #316]	; (8001114 <ButtonLeftRead+0x14c>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	2b03      	cmp	r3, #3
 8000fde:	f200 8094 	bhi.w	800110a <ButtonLeftRead+0x142>
 8000fe2:	a201      	add	r2, pc, #4	; (adr r2, 8000fe8 <ButtonLeftRead+0x20>)
 8000fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe8:	08000ff9 	.word	0x08000ff9
 8000fec:	0800101f 	.word	0x0800101f
 8000ff0:	08001067 	.word	0x08001067
 8000ff4:	08001093 	.word	0x08001093
	{
	case 1:
		if(buttonLeftPressed)
 8000ff8:	4b47      	ldr	r3, [pc, #284]	; (8001118 <ButtonLeftRead+0x150>)
 8000ffa:	691b      	ldr	r3, [r3, #16]
 8000ffc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d17b      	bne.n	80010fc <ButtonLeftRead+0x134>
		{	stateButtonLeft = 2;
 8001004:	4b43      	ldr	r3, [pc, #268]	; (8001114 <ButtonLeftRead+0x14c>)
 8001006:	2202      	movs	r2, #2
 8001008:	701a      	strb	r2, [r3, #0]
			startPressedTimeLeft = millis();
 800100a:	f000 ff4f 	bl	8001eac <millis>
 800100e:	4603      	mov	r3, r0
 8001010:	461a      	mov	r2, r3
 8001012:	4b42      	ldr	r3, [pc, #264]	; (800111c <ButtonLeftRead+0x154>)
 8001014:	601a      	str	r2, [r3, #0]
			pressedTimeLeft = 0;
 8001016:	4b42      	ldr	r3, [pc, #264]	; (8001120 <ButtonLeftRead+0x158>)
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
		}
	break;
 800101c:	e06e      	b.n	80010fc <ButtonLeftRead+0x134>

	case 2:
		if((currentTime - startPressedTimeLeft>debouncingTime) && buttonLeftPressed) stateButtonLeft = 3;
 800101e:	4b3f      	ldr	r3, [pc, #252]	; (800111c <ButtonLeftRead+0x154>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	1ad2      	subs	r2, r2, r3
 8001026:	4b3f      	ldr	r3, [pc, #252]	; (8001124 <ButtonLeftRead+0x15c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	429a      	cmp	r2, r3
 800102c:	dd09      	ble.n	8001042 <ButtonLeftRead+0x7a>
 800102e:	4b3a      	ldr	r3, [pc, #232]	; (8001118 <ButtonLeftRead+0x150>)
 8001030:	691b      	ldr	r3, [r3, #16]
 8001032:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d103      	bne.n	8001042 <ButtonLeftRead+0x7a>
 800103a:	4b36      	ldr	r3, [pc, #216]	; (8001114 <ButtonLeftRead+0x14c>)
 800103c:	2203      	movs	r2, #3
 800103e:	701a      	strb	r2, [r3, #0]
		else if((currentTime - startPressedTimeLeft>debouncingTime) && !buttonLeftPressed) stateButtonLeft = 1;
	break;
 8001040:	e05e      	b.n	8001100 <ButtonLeftRead+0x138>
		else if((currentTime - startPressedTimeLeft>debouncingTime) && !buttonLeftPressed) stateButtonLeft = 1;
 8001042:	4b36      	ldr	r3, [pc, #216]	; (800111c <ButtonLeftRead+0x154>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	1ad2      	subs	r2, r2, r3
 800104a:	4b36      	ldr	r3, [pc, #216]	; (8001124 <ButtonLeftRead+0x15c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	429a      	cmp	r2, r3
 8001050:	dd56      	ble.n	8001100 <ButtonLeftRead+0x138>
 8001052:	4b31      	ldr	r3, [pc, #196]	; (8001118 <ButtonLeftRead+0x150>)
 8001054:	691b      	ldr	r3, [r3, #16]
 8001056:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d050      	beq.n	8001100 <ButtonLeftRead+0x138>
 800105e:	4b2d      	ldr	r3, [pc, #180]	; (8001114 <ButtonLeftRead+0x14c>)
 8001060:	2201      	movs	r2, #1
 8001062:	701a      	strb	r2, [r3, #0]
	break;
 8001064:	e04c      	b.n	8001100 <ButtonLeftRead+0x138>

	case 3:
		pressedTimeLeft = currentTime - startPressedTimeLeft;	// debouncing, counting pressed time
 8001066:	4b2d      	ldr	r3, [pc, #180]	; (800111c <ButtonLeftRead+0x154>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	4a2c      	ldr	r2, [pc, #176]	; (8001120 <ButtonLeftRead+0x158>)
 8001070:	6013      	str	r3, [r2, #0]
		if(!buttonLeftPressed) {stateButtonLeft = 4; stopPressedTimeLeft = millis();}
 8001072:	4b29      	ldr	r3, [pc, #164]	; (8001118 <ButtonLeftRead+0x150>)
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d042      	beq.n	8001104 <ButtonLeftRead+0x13c>
 800107e:	4b25      	ldr	r3, [pc, #148]	; (8001114 <ButtonLeftRead+0x14c>)
 8001080:	2204      	movs	r2, #4
 8001082:	701a      	strb	r2, [r3, #0]
 8001084:	f000 ff12 	bl	8001eac <millis>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	4b26      	ldr	r3, [pc, #152]	; (8001128 <ButtonLeftRead+0x160>)
 800108e:	601a      	str	r2, [r3, #0]
	break;
 8001090:	e038      	b.n	8001104 <ButtonLeftRead+0x13c>

	case 4:
		if((currentTime - stopPressedTimeLeft>debouncingTime) && buttonLeftPressed) stateButtonLeft = 3;
 8001092:	4b25      	ldr	r3, [pc, #148]	; (8001128 <ButtonLeftRead+0x160>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	1ad2      	subs	r2, r2, r3
 800109a:	4b22      	ldr	r3, [pc, #136]	; (8001124 <ButtonLeftRead+0x15c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	429a      	cmp	r2, r3
 80010a0:	dd09      	ble.n	80010b6 <ButtonLeftRead+0xee>
 80010a2:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <ButtonLeftRead+0x150>)
 80010a4:	691b      	ldr	r3, [r3, #16]
 80010a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d103      	bne.n	80010b6 <ButtonLeftRead+0xee>
 80010ae:	4b19      	ldr	r3, [pc, #100]	; (8001114 <ButtonLeftRead+0x14c>)
 80010b0:	2203      	movs	r2, #3
 80010b2:	701a      	strb	r2, [r3, #0]
		{
		stateButtonLeft = 1;
		if((pressedTimeLeft >= 50) && (pressedTimeLeft <= 1000)) return 1;	// short press, one click
		else if(pressedTimeLeft > 1000) return 2;
		}
	break;
 80010b4:	e028      	b.n	8001108 <ButtonLeftRead+0x140>
		else if((currentTime - stopPressedTimeLeft>debouncingTime) && !buttonLeftPressed)
 80010b6:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <ButtonLeftRead+0x160>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	1ad2      	subs	r2, r2, r3
 80010be:	4b19      	ldr	r3, [pc, #100]	; (8001124 <ButtonLeftRead+0x15c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	dd20      	ble.n	8001108 <ButtonLeftRead+0x140>
 80010c6:	4b14      	ldr	r3, [pc, #80]	; (8001118 <ButtonLeftRead+0x150>)
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d01a      	beq.n	8001108 <ButtonLeftRead+0x140>
		stateButtonLeft = 1;
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <ButtonLeftRead+0x14c>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	701a      	strb	r2, [r3, #0]
		if((pressedTimeLeft >= 50) && (pressedTimeLeft <= 1000)) return 1;	// short press, one click
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <ButtonLeftRead+0x158>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b31      	cmp	r3, #49	; 0x31
 80010de:	dd06      	ble.n	80010ee <ButtonLeftRead+0x126>
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <ButtonLeftRead+0x158>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010e8:	dc01      	bgt.n	80010ee <ButtonLeftRead+0x126>
 80010ea:	2301      	movs	r3, #1
 80010ec:	e00d      	b.n	800110a <ButtonLeftRead+0x142>
		else if(pressedTimeLeft > 1000) return 2;
 80010ee:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <ButtonLeftRead+0x158>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010f6:	dd07      	ble.n	8001108 <ButtonLeftRead+0x140>
 80010f8:	2302      	movs	r3, #2
 80010fa:	e006      	b.n	800110a <ButtonLeftRead+0x142>
	break;
 80010fc:	bf00      	nop
 80010fe:	e004      	b.n	800110a <ButtonLeftRead+0x142>
	break;
 8001100:	bf00      	nop
 8001102:	e002      	b.n	800110a <ButtonLeftRead+0x142>
	break;
 8001104:	bf00      	nop
 8001106:	e000      	b.n	800110a <ButtonLeftRead+0x142>
	break;
 8001108:	bf00      	nop
	}
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000002 	.word	0x20000002
 8001118:	48001000 	.word	0x48001000
 800111c:	200000b8 	.word	0x200000b8
 8001120:	200000bc 	.word	0x200000bc
 8001124:	20000004 	.word	0x20000004
 8001128:	200000c0 	.word	0x200000c0

0800112c <ButtonRightRead>:

/* Button RIGHT */
char ButtonRightRead()
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
	int currentTime = millis();
 8001132:	f000 febb 	bl	8001eac <millis>
 8001136:	4603      	mov	r3, r0
 8001138:	607b      	str	r3, [r7, #4]

	switch(stateButtonRight)
 800113a:	4b4f      	ldr	r3, [pc, #316]	; (8001278 <ButtonRightRead+0x14c>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	3b01      	subs	r3, #1
 8001140:	2b03      	cmp	r3, #3
 8001142:	f200 8094 	bhi.w	800126e <ButtonRightRead+0x142>
 8001146:	a201      	add	r2, pc, #4	; (adr r2, 800114c <ButtonRightRead+0x20>)
 8001148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800114c:	0800115d 	.word	0x0800115d
 8001150:	08001183 	.word	0x08001183
 8001154:	080011cb 	.word	0x080011cb
 8001158:	080011f7 	.word	0x080011f7
	{
	case 1:
		if(buttonRightPressed)
 800115c:	4b47      	ldr	r3, [pc, #284]	; (800127c <ButtonRightRead+0x150>)
 800115e:	691b      	ldr	r3, [r3, #16]
 8001160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001164:	2b00      	cmp	r3, #0
 8001166:	d17b      	bne.n	8001260 <ButtonRightRead+0x134>
		{	stateButtonRight = 2;
 8001168:	4b43      	ldr	r3, [pc, #268]	; (8001278 <ButtonRightRead+0x14c>)
 800116a:	2202      	movs	r2, #2
 800116c:	701a      	strb	r2, [r3, #0]
			startPressedTimeRight = millis();
 800116e:	f000 fe9d 	bl	8001eac <millis>
 8001172:	4603      	mov	r3, r0
 8001174:	461a      	mov	r2, r3
 8001176:	4b42      	ldr	r3, [pc, #264]	; (8001280 <ButtonRightRead+0x154>)
 8001178:	601a      	str	r2, [r3, #0]
			pressedTimeRight = 0;
 800117a:	4b42      	ldr	r3, [pc, #264]	; (8001284 <ButtonRightRead+0x158>)
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
		}
	break;
 8001180:	e06e      	b.n	8001260 <ButtonRightRead+0x134>

	case 2:
		if((currentTime - startPressedTimeRight>debouncingTime) && buttonRightPressed) stateButtonRight = 3;
 8001182:	4b3f      	ldr	r3, [pc, #252]	; (8001280 <ButtonRightRead+0x154>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	1ad2      	subs	r2, r2, r3
 800118a:	4b3f      	ldr	r3, [pc, #252]	; (8001288 <ButtonRightRead+0x15c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	429a      	cmp	r2, r3
 8001190:	dd09      	ble.n	80011a6 <ButtonRightRead+0x7a>
 8001192:	4b3a      	ldr	r3, [pc, #232]	; (800127c <ButtonRightRead+0x150>)
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800119a:	2b00      	cmp	r3, #0
 800119c:	d103      	bne.n	80011a6 <ButtonRightRead+0x7a>
 800119e:	4b36      	ldr	r3, [pc, #216]	; (8001278 <ButtonRightRead+0x14c>)
 80011a0:	2203      	movs	r2, #3
 80011a2:	701a      	strb	r2, [r3, #0]
		else if((currentTime - startPressedTimeRight>debouncingTime) && !buttonRightPressed) stateButtonRight = 1;
	break;
 80011a4:	e05e      	b.n	8001264 <ButtonRightRead+0x138>
		else if((currentTime - startPressedTimeRight>debouncingTime) && !buttonRightPressed) stateButtonRight = 1;
 80011a6:	4b36      	ldr	r3, [pc, #216]	; (8001280 <ButtonRightRead+0x154>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	1ad2      	subs	r2, r2, r3
 80011ae:	4b36      	ldr	r3, [pc, #216]	; (8001288 <ButtonRightRead+0x15c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	dd56      	ble.n	8001264 <ButtonRightRead+0x138>
 80011b6:	4b31      	ldr	r3, [pc, #196]	; (800127c <ButtonRightRead+0x150>)
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d050      	beq.n	8001264 <ButtonRightRead+0x138>
 80011c2:	4b2d      	ldr	r3, [pc, #180]	; (8001278 <ButtonRightRead+0x14c>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	701a      	strb	r2, [r3, #0]
	break;
 80011c8:	e04c      	b.n	8001264 <ButtonRightRead+0x138>

	case 3:
		pressedTimeRight = currentTime - startPressedTimeRight;	// debouncing, counting pressed time
 80011ca:	4b2d      	ldr	r3, [pc, #180]	; (8001280 <ButtonRightRead+0x154>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	4a2c      	ldr	r2, [pc, #176]	; (8001284 <ButtonRightRead+0x158>)
 80011d4:	6013      	str	r3, [r2, #0]
		if(!buttonRightPressed) {stateButtonRight = 4; stopPressedTimeRight = millis();}
 80011d6:	4b29      	ldr	r3, [pc, #164]	; (800127c <ButtonRightRead+0x150>)
 80011d8:	691b      	ldr	r3, [r3, #16]
 80011da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d042      	beq.n	8001268 <ButtonRightRead+0x13c>
 80011e2:	4b25      	ldr	r3, [pc, #148]	; (8001278 <ButtonRightRead+0x14c>)
 80011e4:	2204      	movs	r2, #4
 80011e6:	701a      	strb	r2, [r3, #0]
 80011e8:	f000 fe60 	bl	8001eac <millis>
 80011ec:	4603      	mov	r3, r0
 80011ee:	461a      	mov	r2, r3
 80011f0:	4b26      	ldr	r3, [pc, #152]	; (800128c <ButtonRightRead+0x160>)
 80011f2:	601a      	str	r2, [r3, #0]
	break;
 80011f4:	e038      	b.n	8001268 <ButtonRightRead+0x13c>

	case 4:
		if((currentTime - stopPressedTimeRight>debouncingTime) && buttonRightPressed) stateButtonRight = 3;
 80011f6:	4b25      	ldr	r3, [pc, #148]	; (800128c <ButtonRightRead+0x160>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	1ad2      	subs	r2, r2, r3
 80011fe:	4b22      	ldr	r3, [pc, #136]	; (8001288 <ButtonRightRead+0x15c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	429a      	cmp	r2, r3
 8001204:	dd09      	ble.n	800121a <ButtonRightRead+0xee>
 8001206:	4b1d      	ldr	r3, [pc, #116]	; (800127c <ButtonRightRead+0x150>)
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800120e:	2b00      	cmp	r3, #0
 8001210:	d103      	bne.n	800121a <ButtonRightRead+0xee>
 8001212:	4b19      	ldr	r3, [pc, #100]	; (8001278 <ButtonRightRead+0x14c>)
 8001214:	2203      	movs	r2, #3
 8001216:	701a      	strb	r2, [r3, #0]
		{
		stateButtonRight = 1;
		if((pressedTimeRight >= 50) && (pressedTimeRight <= 1000)) return 1;	// short press, one click
		else if(pressedTimeRight > 1000) return 2;
		}
	break;
 8001218:	e028      	b.n	800126c <ButtonRightRead+0x140>
		else if((currentTime - stopPressedTimeRight>debouncingTime) && !buttonRightPressed)
 800121a:	4b1c      	ldr	r3, [pc, #112]	; (800128c <ButtonRightRead+0x160>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	1ad2      	subs	r2, r2, r3
 8001222:	4b19      	ldr	r3, [pc, #100]	; (8001288 <ButtonRightRead+0x15c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	429a      	cmp	r2, r3
 8001228:	dd20      	ble.n	800126c <ButtonRightRead+0x140>
 800122a:	4b14      	ldr	r3, [pc, #80]	; (800127c <ButtonRightRead+0x150>)
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001232:	2b00      	cmp	r3, #0
 8001234:	d01a      	beq.n	800126c <ButtonRightRead+0x140>
		stateButtonRight = 1;
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <ButtonRightRead+0x14c>)
 8001238:	2201      	movs	r2, #1
 800123a:	701a      	strb	r2, [r3, #0]
		if((pressedTimeRight >= 50) && (pressedTimeRight <= 1000)) return 1;	// short press, one click
 800123c:	4b11      	ldr	r3, [pc, #68]	; (8001284 <ButtonRightRead+0x158>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b31      	cmp	r3, #49	; 0x31
 8001242:	dd06      	ble.n	8001252 <ButtonRightRead+0x126>
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <ButtonRightRead+0x158>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800124c:	dc01      	bgt.n	8001252 <ButtonRightRead+0x126>
 800124e:	2301      	movs	r3, #1
 8001250:	e00d      	b.n	800126e <ButtonRightRead+0x142>
		else if(pressedTimeRight > 1000) return 2;
 8001252:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <ButtonRightRead+0x158>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800125a:	dd07      	ble.n	800126c <ButtonRightRead+0x140>
 800125c:	2302      	movs	r3, #2
 800125e:	e006      	b.n	800126e <ButtonRightRead+0x142>
	break;
 8001260:	bf00      	nop
 8001262:	e004      	b.n	800126e <ButtonRightRead+0x142>
	break;
 8001264:	bf00      	nop
 8001266:	e002      	b.n	800126e <ButtonRightRead+0x142>
	break;
 8001268:	bf00      	nop
 800126a:	e000      	b.n	800126e <ButtonRightRead+0x142>
	break;
 800126c:	bf00      	nop
	}
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000003 	.word	0x20000003
 800127c:	48001000 	.word	0x48001000
 8001280:	200000c4 	.word	0x200000c4
 8001284:	200000c8 	.word	0x200000c8
 8001288:	20000004 	.word	0x20000004
 800128c:	200000cc 	.word	0x200000cc

08001290 <LedInit>:
#include "stm32l4xx.h"
#include "LED.h"


void LedInit()
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
	// 1. Enable clock on port B and A
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN | RCC_AHB2ENR_GPIOAEN;
 8001294:	4a17      	ldr	r2, [pc, #92]	; (80012f4 <LedInit+0x64>)
 8001296:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <LedInit+0x64>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	f043 0303 	orr.w	r3, r3, #3
 800129e:	64d3      	str	r3, [r2, #76]	; 0x4c

	// 2. Set outputs
	// Default GPIO->MODER = 0xFFFF,
	GPIOB->MODER &= ~GPIO_MODER_MODE7_1; 	// Set PB7 as output, bits(15:14)=(0:1)
 80012a0:	4a15      	ldr	r2, [pc, #84]	; (80012f8 <LedInit+0x68>)
 80012a2:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <LedInit+0x68>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80012aa:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~GPIO_MODER_MODE14_1; 	// Set PB14 as output, bits(29:28)=(0:1)
 80012ac:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <LedInit+0x68>)
 80012ae:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <LedInit+0x68>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80012b6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~GPIO_MODER_MODE0_1;	// Set PA0 as output, bits(1:0)=(0:1)
 80012b8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f023 0302 	bic.w	r3, r3, #2
 80012c6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~GPIO_MODER_MODE1_1;	// Set PA1 as output, bits(3:2)=(0:1)
 80012c8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f023 0308 	bic.w	r3, r3, #8
 80012d6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~GPIO_MODER_MODE2_1;	// Set PA2 as output, bits(5:4)=(0:1)
 80012d8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f023 0320 	bic.w	r3, r3, #32
 80012e6:	6013      	str	r3, [r2, #0]
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40021000 	.word	0x40021000
 80012f8:	48000400 	.word	0x48000400

080012fc <LedWrite>:

// Write LED state
void LedWrite(LedPin pin, LedState state)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	460a      	mov	r2, r1
 8001306:	80fb      	strh	r3, [r7, #6]
 8001308:	4613      	mov	r3, r2
 800130a:	717b      	strb	r3, [r7, #5]
	switch(pin)
 800130c:	88fb      	ldrh	r3, [r7, #6]
 800130e:	2b04      	cmp	r3, #4
 8001310:	f000 8092 	beq.w	8001438 <LedWrite+0x13c>
 8001314:	2b04      	cmp	r3, #4
 8001316:	dc04      	bgt.n	8001322 <LedWrite+0x26>
 8001318:	2b01      	cmp	r3, #1
 800131a:	d045      	beq.n	80013a8 <LedWrite+0xac>
 800131c:	2b02      	cmp	r3, #2
 800131e:	d067      	beq.n	80013f0 <LedWrite+0xf4>
		if(state == ON) GPIOA->BSRR |= LED_B;
		else if(state == OFF) GPIOA->BRR |= LED_B;
		else if(state == TOG) GPIOA->ODR ^= LED_B;
	break;
	}
}
 8001320:	e0b7      	b.n	8001492 <LedWrite+0x196>
	switch(pin)
 8001322:	2b80      	cmp	r3, #128	; 0x80
 8001324:	d003      	beq.n	800132e <LedWrite+0x32>
 8001326:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800132a:	d01f      	beq.n	800136c <LedWrite+0x70>
}
 800132c:	e0b1      	b.n	8001492 <LedWrite+0x196>
		if(state == ON) GPIOB->BSRR |= LED2;
 800132e:	797b      	ldrb	r3, [r7, #5]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d106      	bne.n	8001342 <LedWrite+0x46>
 8001334:	4a5a      	ldr	r2, [pc, #360]	; (80014a0 <LedWrite+0x1a4>)
 8001336:	4b5a      	ldr	r3, [pc, #360]	; (80014a0 <LedWrite+0x1a4>)
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800133e:	6193      	str	r3, [r2, #24]
	break;
 8001340:	e09e      	b.n	8001480 <LedWrite+0x184>
		else if(state == OFF) GPIOB->BRR |= LED2;
 8001342:	797b      	ldrb	r3, [r7, #5]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d106      	bne.n	8001356 <LedWrite+0x5a>
 8001348:	4a55      	ldr	r2, [pc, #340]	; (80014a0 <LedWrite+0x1a4>)
 800134a:	4b55      	ldr	r3, [pc, #340]	; (80014a0 <LedWrite+0x1a4>)
 800134c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001352:	6293      	str	r3, [r2, #40]	; 0x28
	break;
 8001354:	e094      	b.n	8001480 <LedWrite+0x184>
		else if(state == TOG) GPIOB->ODR ^= LED2;
 8001356:	797b      	ldrb	r3, [r7, #5]
 8001358:	2b02      	cmp	r3, #2
 800135a:	f040 8091 	bne.w	8001480 <LedWrite+0x184>
 800135e:	4a50      	ldr	r2, [pc, #320]	; (80014a0 <LedWrite+0x1a4>)
 8001360:	4b4f      	ldr	r3, [pc, #316]	; (80014a0 <LedWrite+0x1a4>)
 8001362:	695b      	ldr	r3, [r3, #20]
 8001364:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8001368:	6153      	str	r3, [r2, #20]
	break;
 800136a:	e089      	b.n	8001480 <LedWrite+0x184>
		if(state == ON) GPIOB->BSRR |= LED3;
 800136c:	797b      	ldrb	r3, [r7, #5]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d106      	bne.n	8001380 <LedWrite+0x84>
 8001372:	4a4b      	ldr	r2, [pc, #300]	; (80014a0 <LedWrite+0x1a4>)
 8001374:	4b4a      	ldr	r3, [pc, #296]	; (80014a0 <LedWrite+0x1a4>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800137c:	6193      	str	r3, [r2, #24]
	break;
 800137e:	e081      	b.n	8001484 <LedWrite+0x188>
		else if(state == OFF) GPIOB->BRR |= LED3;
 8001380:	797b      	ldrb	r3, [r7, #5]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d106      	bne.n	8001394 <LedWrite+0x98>
 8001386:	4a46      	ldr	r2, [pc, #280]	; (80014a0 <LedWrite+0x1a4>)
 8001388:	4b45      	ldr	r3, [pc, #276]	; (80014a0 <LedWrite+0x1a4>)
 800138a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001390:	6293      	str	r3, [r2, #40]	; 0x28
	break;
 8001392:	e077      	b.n	8001484 <LedWrite+0x188>
		else if(state == TOG) GPIOB->ODR ^= LED3;
 8001394:	797b      	ldrb	r3, [r7, #5]
 8001396:	2b02      	cmp	r3, #2
 8001398:	d174      	bne.n	8001484 <LedWrite+0x188>
 800139a:	4a41      	ldr	r2, [pc, #260]	; (80014a0 <LedWrite+0x1a4>)
 800139c:	4b40      	ldr	r3, [pc, #256]	; (80014a0 <LedWrite+0x1a4>)
 800139e:	695b      	ldr	r3, [r3, #20]
 80013a0:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 80013a4:	6153      	str	r3, [r2, #20]
	break;
 80013a6:	e06d      	b.n	8001484 <LedWrite+0x188>
		if(state == ON) GPIOA->BSRR |= LED_R;
 80013a8:	797b      	ldrb	r3, [r7, #5]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d108      	bne.n	80013c0 <LedWrite+0xc4>
 80013ae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80013b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6193      	str	r3, [r2, #24]
	break;
 80013be:	e063      	b.n	8001488 <LedWrite+0x18c>
		else if(state == OFF) GPIOA->BRR |= LED_R;
 80013c0:	797b      	ldrb	r3, [r7, #5]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d108      	bne.n	80013d8 <LedWrite+0xdc>
 80013c6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80013ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80013ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6293      	str	r3, [r2, #40]	; 0x28
	break;
 80013d6:	e057      	b.n	8001488 <LedWrite+0x18c>
		else if(state == TOG) GPIOA->ODR ^= LED_R;
 80013d8:	797b      	ldrb	r3, [r7, #5]
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d154      	bne.n	8001488 <LedWrite+0x18c>
 80013de:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80013e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80013e6:	695b      	ldr	r3, [r3, #20]
 80013e8:	f083 0301 	eor.w	r3, r3, #1
 80013ec:	6153      	str	r3, [r2, #20]
	break;
 80013ee:	e04b      	b.n	8001488 <LedWrite+0x18c>
		if(state == ON) GPIOA->BSRR |= LED_G;
 80013f0:	797b      	ldrb	r3, [r7, #5]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d108      	bne.n	8001408 <LedWrite+0x10c>
 80013f6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80013fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	f043 0302 	orr.w	r3, r3, #2
 8001404:	6193      	str	r3, [r2, #24]
	break;
 8001406:	e041      	b.n	800148c <LedWrite+0x190>
		else if(state == OFF) GPIOA->BRR |= LED_G;
 8001408:	797b      	ldrb	r3, [r7, #5]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d108      	bne.n	8001420 <LedWrite+0x124>
 800140e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001412:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	6293      	str	r3, [r2, #40]	; 0x28
	break;
 800141e:	e035      	b.n	800148c <LedWrite+0x190>
		else if(state == TOG) GPIOA->ODR ^= LED_G;
 8001420:	797b      	ldrb	r3, [r7, #5]
 8001422:	2b02      	cmp	r3, #2
 8001424:	d132      	bne.n	800148c <LedWrite+0x190>
 8001426:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800142a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800142e:	695b      	ldr	r3, [r3, #20]
 8001430:	f083 0302 	eor.w	r3, r3, #2
 8001434:	6153      	str	r3, [r2, #20]
	break;
 8001436:	e029      	b.n	800148c <LedWrite+0x190>
		if(state == ON) GPIOA->BSRR |= LED_B;
 8001438:	797b      	ldrb	r3, [r7, #5]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d108      	bne.n	8001450 <LedWrite+0x154>
 800143e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001442:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	f043 0304 	orr.w	r3, r3, #4
 800144c:	6193      	str	r3, [r2, #24]
	break;
 800144e:	e01f      	b.n	8001490 <LedWrite+0x194>
		else if(state == OFF) GPIOA->BRR |= LED_B;
 8001450:	797b      	ldrb	r3, [r7, #5]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d108      	bne.n	8001468 <LedWrite+0x16c>
 8001456:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800145a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800145e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001460:	f043 0304 	orr.w	r3, r3, #4
 8001464:	6293      	str	r3, [r2, #40]	; 0x28
	break;
 8001466:	e013      	b.n	8001490 <LedWrite+0x194>
		else if(state == TOG) GPIOA->ODR ^= LED_B;
 8001468:	797b      	ldrb	r3, [r7, #5]
 800146a:	2b02      	cmp	r3, #2
 800146c:	d110      	bne.n	8001490 <LedWrite+0x194>
 800146e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001472:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	f083 0304 	eor.w	r3, r3, #4
 800147c:	6153      	str	r3, [r2, #20]
	break;
 800147e:	e007      	b.n	8001490 <LedWrite+0x194>
	break;
 8001480:	bf00      	nop
 8001482:	e006      	b.n	8001492 <LedWrite+0x196>
	break;
 8001484:	bf00      	nop
 8001486:	e004      	b.n	8001492 <LedWrite+0x196>
	break;
 8001488:	bf00      	nop
 800148a:	e002      	b.n	8001492 <LedWrite+0x196>
	break;
 800148c:	bf00      	nop
 800148e:	e000      	b.n	8001492 <LedWrite+0x196>
	break;
 8001490:	bf00      	nop
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	48000400 	.word	0x48000400

080014a4 <SysClockHSI_Init>:
#include "stm32l4xx.h"
#include "RccConfig.h"


void SysClockHSI_Init()
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
	// 1. Enable HSI 16MHz and wait for confirmation
	RCC->CR |= RCC_CR_HSION;
 80014a8:	4a2a      	ldr	r2, [pc, #168]	; (8001554 <SysClockHSI_Init+0xb0>)
 80014aa:	4b2a      	ldr	r3, [pc, #168]	; (8001554 <SysClockHSI_Init+0xb0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b2:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSIRDY));
 80014b4:	bf00      	nop
 80014b6:	4b27      	ldr	r3, [pc, #156]	; (8001554 <SysClockHSI_Init+0xb0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0f9      	beq.n	80014b6 <SysClockHSI_Init+0x12>
	//RCC->APB1ENR1 |= RCC_APB1ENR1_PWREN;

	// 3. Configure the FLASH and the LATENCY Related Settings
	//FLASH->ACR |= FLASH_ACR_ICEN; // instruction cache enable, RESET VALUE
	//FLASH->ACR |= FLASH_ACR_DCEN; // data cache enable, RESET VALUE
	FLASH->ACR |= FLASH_ACR_LATENCY_4WS; // 4 wait states (number of HCLK period to the Flash access time)
 80014c2:	4a25      	ldr	r2, [pc, #148]	; (8001558 <SysClockHSI_Init+0xb4>)
 80014c4:	4b24      	ldr	r3, [pc, #144]	; (8001558 <SysClockHSI_Init+0xb4>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f043 0304 	orr.w	r3, r3, #4
 80014cc:	6013      	str	r3, [r2, #0]

	// 4. Configure PRESCALERS HCLK, PCLK1, PCLK2
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1; // AHB prescaler, HCLK
 80014ce:	4a21      	ldr	r2, [pc, #132]	; (8001554 <SysClockHSI_Init+0xb0>)
 80014d0:	4b20      	ldr	r3, [pc, #128]	; (8001554 <SysClockHSI_Init+0xb0>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV1; // APB1 prescaler, PCLK1
 80014d6:	4a1f      	ldr	r2, [pc, #124]	; (8001554 <SysClockHSI_Init+0xb0>)
 80014d8:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <SysClockHSI_Init+0xb0>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1; // APB2 prescaler, PCLK2
 80014de:	4a1d      	ldr	r2, [pc, #116]	; (8001554 <SysClockHSI_Init+0xb0>)
 80014e0:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <SysClockHSI_Init+0xb0>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	6093      	str	r3, [r2, #8]

	// 5. Configure PLL
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI; 					// set source PLL as HSI
 80014e6:	4a1b      	ldr	r2, [pc, #108]	; (8001554 <SysClockHSI_Init+0xb0>)
 80014e8:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <SysClockHSI_Init+0xb0>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |=	RCC_PLLCFGR_PLLM_0; 						// PLLM(6:4)=(001) -> PLLM = 2
 80014f2:	4a18      	ldr	r2, [pc, #96]	; (8001554 <SysClockHSI_Init+0xb0>)
 80014f4:	4b17      	ldr	r3, [pc, #92]	; (8001554 <SysClockHSI_Init+0xb0>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	f043 0310 	orr.w	r3, r3, #16
 80014fc:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |=	RCC_PLLCFGR_PLLN_2 | RCC_PLLCFGR_PLLN_4;	// PLLN(14:8)=(0010100) -> PLLN = 20
 80014fe:	4a15      	ldr	r2, [pc, #84]	; (8001554 <SysClockHSI_Init+0xb0>)
 8001500:	4b14      	ldr	r3, [pc, #80]	; (8001554 <SysClockHSI_Init+0xb0>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001508:	60d3      	str	r3, [r2, #12]
	//RCC->PLLCFGR |=	RCC_PLLCFGR_PLLN_5 | RCC_PLLCFGR_PLLN_3;
																// PLLR(26:25)=(00) -> PLLR = 2 RESET VALUE
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN;							// PLLCLK output ENABLE
 800150a:	4a12      	ldr	r2, [pc, #72]	; (8001554 <SysClockHSI_Init+0xb0>)
 800150c:	4b11      	ldr	r3, [pc, #68]	; (8001554 <SysClockHSI_Init+0xb0>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001514:	60d3      	str	r3, [r2, #12]

	// 6. Enable PLL and wait for confirmation
	RCC->CR |= RCC_CR_PLLON;
 8001516:	4a0f      	ldr	r2, [pc, #60]	; (8001554 <SysClockHSI_Init+0xb0>)
 8001518:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <SysClockHSI_Init+0xb0>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001520:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY));
 8001522:	bf00      	nop
 8001524:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <SysClockHSI_Init+0xb0>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0f9      	beq.n	8001524 <SysClockHSI_Init+0x80>

	// 7. Select the Clock Source
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001530:	4a08      	ldr	r2, [pc, #32]	; (8001554 <SysClockHSI_Init+0xb0>)
 8001532:	4b08      	ldr	r3, [pc, #32]	; (8001554 <SysClockHSI_Init+0xb0>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f043 0303 	orr.w	r3, r3, #3
 800153a:	6093      	str	r3, [r2, #8]
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL );
 800153c:	bf00      	nop
 800153e:	4b05      	ldr	r3, [pc, #20]	; (8001554 <SysClockHSI_Init+0xb0>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 030c 	and.w	r3, r3, #12
 8001546:	2b0c      	cmp	r3, #12
 8001548:	d1f9      	bne.n	800153e <SysClockHSI_Init+0x9a>
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	40021000 	.word	0x40021000
 8001558:	40022000 	.word	0x40022000

0800155c <ServoInit>:
#include "stm32l4xx.h"
#include "Servo.h"

// Initialization servo
void ServoInit()
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
	// Enable clock for TIM3 and GPIO C
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM3EN;
 8001560:	4a2b      	ldr	r2, [pc, #172]	; (8001610 <ServoInit+0xb4>)
 8001562:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <ServoInit+0xb4>)
 8001564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001566:	f043 0302 	orr.w	r3, r3, #2
 800156a:	6593      	str	r3, [r2, #88]	; 0x58
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 800156c:	4a28      	ldr	r2, [pc, #160]	; (8001610 <ServoInit+0xb4>)
 800156e:	4b28      	ldr	r3, [pc, #160]	; (8001610 <ServoInit+0xb4>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	f043 0304 	orr.w	r3, r3, #4
 8001576:	64d3      	str	r3, [r2, #76]	; 0x4c

	// Configure pin PC8 and PC9 as alternate function
	GPIOC->MODER &= ~GPIO_MODER_MODE8_0; 	// Set PC8 as Alternate function, 0 write in MODER8[1]
 8001578:	4a26      	ldr	r2, [pc, #152]	; (8001614 <ServoInit+0xb8>)
 800157a:	4b26      	ldr	r3, [pc, #152]	; (8001614 <ServoInit+0xb8>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001582:	6013      	str	r3, [r2, #0]
	GPIOC->AFR[1] |= GPIO_AFRH_AFSEL8_1; 	// AF 2 on PC8 -> TIM3_CH3
 8001584:	4a23      	ldr	r2, [pc, #140]	; (8001614 <ServoInit+0xb8>)
 8001586:	4b23      	ldr	r3, [pc, #140]	; (8001614 <ServoInit+0xb8>)
 8001588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158a:	f043 0302 	orr.w	r3, r3, #2
 800158e:	6253      	str	r3, [r2, #36]	; 0x24

	GPIOC->MODER &= ~GPIO_MODER_MODE9_0; 	// Set PC9 as Alternate function, 0 write in MODER9[1]
 8001590:	4a20      	ldr	r2, [pc, #128]	; (8001614 <ServoInit+0xb8>)
 8001592:	4b20      	ldr	r3, [pc, #128]	; (8001614 <ServoInit+0xb8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800159a:	6013      	str	r3, [r2, #0]
	GPIOC->AFR[1] |= GPIO_AFRH_AFSEL9_1; 	// AF 2 on PC9 -> TIM3_CH4
 800159c:	4a1d      	ldr	r2, [pc, #116]	; (8001614 <ServoInit+0xb8>)
 800159e:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <ServoInit+0xb8>)
 80015a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a2:	f043 0320 	orr.w	r3, r3, #32
 80015a6:	6253      	str	r3, [r2, #36]	; 0x24


	// Configure TIM3, channel 3 and 4
	TIM3->PSC = 79;				// prescaler 80 MHz / (79 + 1) = 1 MHz
 80015a8:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <ServoInit+0xbc>)
 80015aa:	224f      	movs	r2, #79	; 0x4f
 80015ac:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 20000;			// 20000us = 20ms = 50Hz -> required by servo
 80015ae:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <ServoInit+0xbc>)
 80015b0:	f644 6220 	movw	r2, #20000	; 0x4e20
 80015b4:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;	// OCxM = 0110 -> PWM mode 1, channel is active when TIM3_CNT < TIM3_CCRx
 80015b6:	4a18      	ldr	r2, [pc, #96]	; (8001618 <ServoInit+0xbc>)
 80015b8:	4b17      	ldr	r3, [pc, #92]	; (8001618 <ServoInit+0xbc>)
 80015ba:	69db      	ldr	r3, [r3, #28]
 80015bc:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80015c0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015c4:	61d3      	str	r3, [r2, #28]
	TIM3->CCMR2 |= TIM_CCMR2_OC3PE | TIM_CCMR2_OC4PE;	// output compare preload enable
 80015c6:	4a14      	ldr	r2, [pc, #80]	; (8001618 <ServoInit+0xbc>)
 80015c8:	4b13      	ldr	r3, [pc, #76]	; (8001618 <ServoInit+0xbc>)
 80015ca:	69db      	ldr	r3, [r3, #28]
 80015cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015d0:	f043 0308 	orr.w	r3, r3, #8
 80015d4:	61d3      	str	r3, [r2, #28]
	TIM3->CCER |= TIM_CCER_CC3E | TIM_CCER_CC4E;	// capture/compare 3 output enable
 80015d6:	4a10      	ldr	r2, [pc, #64]	; (8001618 <ServoInit+0xbc>)
 80015d8:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <ServoInit+0xbc>)
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 80015e0:	6213      	str	r3, [r2, #32]
	TIM3->CR1 |= TIM_CR1_ARPE;	// auto-reload preload enable
 80015e2:	4a0d      	ldr	r2, [pc, #52]	; (8001618 <ServoInit+0xbc>)
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <ServoInit+0xbc>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015ec:	6013      	str	r3, [r2, #0]
	TIM3->EGR |= TIM_EGR_UG;	// update generation
 80015ee:	4a0a      	ldr	r2, [pc, #40]	; (8001618 <ServoInit+0xbc>)
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <ServoInit+0xbc>)
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6153      	str	r3, [r2, #20]
	TIM3->CR1 |= TIM_CR1_CEN;	// counter enable
 80015fa:	4a07      	ldr	r2, [pc, #28]	; (8001618 <ServoInit+0xbc>)
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <ServoInit+0xbc>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6013      	str	r3, [r2, #0]
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	40021000 	.word	0x40021000
 8001614:	48000800 	.word	0x48000800
 8001618:	40000400 	.word	0x40000400
 800161c:	00000000 	.word	0x00000000

08001620 <ServoSetAngleHorizontal>:

void ServoSetAngleHorizontal(int angle)
{
 8001620:	b590      	push	{r4, r7, lr}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	if(angle<0) angle = 0;				// limits
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	da02      	bge.n	8001634 <ServoSetAngleHorizontal+0x14>
 800162e:	2300      	movs	r3, #0
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	e004      	b.n	800163e <ServoSetAngleHorizontal+0x1e>
	else if(angle>180) angle = 180;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2bb4      	cmp	r3, #180	; 0xb4
 8001638:	dd01      	ble.n	800163e <ServoSetAngleHorizontal+0x1e>
 800163a:	23b4      	movs	r3, #180	; 0xb4
 800163c:	607b      	str	r3, [r7, #4]

	TIM3->CCR3 = 11.11 * (180 - angle) + 500; 	// servo can work in range 500 - 2500ms, factor 11.11 -> 2000ms /180 deg
 800163e:	4c12      	ldr	r4, [pc, #72]	; (8001688 <ServoSetAngleHorizontal+0x68>)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8001646:	4618      	mov	r0, r3
 8001648:	f7fe ff24 	bl	8000494 <__aeabi_i2d>
 800164c:	a30c      	add	r3, pc, #48	; (adr r3, 8001680 <ServoSetAngleHorizontal+0x60>)
 800164e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001652:	f7fe ff85 	bl	8000560 <__aeabi_dmul>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4610      	mov	r0, r2
 800165c:	4619      	mov	r1, r3
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	4b0a      	ldr	r3, [pc, #40]	; (800168c <ServoSetAngleHorizontal+0x6c>)
 8001664:	f7fe fdca 	bl	80001fc <__adddf3>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4610      	mov	r0, r2
 800166e:	4619      	mov	r1, r3
 8001670:	f7ff fa26 	bl	8000ac0 <__aeabi_d2uiz>
 8001674:	4603      	mov	r3, r0
 8001676:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	bd90      	pop	{r4, r7, pc}
 8001680:	eb851eb8 	.word	0xeb851eb8
 8001684:	40263851 	.word	0x40263851
 8001688:	40000400 	.word	0x40000400
 800168c:	407f4000 	.word	0x407f4000

08001690 <ServoSetAngleVertical>:

void ServoSetAngleVertical(int angle)
{
 8001690:	b590      	push	{r4, r7, lr}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	if(angle<0) angle = 0;				// limits
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	da02      	bge.n	80016a4 <ServoSetAngleVertical+0x14>
 800169e:	2300      	movs	r3, #0
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	e004      	b.n	80016ae <ServoSetAngleVertical+0x1e>
	else if(angle>90) angle = 90;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b5a      	cmp	r3, #90	; 0x5a
 80016a8:	dd01      	ble.n	80016ae <ServoSetAngleVertical+0x1e>
 80016aa:	235a      	movs	r3, #90	; 0x5a
 80016ac:	607b      	str	r3, [r7, #4]

	TIM3->CCR4 = 11.11 * angle + 500; 	// servo can work in range 500 - 2500ms, factor 11.11 -> 2000ms /180 deg
 80016ae:	4c12      	ldr	r4, [pc, #72]	; (80016f8 <ServoSetAngleVertical+0x68>)
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7fe feef 	bl	8000494 <__aeabi_i2d>
 80016b6:	a30e      	add	r3, pc, #56	; (adr r3, 80016f0 <ServoSetAngleVertical+0x60>)
 80016b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016bc:	f7fe ff50 	bl	8000560 <__aeabi_dmul>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	4610      	mov	r0, r2
 80016c6:	4619      	mov	r1, r3
 80016c8:	f04f 0200 	mov.w	r2, #0
 80016cc:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <ServoSetAngleVertical+0x6c>)
 80016ce:	f7fe fd95 	bl	80001fc <__adddf3>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4610      	mov	r0, r2
 80016d8:	4619      	mov	r1, r3
 80016da:	f7ff f9f1 	bl	8000ac0 <__aeabi_d2uiz>
 80016de:	4603      	mov	r3, r0
 80016e0:	6423      	str	r3, [r4, #64]	; 0x40
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd90      	pop	{r4, r7, pc}
 80016ea:	bf00      	nop
 80016ec:	f3af 8000 	nop.w
 80016f0:	eb851eb8 	.word	0xeb851eb8
 80016f4:	40263851 	.word	0x40263851
 80016f8:	40000400 	.word	0x40000400
 80016fc:	407f4000 	.word	0x407f4000

08001700 <SunCalculatePosition>:

float solarAzimuthAngleDeg, solarZenithAngleDeg;


void SunCalculatePosition(unsigned char timezone,int dayOfYear, unsigned char hr, unsigned char mn, unsigned char sc,float longitude, float latitude)
{
 8001700:	b5b0      	push	{r4, r5, r7, lr}
 8001702:	ed2d 8b02 	vpush	{d8}
 8001706:	b08c      	sub	sp, #48	; 0x30
 8001708:	af00      	add	r7, sp, #0
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	4611      	mov	r1, r2
 800170e:	461a      	mov	r2, r3
 8001710:	ed87 0a01 	vstr	s0, [r7, #4]
 8001714:	edc7 0a00 	vstr	s1, [r7]
 8001718:	4603      	mov	r3, r0
 800171a:	73fb      	strb	r3, [r7, #15]
 800171c:	460b      	mov	r3, r1
 800171e:	73bb      	strb	r3, [r7, #14]
 8001720:	4613      	mov	r3, r2
 8001722:	737b      	strb	r3, [r7, #13]
	// calculate fractional year
	float y = ((2*M_PI)/365.0)*((float)dayOfYear - 1.0 + (((float)hr - 12.0)/24.0));
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	ee07 3a90 	vmov	s15, r3
 800172a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800172e:	ee17 0a90 	vmov	r0, s15
 8001732:	f7fe fec1 	bl	80004b8 <__aeabi_f2d>
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	4be9      	ldr	r3, [pc, #932]	; (8001ae0 <SunCalculatePosition+0x3e0>)
 800173c:	f7fe fd5c 	bl	80001f8 <__aeabi_dsub>
 8001740:	4603      	mov	r3, r0
 8001742:	460c      	mov	r4, r1
 8001744:	4625      	mov	r5, r4
 8001746:	461c      	mov	r4, r3
 8001748:	7bbb      	ldrb	r3, [r7, #14]
 800174a:	ee07 3a90 	vmov	s15, r3
 800174e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001752:	ee17 0a90 	vmov	r0, s15
 8001756:	f7fe feaf 	bl	80004b8 <__aeabi_f2d>
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	4be1      	ldr	r3, [pc, #900]	; (8001ae4 <SunCalculatePosition+0x3e4>)
 8001760:	f7fe fd4a 	bl	80001f8 <__aeabi_dsub>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4610      	mov	r0, r2
 800176a:	4619      	mov	r1, r3
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	4bdd      	ldr	r3, [pc, #884]	; (8001ae8 <SunCalculatePosition+0x3e8>)
 8001772:	f7ff f81f 	bl	80007b4 <__aeabi_ddiv>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4620      	mov	r0, r4
 800177c:	4629      	mov	r1, r5
 800177e:	f7fe fd3d 	bl	80001fc <__adddf3>
 8001782:	4603      	mov	r3, r0
 8001784:	460c      	mov	r4, r1
 8001786:	4618      	mov	r0, r3
 8001788:	4621      	mov	r1, r4
 800178a:	a3b9      	add	r3, pc, #740	; (adr r3, 8001a70 <SunCalculatePosition+0x370>)
 800178c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001790:	f7fe fee6 	bl	8000560 <__aeabi_dmul>
 8001794:	4603      	mov	r3, r0
 8001796:	460c      	mov	r4, r1
 8001798:	4618      	mov	r0, r3
 800179a:	4621      	mov	r1, r4
 800179c:	f7ff f9b0 	bl	8000b00 <__aeabi_d2f>
 80017a0:	4603      	mov	r3, r0
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c

	//estimate the equation of time (in minutes)
	float eqtime = 229.18*(0.000075+0.001868*cosf(y)-0.032077*sinf(y) - 0.014615*cosf(2*y)-0.040849*sinf(2*y));
 80017a4:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80017a8:	f000 fef0 	bl	800258c <cosf>
 80017ac:	ee10 3a10 	vmov	r3, s0
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe fe81 	bl	80004b8 <__aeabi_f2d>
 80017b6:	a3b0      	add	r3, pc, #704	; (adr r3, 8001a78 <SunCalculatePosition+0x378>)
 80017b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017bc:	f7fe fed0 	bl	8000560 <__aeabi_dmul>
 80017c0:	4603      	mov	r3, r0
 80017c2:	460c      	mov	r4, r1
 80017c4:	4618      	mov	r0, r3
 80017c6:	4621      	mov	r1, r4
 80017c8:	a3ad      	add	r3, pc, #692	; (adr r3, 8001a80 <SunCalculatePosition+0x380>)
 80017ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ce:	f7fe fd15 	bl	80001fc <__adddf3>
 80017d2:	4603      	mov	r3, r0
 80017d4:	460c      	mov	r4, r1
 80017d6:	4625      	mov	r5, r4
 80017d8:	461c      	mov	r4, r3
 80017da:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80017de:	f000 ff15 	bl	800260c <sinf>
 80017e2:	ee10 3a10 	vmov	r3, s0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7fe fe66 	bl	80004b8 <__aeabi_f2d>
 80017ec:	a3a6      	add	r3, pc, #664	; (adr r3, 8001a88 <SunCalculatePosition+0x388>)
 80017ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f2:	f7fe feb5 	bl	8000560 <__aeabi_dmul>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4620      	mov	r0, r4
 80017fc:	4629      	mov	r1, r5
 80017fe:	f7fe fcfb 	bl	80001f8 <__aeabi_dsub>
 8001802:	4603      	mov	r3, r0
 8001804:	460c      	mov	r4, r1
 8001806:	4625      	mov	r5, r4
 8001808:	461c      	mov	r4, r3
 800180a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800180e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001812:	eeb0 0a67 	vmov.f32	s0, s15
 8001816:	f000 feb9 	bl	800258c <cosf>
 800181a:	ee10 3a10 	vmov	r3, s0
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe fe4a 	bl	80004b8 <__aeabi_f2d>
 8001824:	a39a      	add	r3, pc, #616	; (adr r3, 8001a90 <SunCalculatePosition+0x390>)
 8001826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182a:	f7fe fe99 	bl	8000560 <__aeabi_dmul>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4620      	mov	r0, r4
 8001834:	4629      	mov	r1, r5
 8001836:	f7fe fcdf 	bl	80001f8 <__aeabi_dsub>
 800183a:	4603      	mov	r3, r0
 800183c:	460c      	mov	r4, r1
 800183e:	4625      	mov	r5, r4
 8001840:	461c      	mov	r4, r3
 8001842:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001846:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800184a:	eeb0 0a67 	vmov.f32	s0, s15
 800184e:	f000 fedd 	bl	800260c <sinf>
 8001852:	ee10 3a10 	vmov	r3, s0
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fe2e 	bl	80004b8 <__aeabi_f2d>
 800185c:	a38e      	add	r3, pc, #568	; (adr r3, 8001a98 <SunCalculatePosition+0x398>)
 800185e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001862:	f7fe fe7d 	bl	8000560 <__aeabi_dmul>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4620      	mov	r0, r4
 800186c:	4629      	mov	r1, r5
 800186e:	f7fe fcc3 	bl	80001f8 <__aeabi_dsub>
 8001872:	4603      	mov	r3, r0
 8001874:	460c      	mov	r4, r1
 8001876:	4618      	mov	r0, r3
 8001878:	4621      	mov	r1, r4
 800187a:	a389      	add	r3, pc, #548	; (adr r3, 8001aa0 <SunCalculatePosition+0x3a0>)
 800187c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001880:	f7fe fe6e 	bl	8000560 <__aeabi_dmul>
 8001884:	4603      	mov	r3, r0
 8001886:	460c      	mov	r4, r1
 8001888:	4618      	mov	r0, r3
 800188a:	4621      	mov	r1, r4
 800188c:	f7ff f938 	bl	8000b00 <__aeabi_d2f>
 8001890:	4603      	mov	r3, r0
 8001892:	62bb      	str	r3, [r7, #40]	; 0x28

	// solar declination angle
	float declinationRad = 0.006918 - 0.399912*cosf(y) + 0.070257*sinf(y) - 0.006758*cosf(2*y) + 0.000907*sinf(2*y) - 0.002697*cosf(3*y) + 0.00148*sinf(3*y);
 8001894:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8001898:	f000 fe78 	bl	800258c <cosf>
 800189c:	ee10 3a10 	vmov	r3, s0
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fe09 	bl	80004b8 <__aeabi_f2d>
 80018a6:	a380      	add	r3, pc, #512	; (adr r3, 8001aa8 <SunCalculatePosition+0x3a8>)
 80018a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ac:	f7fe fe58 	bl	8000560 <__aeabi_dmul>
 80018b0:	4603      	mov	r3, r0
 80018b2:	460c      	mov	r4, r1
 80018b4:	461a      	mov	r2, r3
 80018b6:	4623      	mov	r3, r4
 80018b8:	a17d      	add	r1, pc, #500	; (adr r1, 8001ab0 <SunCalculatePosition+0x3b0>)
 80018ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80018be:	f7fe fc9b 	bl	80001f8 <__aeabi_dsub>
 80018c2:	4603      	mov	r3, r0
 80018c4:	460c      	mov	r4, r1
 80018c6:	4625      	mov	r5, r4
 80018c8:	461c      	mov	r4, r3
 80018ca:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80018ce:	f000 fe9d 	bl	800260c <sinf>
 80018d2:	ee10 3a10 	vmov	r3, s0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7fe fdee 	bl	80004b8 <__aeabi_f2d>
 80018dc:	a376      	add	r3, pc, #472	; (adr r3, 8001ab8 <SunCalculatePosition+0x3b8>)
 80018de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e2:	f7fe fe3d 	bl	8000560 <__aeabi_dmul>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4620      	mov	r0, r4
 80018ec:	4629      	mov	r1, r5
 80018ee:	f7fe fc85 	bl	80001fc <__adddf3>
 80018f2:	4603      	mov	r3, r0
 80018f4:	460c      	mov	r4, r1
 80018f6:	4625      	mov	r5, r4
 80018f8:	461c      	mov	r4, r3
 80018fa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80018fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001902:	eeb0 0a67 	vmov.f32	s0, s15
 8001906:	f000 fe41 	bl	800258c <cosf>
 800190a:	ee10 3a10 	vmov	r3, s0
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fdd2 	bl	80004b8 <__aeabi_f2d>
 8001914:	a36a      	add	r3, pc, #424	; (adr r3, 8001ac0 <SunCalculatePosition+0x3c0>)
 8001916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191a:	f7fe fe21 	bl	8000560 <__aeabi_dmul>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	4620      	mov	r0, r4
 8001924:	4629      	mov	r1, r5
 8001926:	f7fe fc67 	bl	80001f8 <__aeabi_dsub>
 800192a:	4603      	mov	r3, r0
 800192c:	460c      	mov	r4, r1
 800192e:	4625      	mov	r5, r4
 8001930:	461c      	mov	r4, r3
 8001932:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001936:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800193a:	eeb0 0a67 	vmov.f32	s0, s15
 800193e:	f000 fe65 	bl	800260c <sinf>
 8001942:	ee10 3a10 	vmov	r3, s0
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fdb6 	bl	80004b8 <__aeabi_f2d>
 800194c:	a35e      	add	r3, pc, #376	; (adr r3, 8001ac8 <SunCalculatePosition+0x3c8>)
 800194e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001952:	f7fe fe05 	bl	8000560 <__aeabi_dmul>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4620      	mov	r0, r4
 800195c:	4629      	mov	r1, r5
 800195e:	f7fe fc4d 	bl	80001fc <__adddf3>
 8001962:	4603      	mov	r3, r0
 8001964:	460c      	mov	r4, r1
 8001966:	4625      	mov	r5, r4
 8001968:	461c      	mov	r4, r3
 800196a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800196e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001972:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001976:	eeb0 0a67 	vmov.f32	s0, s15
 800197a:	f000 fe07 	bl	800258c <cosf>
 800197e:	ee10 3a10 	vmov	r3, s0
 8001982:	4618      	mov	r0, r3
 8001984:	f7fe fd98 	bl	80004b8 <__aeabi_f2d>
 8001988:	a351      	add	r3, pc, #324	; (adr r3, 8001ad0 <SunCalculatePosition+0x3d0>)
 800198a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198e:	f7fe fde7 	bl	8000560 <__aeabi_dmul>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4620      	mov	r0, r4
 8001998:	4629      	mov	r1, r5
 800199a:	f7fe fc2d 	bl	80001f8 <__aeabi_dsub>
 800199e:	4603      	mov	r3, r0
 80019a0:	460c      	mov	r4, r1
 80019a2:	4625      	mov	r5, r4
 80019a4:	461c      	mov	r4, r3
 80019a6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80019aa:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80019ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019b2:	eeb0 0a67 	vmov.f32	s0, s15
 80019b6:	f000 fe29 	bl	800260c <sinf>
 80019ba:	ee10 3a10 	vmov	r3, s0
 80019be:	4618      	mov	r0, r3
 80019c0:	f7fe fd7a 	bl	80004b8 <__aeabi_f2d>
 80019c4:	a344      	add	r3, pc, #272	; (adr r3, 8001ad8 <SunCalculatePosition+0x3d8>)
 80019c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ca:	f7fe fdc9 	bl	8000560 <__aeabi_dmul>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	4620      	mov	r0, r4
 80019d4:	4629      	mov	r1, r5
 80019d6:	f7fe fc11 	bl	80001fc <__adddf3>
 80019da:	4603      	mov	r3, r0
 80019dc:	460c      	mov	r4, r1
 80019de:	4618      	mov	r0, r3
 80019e0:	4621      	mov	r1, r4
 80019e2:	f7ff f88d 	bl	8000b00 <__aeabi_d2f>
 80019e6:	4603      	mov	r3, r0
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
	//float declinationDeg = rad2deg(declinationRad);

	// calculate time offset
	float time_offset = eqtime + 4*longitude - 60*(float)timezone;
 80019ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80019ee:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80019f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019f6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80019fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	ee07 3a90 	vmov	s15, r3
 8001a04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a08:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001aec <SunCalculatePosition+0x3ec>
 8001a0c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a14:	edc7 7a08 	vstr	s15, [r7, #32]

	// true solar time
	float tst = (float)hr*60.0 + mn + sc/60 + time_offset;
 8001a18:	7bbb      	ldrb	r3, [r7, #14]
 8001a1a:	ee07 3a90 	vmov	s15, r3
 8001a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a22:	ee17 0a90 	vmov	r0, s15
 8001a26:	f7fe fd47 	bl	80004b8 <__aeabi_f2d>
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	4b30      	ldr	r3, [pc, #192]	; (8001af0 <SunCalculatePosition+0x3f0>)
 8001a30:	f7fe fd96 	bl	8000560 <__aeabi_dmul>
 8001a34:	4603      	mov	r3, r0
 8001a36:	460c      	mov	r4, r1
 8001a38:	4625      	mov	r5, r4
 8001a3a:	461c      	mov	r4, r3
 8001a3c:	7b7b      	ldrb	r3, [r7, #13]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fd28 	bl	8000494 <__aeabi_i2d>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4620      	mov	r0, r4
 8001a4a:	4629      	mov	r1, r5
 8001a4c:	f7fe fbd6 	bl	80001fc <__adddf3>
 8001a50:	4603      	mov	r3, r0
 8001a52:	460c      	mov	r4, r1
 8001a54:	4625      	mov	r5, r4
 8001a56:	461c      	mov	r4, r3
 8001a58:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001a5c:	4a25      	ldr	r2, [pc, #148]	; (8001af4 <SunCalculatePosition+0x3f4>)
 8001a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a62:	095b      	lsrs	r3, r3, #5
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fd14 	bl	8000494 <__aeabi_i2d>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	e045      	b.n	8001afc <SunCalculatePosition+0x3fc>
 8001a70:	d4b3ac9a 	.word	0xd4b3ac9a
 8001a74:	3f91a099 	.word	0x3f91a099
 8001a78:	ba2be059 	.word	0xba2be059
 8001a7c:	3f5e9af5 	.word	0x3f5e9af5
 8001a80:	30553261 	.word	0x30553261
 8001a84:	3f13a92a 	.word	0x3f13a92a
 8001a88:	83e8576d 	.word	0x83e8576d
 8001a8c:	3fa06c65 	.word	0x3fa06c65
 8001a90:	183f91e6 	.word	0x183f91e6
 8001a94:	3f8dee78 	.word	0x3f8dee78
 8001a98:	fe260b2d 	.word	0xfe260b2d
 8001a9c:	3fa4ea28 	.word	0x3fa4ea28
 8001aa0:	8f5c28f6 	.word	0x8f5c28f6
 8001aa4:	406ca5c2 	.word	0x406ca5c2
 8001aa8:	8051c9f7 	.word	0x8051c9f7
 8001aac:	3fd99828 	.word	0x3fd99828
 8001ab0:	7c0f4517 	.word	0x7c0f4517
 8001ab4:	3f7c560c 	.word	0x3f7c560c
 8001ab8:	dd50a88f 	.word	0xdd50a88f
 8001abc:	3fb1fc5c 	.word	0x3fb1fc5c
 8001ac0:	cfc829d0 	.word	0xcfc829d0
 8001ac4:	3f7bae46 	.word	0x3f7bae46
 8001ac8:	ab324852 	.word	0xab324852
 8001acc:	3f4db877 	.word	0x3f4db877
 8001ad0:	d9839475 	.word	0xd9839475
 8001ad4:	3f661804 	.word	0x3f661804
 8001ad8:	e646f156 	.word	0xe646f156
 8001adc:	3f583f91 	.word	0x3f583f91
 8001ae0:	3ff00000 	.word	0x3ff00000
 8001ae4:	40280000 	.word	0x40280000
 8001ae8:	40380000 	.word	0x40380000
 8001aec:	42700000 	.word	0x42700000
 8001af0:	404e0000 	.word	0x404e0000
 8001af4:	88888889 	.word	0x88888889
 8001af8:	43340000 	.word	0x43340000
 8001afc:	460b      	mov	r3, r1
 8001afe:	4620      	mov	r0, r4
 8001b00:	4629      	mov	r1, r5
 8001b02:	f7fe fb7b 	bl	80001fc <__adddf3>
 8001b06:	4603      	mov	r3, r0
 8001b08:	460c      	mov	r4, r1
 8001b0a:	4625      	mov	r5, r4
 8001b0c:	461c      	mov	r4, r3
 8001b0e:	6a38      	ldr	r0, [r7, #32]
 8001b10:	f7fe fcd2 	bl	80004b8 <__aeabi_f2d>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4620      	mov	r0, r4
 8001b1a:	4629      	mov	r1, r5
 8001b1c:	f7fe fb6e 	bl	80001fc <__adddf3>
 8001b20:	4603      	mov	r3, r0
 8001b22:	460c      	mov	r4, r1
 8001b24:	4618      	mov	r0, r3
 8001b26:	4621      	mov	r1, r4
 8001b28:	f7fe ffea 	bl	8000b00 <__aeabi_d2f>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	61fb      	str	r3, [r7, #28]

	// solar hour angle
	float sha = (tst/4) - 180;
 8001b30:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b34:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001b38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b3c:	ed1f 7a12 	vldr	s14, [pc, #-72]	; 8001af8 <SunCalculatePosition+0x3f8>
 8001b40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b44:	edc7 7a06 	vstr	s15, [r7, #24]

	// solar zenith angle
	float solarZenithAngle = acosf(sinf(deg2rad(latitude))*sinf(declinationRad)+cosf(deg2rad(latitude))*cosf(declinationRad)*cosf(deg2rad(sha)));
 8001b48:	6838      	ldr	r0, [r7, #0]
 8001b4a:	f7fe fcb5 	bl	80004b8 <__aeabi_f2d>
 8001b4e:	a3aa      	add	r3, pc, #680	; (adr r3, 8001df8 <SunCalculatePosition+0x6f8>)
 8001b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b54:	f7fe fd04 	bl	8000560 <__aeabi_dmul>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	460c      	mov	r4, r1
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	4621      	mov	r1, r4
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	4ba8      	ldr	r3, [pc, #672]	; (8001e08 <SunCalculatePosition+0x708>)
 8001b66:	f7fe fe25 	bl	80007b4 <__aeabi_ddiv>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	460c      	mov	r4, r1
 8001b6e:	4618      	mov	r0, r3
 8001b70:	4621      	mov	r1, r4
 8001b72:	f7fe ffc5 	bl	8000b00 <__aeabi_d2f>
 8001b76:	4603      	mov	r3, r0
 8001b78:	ee00 3a10 	vmov	s0, r3
 8001b7c:	f000 fd46 	bl	800260c <sinf>
 8001b80:	eeb0 8a40 	vmov.f32	s16, s0
 8001b84:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001b88:	f000 fd40 	bl	800260c <sinf>
 8001b8c:	eef0 7a40 	vmov.f32	s15, s0
 8001b90:	ee28 8a27 	vmul.f32	s16, s16, s15
 8001b94:	6838      	ldr	r0, [r7, #0]
 8001b96:	f7fe fc8f 	bl	80004b8 <__aeabi_f2d>
 8001b9a:	a397      	add	r3, pc, #604	; (adr r3, 8001df8 <SunCalculatePosition+0x6f8>)
 8001b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba0:	f7fe fcde 	bl	8000560 <__aeabi_dmul>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	460c      	mov	r4, r1
 8001ba8:	4618      	mov	r0, r3
 8001baa:	4621      	mov	r1, r4
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	4b95      	ldr	r3, [pc, #596]	; (8001e08 <SunCalculatePosition+0x708>)
 8001bb2:	f7fe fdff 	bl	80007b4 <__aeabi_ddiv>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	460c      	mov	r4, r1
 8001bba:	4618      	mov	r0, r3
 8001bbc:	4621      	mov	r1, r4
 8001bbe:	f7fe ff9f 	bl	8000b00 <__aeabi_d2f>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	ee00 3a10 	vmov	s0, r3
 8001bc8:	f000 fce0 	bl	800258c <cosf>
 8001bcc:	eef0 8a40 	vmov.f32	s17, s0
 8001bd0:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001bd4:	f000 fcda 	bl	800258c <cosf>
 8001bd8:	eef0 7a40 	vmov.f32	s15, s0
 8001bdc:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8001be0:	69b8      	ldr	r0, [r7, #24]
 8001be2:	f7fe fc69 	bl	80004b8 <__aeabi_f2d>
 8001be6:	a384      	add	r3, pc, #528	; (adr r3, 8001df8 <SunCalculatePosition+0x6f8>)
 8001be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bec:	f7fe fcb8 	bl	8000560 <__aeabi_dmul>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	460c      	mov	r4, r1
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	4621      	mov	r1, r4
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	4b82      	ldr	r3, [pc, #520]	; (8001e08 <SunCalculatePosition+0x708>)
 8001bfe:	f7fe fdd9 	bl	80007b4 <__aeabi_ddiv>
 8001c02:	4603      	mov	r3, r0
 8001c04:	460c      	mov	r4, r1
 8001c06:	4618      	mov	r0, r3
 8001c08:	4621      	mov	r1, r4
 8001c0a:	f7fe ff79 	bl	8000b00 <__aeabi_d2f>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	ee00 3a10 	vmov	s0, r3
 8001c14:	f000 fcba 	bl	800258c <cosf>
 8001c18:	eef0 7a40 	vmov.f32	s15, s0
 8001c1c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001c20:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001c24:	eeb0 0a67 	vmov.f32	s0, s15
 8001c28:	f000 fd96 	bl	8002758 <acosf>
 8001c2c:	ed87 0a05 	vstr	s0, [r7, #20]
	solarZenithAngleDeg = rad2deg(solarZenithAngle);
 8001c30:	6978      	ldr	r0, [r7, #20]
 8001c32:	f7fe fc41 	bl	80004b8 <__aeabi_f2d>
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	4b73      	ldr	r3, [pc, #460]	; (8001e08 <SunCalculatePosition+0x708>)
 8001c3c:	f7fe fc90 	bl	8000560 <__aeabi_dmul>
 8001c40:	4603      	mov	r3, r0
 8001c42:	460c      	mov	r4, r1
 8001c44:	4618      	mov	r0, r3
 8001c46:	4621      	mov	r1, r4
 8001c48:	a36b      	add	r3, pc, #428	; (adr r3, 8001df8 <SunCalculatePosition+0x6f8>)
 8001c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4e:	f7fe fdb1 	bl	80007b4 <__aeabi_ddiv>
 8001c52:	4603      	mov	r3, r0
 8001c54:	460c      	mov	r4, r1
 8001c56:	4618      	mov	r0, r3
 8001c58:	4621      	mov	r1, r4
 8001c5a:	f7fe ff51 	bl	8000b00 <__aeabi_d2f>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	4b6a      	ldr	r3, [pc, #424]	; (8001e0c <SunCalculatePosition+0x70c>)
 8001c62:	601a      	str	r2, [r3, #0]

	//solar azimuth angle from North
	float solarAzimuthAngle = acosf((sinf(deg2rad(latitude))*cosf(solarZenithAngle)-sinf(declinationRad))/(cosf(deg2rad(latitude))*sinf(solarZenithAngle)));
 8001c64:	6838      	ldr	r0, [r7, #0]
 8001c66:	f7fe fc27 	bl	80004b8 <__aeabi_f2d>
 8001c6a:	a363      	add	r3, pc, #396	; (adr r3, 8001df8 <SunCalculatePosition+0x6f8>)
 8001c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c70:	f7fe fc76 	bl	8000560 <__aeabi_dmul>
 8001c74:	4603      	mov	r3, r0
 8001c76:	460c      	mov	r4, r1
 8001c78:	4618      	mov	r0, r3
 8001c7a:	4621      	mov	r1, r4
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	4b61      	ldr	r3, [pc, #388]	; (8001e08 <SunCalculatePosition+0x708>)
 8001c82:	f7fe fd97 	bl	80007b4 <__aeabi_ddiv>
 8001c86:	4603      	mov	r3, r0
 8001c88:	460c      	mov	r4, r1
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	4621      	mov	r1, r4
 8001c8e:	f7fe ff37 	bl	8000b00 <__aeabi_d2f>
 8001c92:	4603      	mov	r3, r0
 8001c94:	ee00 3a10 	vmov	s0, r3
 8001c98:	f000 fcb8 	bl	800260c <sinf>
 8001c9c:	eeb0 8a40 	vmov.f32	s16, s0
 8001ca0:	ed97 0a05 	vldr	s0, [r7, #20]
 8001ca4:	f000 fc72 	bl	800258c <cosf>
 8001ca8:	eef0 7a40 	vmov.f32	s15, s0
 8001cac:	ee28 8a27 	vmul.f32	s16, s16, s15
 8001cb0:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001cb4:	f000 fcaa 	bl	800260c <sinf>
 8001cb8:	eef0 7a40 	vmov.f32	s15, s0
 8001cbc:	ee38 8a67 	vsub.f32	s16, s16, s15
 8001cc0:	6838      	ldr	r0, [r7, #0]
 8001cc2:	f7fe fbf9 	bl	80004b8 <__aeabi_f2d>
 8001cc6:	a34c      	add	r3, pc, #304	; (adr r3, 8001df8 <SunCalculatePosition+0x6f8>)
 8001cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ccc:	f7fe fc48 	bl	8000560 <__aeabi_dmul>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	460c      	mov	r4, r1
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	4621      	mov	r1, r4
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	4b4a      	ldr	r3, [pc, #296]	; (8001e08 <SunCalculatePosition+0x708>)
 8001cde:	f7fe fd69 	bl	80007b4 <__aeabi_ddiv>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	460c      	mov	r4, r1
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	4621      	mov	r1, r4
 8001cea:	f7fe ff09 	bl	8000b00 <__aeabi_d2f>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	ee00 3a10 	vmov	s0, r3
 8001cf4:	f000 fc4a 	bl	800258c <cosf>
 8001cf8:	eef0 8a40 	vmov.f32	s17, s0
 8001cfc:	ed97 0a05 	vldr	s0, [r7, #20]
 8001d00:	f000 fc84 	bl	800260c <sinf>
 8001d04:	eef0 7a40 	vmov.f32	s15, s0
 8001d08:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001d0c:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8001d10:	eeb0 0a47 	vmov.f32	s0, s14
 8001d14:	f000 fd20 	bl	8002758 <acosf>
 8001d18:	ed87 0a04 	vstr	s0, [r7, #16]
	if(sha>0)	solarAzimuthAngleDeg = fmod(rad2deg(solarAzimuthAngle)+180,360);
 8001d1c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d28:	dd2f      	ble.n	8001d8a <SunCalculatePosition+0x68a>
 8001d2a:	6938      	ldr	r0, [r7, #16]
 8001d2c:	f7fe fbc4 	bl	80004b8 <__aeabi_f2d>
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	4b34      	ldr	r3, [pc, #208]	; (8001e08 <SunCalculatePosition+0x708>)
 8001d36:	f7fe fc13 	bl	8000560 <__aeabi_dmul>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	460c      	mov	r4, r1
 8001d3e:	4618      	mov	r0, r3
 8001d40:	4621      	mov	r1, r4
 8001d42:	a32d      	add	r3, pc, #180	; (adr r3, 8001df8 <SunCalculatePosition+0x6f8>)
 8001d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d48:	f7fe fd34 	bl	80007b4 <__aeabi_ddiv>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	460c      	mov	r4, r1
 8001d50:	4618      	mov	r0, r3
 8001d52:	4621      	mov	r1, r4
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	4b2b      	ldr	r3, [pc, #172]	; (8001e08 <SunCalculatePosition+0x708>)
 8001d5a:	f7fe fa4f 	bl	80001fc <__adddf3>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	460c      	mov	r4, r1
 8001d62:	ec44 3b17 	vmov	d7, r3, r4
 8001d66:	ed9f 1b26 	vldr	d1, [pc, #152]	; 8001e00 <SunCalculatePosition+0x700>
 8001d6a:	eeb0 0a47 	vmov.f32	s0, s14
 8001d6e:	eef0 0a67 	vmov.f32	s1, s15
 8001d72:	f000 fc8d 	bl	8002690 <fmod>
 8001d76:	ec54 3b10 	vmov	r3, r4, d0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	4621      	mov	r1, r4
 8001d7e:	f7fe febf 	bl	8000b00 <__aeabi_d2f>
 8001d82:	4602      	mov	r2, r0
 8001d84:	4b22      	ldr	r3, [pc, #136]	; (8001e10 <SunCalculatePosition+0x710>)
 8001d86:	601a      	str	r2, [r3, #0]
	else solarAzimuthAngleDeg = fmod(540 - rad2deg(solarAzimuthAngle),360);
}
 8001d88:	e02e      	b.n	8001de8 <SunCalculatePosition+0x6e8>
	else solarAzimuthAngleDeg = fmod(540 - rad2deg(solarAzimuthAngle),360);
 8001d8a:	6938      	ldr	r0, [r7, #16]
 8001d8c:	f7fe fb94 	bl	80004b8 <__aeabi_f2d>
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	4b1c      	ldr	r3, [pc, #112]	; (8001e08 <SunCalculatePosition+0x708>)
 8001d96:	f7fe fbe3 	bl	8000560 <__aeabi_dmul>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	460c      	mov	r4, r1
 8001d9e:	4618      	mov	r0, r3
 8001da0:	4621      	mov	r1, r4
 8001da2:	a315      	add	r3, pc, #84	; (adr r3, 8001df8 <SunCalculatePosition+0x6f8>)
 8001da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da8:	f7fe fd04 	bl	80007b4 <__aeabi_ddiv>
 8001dac:	4603      	mov	r3, r0
 8001dae:	460c      	mov	r4, r1
 8001db0:	461a      	mov	r2, r3
 8001db2:	4623      	mov	r3, r4
 8001db4:	f04f 0000 	mov.w	r0, #0
 8001db8:	4916      	ldr	r1, [pc, #88]	; (8001e14 <SunCalculatePosition+0x714>)
 8001dba:	f7fe fa1d 	bl	80001f8 <__aeabi_dsub>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	460c      	mov	r4, r1
 8001dc2:	ec44 3b17 	vmov	d7, r3, r4
 8001dc6:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8001e00 <SunCalculatePosition+0x700>
 8001dca:	eeb0 0a47 	vmov.f32	s0, s14
 8001dce:	eef0 0a67 	vmov.f32	s1, s15
 8001dd2:	f000 fc5d 	bl	8002690 <fmod>
 8001dd6:	ec54 3b10 	vmov	r3, r4, d0
 8001dda:	4618      	mov	r0, r3
 8001ddc:	4621      	mov	r1, r4
 8001dde:	f7fe fe8f 	bl	8000b00 <__aeabi_d2f>
 8001de2:	4602      	mov	r2, r0
 8001de4:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <SunCalculatePosition+0x710>)
 8001de6:	601a      	str	r2, [r3, #0]
}
 8001de8:	bf00      	nop
 8001dea:	3730      	adds	r7, #48	; 0x30
 8001dec:	46bd      	mov	sp, r7
 8001dee:	ecbd 8b02 	vpop	{d8}
 8001df2:	bdb0      	pop	{r4, r5, r7, pc}
 8001df4:	f3af 8000 	nop.w
 8001df8:	54442d18 	.word	0x54442d18
 8001dfc:	400921fb 	.word	0x400921fb
 8001e00:	00000000 	.word	0x00000000
 8001e04:	40768000 	.word	0x40768000
 8001e08:	40668000 	.word	0x40668000
 8001e0c:	200000f4 	.word	0x200000f4
 8001e10:	200000f8 	.word	0x200000f8
 8001e14:	4080e000 	.word	0x4080e000

08001e18 <SunGetCurrentAzimuth>:

float SunGetCurrentAzimuth()
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
	return solarAzimuthAngleDeg;
 8001e1c:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <SunGetCurrentAzimuth+0x18>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	ee07 3a90 	vmov	s15, r3
}
 8001e24:	eeb0 0a67 	vmov.f32	s0, s15
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	200000f8 	.word	0x200000f8

08001e34 <SunGetCurrentZenith>:

float SunGetCurrentZenith()
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
	return solarZenithAngleDeg;
 8001e38:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <SunGetCurrentZenith+0x18>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	ee07 3a90 	vmov	s15, r3
}
 8001e40:	eeb0 0a67 	vmov.f32	s0, s15
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	200000f4 	.word	0x200000f4

08001e50 <SysTickInit>:

volatile int ticks;

// Configuration SysTick registers
void SysTickInit()
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
	SysTick->LOAD = SYSTICK_CONFIG_MS - 1;			// Number of cycles between interrupts
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <SysTickInit+0x38>)
 8001e56:	4a0d      	ldr	r2, [pc, #52]	; (8001e8c <SysTickInit+0x3c>)
 8001e58:	605a      	str	r2, [r3, #4]

	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;		// Enable interrupt
 8001e5a:	4a0b      	ldr	r2, [pc, #44]	; (8001e88 <SysTickInit+0x38>)
 8001e5c:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <SysTickInit+0x38>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f043 0302 	orr.w	r3, r3, #2
 8001e64:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;	// Enable clock system AHB
 8001e66:	4a08      	ldr	r2, [pc, #32]	; (8001e88 <SysTickInit+0x38>)
 8001e68:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <SysTickInit+0x38>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f043 0304 	orr.w	r3, r3, #4
 8001e70:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;		// Enable SysTick
 8001e72:	4a05      	ldr	r2, [pc, #20]	; (8001e88 <SysTickInit+0x38>)
 8001e74:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <SysTickInit+0x38>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	6013      	str	r3, [r2, #0]
}
 8001e7e:	bf00      	nop
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000e010 	.word	0xe000e010
 8001e8c:	0001387f 	.word	0x0001387f

08001e90 <SysTick_Handler>:

void SysTick_Handler()
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
	ticks++;
 8001e94:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <SysTick_Handler+0x18>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	4a03      	ldr	r2, [pc, #12]	; (8001ea8 <SysTick_Handler+0x18>)
 8001e9c:	6013      	str	r3, [r2, #0]
}
 8001e9e:	bf00      	nop
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	200000fc 	.word	0x200000fc

08001eac <millis>:

// Return current time in milliseconds
uint32_t millis()
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
	return ticks;
 8001eb0:	4b03      	ldr	r3, [pc, #12]	; (8001ec0 <millis+0x14>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	200000fc 	.word	0x200000fc

08001ec4 <timeElapsed>:

// Return 1 if time ms elapsed from the previousTime
char timeElapsed(uint32_t ms, uint32_t previousTime)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
	uint32_t time = millis();
 8001ece:	f7ff ffed 	bl	8001eac <millis>
 8001ed2:	60f8      	str	r0, [r7, #12]
	if(time - previousTime >= ms) return 1;
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	1ad2      	subs	r2, r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d301      	bcc.n	8001ee4 <timeElapsed+0x20>
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e000      	b.n	8001ee6 <timeElapsed+0x22>
	else return 0;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <NVIC_EnableIRQ>:
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001efa:	4909      	ldr	r1, [pc, #36]	; (8001f20 <NVIC_EnableIRQ+0x30>)
 8001efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f00:	095b      	lsrs	r3, r3, #5
 8001f02:	79fa      	ldrb	r2, [r7, #7]
 8001f04:	f002 021f 	and.w	r2, r2, #31
 8001f08:	2001      	movs	r0, #1
 8001f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	e000e100 	.word	0xe000e100

08001f24 <USART3_Init>:
	float a;
}floatToBytes;


void USART3_Init()
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0

	// 1. Enable USART3 clock and GPIOB GPIOD (PB10 -> TX, PD9 - RX)
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN | RCC_AHB2ENR_GPIODEN;
 8001f28:	4a1c      	ldr	r2, [pc, #112]	; (8001f9c <USART3_Init+0x78>)
 8001f2a:	4b1c      	ldr	r3, [pc, #112]	; (8001f9c <USART3_Init+0x78>)
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2e:	f043 030a 	orr.w	r3, r3, #10
 8001f32:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART3EN;
 8001f34:	4a19      	ldr	r2, [pc, #100]	; (8001f9c <USART3_Init+0x78>)
 8001f36:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <USART3_Init+0x78>)
 8001f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f3e:	6593      	str	r3, [r2, #88]	; 0x58

	// 2. Configure LPUART pins as alternate functions
	GPIOB->MODER &= ~GPIO_MODER_MODE10_0; 	// Set PB10 as Alternate function, 0 write in MODER7[1]
 8001f40:	4a17      	ldr	r2, [pc, #92]	; (8001fa0 <USART3_Init+0x7c>)
 8001f42:	4b17      	ldr	r3, [pc, #92]	; (8001fa0 <USART3_Init+0x7c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001f4a:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~GPIO_MODER_MODE9_0; 	// Set PD9 as Alternate function, 0 write in MODER8[1]
 8001f4c:	4a15      	ldr	r2, [pc, #84]	; (8001fa4 <USART3_Init+0x80>)
 8001f4e:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <USART3_Init+0x80>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f56:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[1] |= GPIO_AFRH_AFSEL10_0 | GPIO_AFRH_AFSEL10_1 | GPIO_AFRH_AFSEL10_2;	//PB10 -> Select alternate function in AFRH (USART3_TX), AF7 -> bits(11:10:9:8)=(0:1:1:1)
 8001f58:	4a11      	ldr	r2, [pc, #68]	; (8001fa0 <USART3_Init+0x7c>)
 8001f5a:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <USART3_Init+0x7c>)
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f62:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= GPIO_AFRH_AFSEL9_0 | GPIO_AFRH_AFSEL9_1 | GPIO_AFRH_AFSEL9_2;		//PD9 -> Select alternate function in AFRH (USART3_RX), Table 16 datasheet STM32L496
 8001f64:	4a0f      	ldr	r2, [pc, #60]	; (8001fa4 <USART3_Init+0x80>)
 8001f66:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <USART3_Init+0x80>)
 8001f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001f6e:	6253      	str	r3, [r2, #36]	; 0x24

	// 3. Set word length, baud rate
	// USART3->CR1 |=				// Default word length -> 1 start bit, 8 data bits
	// USART3->CR2 |=				// Default 1 STOP bits
	USART3->BRR = F_CLK/BAUDRATE;	// 115200 baudrate
 8001f70:	4b0d      	ldr	r3, [pc, #52]	; (8001fa8 <USART3_Init+0x84>)
 8001f72:	f240 22b6 	movw	r2, #694	; 0x2b6
 8001f76:	60da      	str	r2, [r3, #12]

	// 4. Enable UART, transmitter and receiver
	USART3->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8001f78:	4a0b      	ldr	r2, [pc, #44]	; (8001fa8 <USART3_Init+0x84>)
 8001f7a:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <USART3_Init+0x84>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f043 030d 	orr.w	r3, r3, #13
 8001f82:	6013      	str	r3, [r2, #0]

	// 5. Enable USART interrupt
	USART3->CR1 |= USART_CR1_RXNEIE; //| USART_CR1_IDLEIE;
 8001f84:	4a08      	ldr	r2, [pc, #32]	; (8001fa8 <USART3_Init+0x84>)
 8001f86:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <USART3_Init+0x84>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f043 0320 	orr.w	r3, r3, #32
 8001f8e:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(USART3_IRQn);
 8001f90:	2027      	movs	r0, #39	; 0x27
 8001f92:	f7ff ffad 	bl	8001ef0 <NVIC_EnableIRQ>

}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	48000400 	.word	0x48000400
 8001fa4:	48000c00 	.word	0x48000c00
 8001fa8:	40004800 	.word	0x40004800

08001fac <dataToBuffer>:



// Write data to send buffer
void dataToBuffer(float *var, unsigned char *bufSend)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
	unsigned char j,i;
	for(j=0;j<NUM_OF_FLOATS_SEND_USART;j++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	73fb      	strb	r3, [r7, #15]
 8001fba:	e01e      	b.n	8001ffa <dataToBuffer+0x4e>
	{
	floatToBytes.a = var[j];
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a11      	ldr	r2, [pc, #68]	; (800200c <dataToBuffer+0x60>)
 8001fc8:	6013      	str	r3, [r2, #0]
	for(i=0;i<sizeof(float);i++)
 8001fca:	2300      	movs	r3, #0
 8001fcc:	73bb      	strb	r3, [r7, #14]
 8001fce:	e00e      	b.n	8001fee <dataToBuffer+0x42>
	{
		bufSend[i+sizeof(float)*j] = floatToBytes.bytes[3-i];
 8001fd0:	7bba      	ldrb	r2, [r7, #14]
 8001fd2:	7bfb      	ldrb	r3, [r7, #15]
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	4413      	add	r3, r2
 8001fdc:	7bba      	ldrb	r2, [r7, #14]
 8001fde:	f1c2 0203 	rsb	r2, r2, #3
 8001fe2:	490a      	ldr	r1, [pc, #40]	; (800200c <dataToBuffer+0x60>)
 8001fe4:	5c8a      	ldrb	r2, [r1, r2]
 8001fe6:	701a      	strb	r2, [r3, #0]
	for(i=0;i<sizeof(float);i++)
 8001fe8:	7bbb      	ldrb	r3, [r7, #14]
 8001fea:	3301      	adds	r3, #1
 8001fec:	73bb      	strb	r3, [r7, #14]
 8001fee:	7bbb      	ldrb	r3, [r7, #14]
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	d9ed      	bls.n	8001fd0 <dataToBuffer+0x24>
	for(j=0;j<NUM_OF_FLOATS_SEND_USART;j++)
 8001ff4:	7bfb      	ldrb	r3, [r7, #15]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	73fb      	strb	r3, [r7, #15]
 8001ffa:	7bfb      	ldrb	r3, [r7, #15]
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d9dd      	bls.n	8001fbc <dataToBuffer+0x10>
	}
	}
}
 8002000:	bf00      	nop
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	20000110 	.word	0x20000110

08002010 <USART3_IRQHandler>:

void USART3_IRQHandler()
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
	// Receive buffer not empty
	// Frame checking
	if(USART3->ISR & USART_ISR_RXNE)
 8002016:	4b41      	ldr	r3, [pc, #260]	; (800211c <USART3_IRQHandler+0x10c>)
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	f003 0320 	and.w	r3, r3, #32
 800201e:	2b00      	cmp	r3, #0
 8002020:	d075      	beq.n	800210e <USART3_IRQHandler+0xfe>
	{
		unsigned char data = USART3->RDR;
 8002022:	4b3e      	ldr	r3, [pc, #248]	; (800211c <USART3_IRQHandler+0x10c>)
 8002024:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002026:	b29b      	uxth	r3, r3
 8002028:	71fb      	strb	r3, [r7, #7]
		switch(stateFrame)
 800202a:	4b3d      	ldr	r3, [pc, #244]	; (8002120 <USART3_IRQHandler+0x110>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	3b01      	subs	r3, #1
 8002030:	2b04      	cmp	r3, #4
 8002032:	d861      	bhi.n	80020f8 <USART3_IRQHandler+0xe8>
 8002034:	a201      	add	r2, pc, #4	; (adr r2, 800203c <USART3_IRQHandler+0x2c>)
 8002036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800203a:	bf00      	nop
 800203c:	08002051 	.word	0x08002051
 8002040:	0800206b 	.word	0x0800206b
 8002044:	0800208d 	.word	0x0800208d
 8002048:	080020af 	.word	0x080020af
 800204c:	080020cb 	.word	0x080020cb
		{
		case 1:
			if(data == '#')
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	2b23      	cmp	r3, #35	; 0x23
 8002054:	d14d      	bne.n	80020f2 <USART3_IRQHandler+0xe2>
			{
				bufReceive[wp]=data;
 8002056:	4b33      	ldr	r3, [pc, #204]	; (8002124 <USART3_IRQHandler+0x114>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	4619      	mov	r1, r3
 800205c:	4a32      	ldr	r2, [pc, #200]	; (8002128 <USART3_IRQHandler+0x118>)
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	5453      	strb	r3, [r2, r1]
				stateFrame = 2;
 8002062:	4b2f      	ldr	r3, [pc, #188]	; (8002120 <USART3_IRQHandler+0x110>)
 8002064:	2202      	movs	r2, #2
 8002066:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002068:	e043      	b.n	80020f2 <USART3_IRQHandler+0xe2>
		case 2:
			if(data == '#')
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	2b23      	cmp	r3, #35	; 0x23
 800206e:	d109      	bne.n	8002084 <USART3_IRQHandler+0x74>
			{
				bufReceive[wp]=data;
 8002070:	4b2c      	ldr	r3, [pc, #176]	; (8002124 <USART3_IRQHandler+0x114>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	4619      	mov	r1, r3
 8002076:	4a2c      	ldr	r2, [pc, #176]	; (8002128 <USART3_IRQHandler+0x118>)
 8002078:	79fb      	ldrb	r3, [r7, #7]
 800207a:	5453      	strb	r3, [r2, r1]
				stateFrame = 3;
 800207c:	4b28      	ldr	r3, [pc, #160]	; (8002120 <USART3_IRQHandler+0x110>)
 800207e:	2203      	movs	r2, #3
 8002080:	701a      	strb	r2, [r3, #0]
			}
			else stateFrame = 1;
		break;
 8002082:	e039      	b.n	80020f8 <USART3_IRQHandler+0xe8>
			else stateFrame = 1;
 8002084:	4b26      	ldr	r3, [pc, #152]	; (8002120 <USART3_IRQHandler+0x110>)
 8002086:	2201      	movs	r2, #1
 8002088:	701a      	strb	r2, [r3, #0]
		break;
 800208a:	e035      	b.n	80020f8 <USART3_IRQHandler+0xe8>
		case 3:
			if(data == '#')
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	2b23      	cmp	r3, #35	; 0x23
 8002090:	d109      	bne.n	80020a6 <USART3_IRQHandler+0x96>
			{
				bufReceive[wp]=data;
 8002092:	4b24      	ldr	r3, [pc, #144]	; (8002124 <USART3_IRQHandler+0x114>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	4619      	mov	r1, r3
 8002098:	4a23      	ldr	r2, [pc, #140]	; (8002128 <USART3_IRQHandler+0x118>)
 800209a:	79fb      	ldrb	r3, [r7, #7]
 800209c:	5453      	strb	r3, [r2, r1]
				stateFrame = 4;
 800209e:	4b20      	ldr	r3, [pc, #128]	; (8002120 <USART3_IRQHandler+0x110>)
 80020a0:	2204      	movs	r2, #4
 80020a2:	701a      	strb	r2, [r3, #0]
			}
			else stateFrame = 1;
		break;
 80020a4:	e028      	b.n	80020f8 <USART3_IRQHandler+0xe8>
			else stateFrame = 1;
 80020a6:	4b1e      	ldr	r3, [pc, #120]	; (8002120 <USART3_IRQHandler+0x110>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	701a      	strb	r2, [r3, #0]
		break;
 80020ac:	e024      	b.n	80020f8 <USART3_IRQHandler+0xe8>
		case 4:
				bufReceive[wp]=data;
 80020ae:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <USART3_IRQHandler+0x114>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	4619      	mov	r1, r3
 80020b4:	4a1c      	ldr	r2, [pc, #112]	; (8002128 <USART3_IRQHandler+0x118>)
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	5453      	strb	r3, [r2, r1]
				if(wp == 31) stateFrame = 5;
 80020ba:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <USART3_IRQHandler+0x114>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2b1f      	cmp	r3, #31
 80020c0:	d119      	bne.n	80020f6 <USART3_IRQHandler+0xe6>
 80020c2:	4b17      	ldr	r3, [pc, #92]	; (8002120 <USART3_IRQHandler+0x110>)
 80020c4:	2205      	movs	r2, #5
 80020c6:	701a      	strb	r2, [r3, #0]
		break;
 80020c8:	e015      	b.n	80020f6 <USART3_IRQHandler+0xe6>
		case 5:
			if(data == '!')
 80020ca:	79fb      	ldrb	r3, [r7, #7]
 80020cc:	2b21      	cmp	r3, #33	; 0x21
 80020ce:	d10c      	bne.n	80020ea <USART3_IRQHandler+0xda>
			{
				bufReceive[wp]=data;
 80020d0:	4b14      	ldr	r3, [pc, #80]	; (8002124 <USART3_IRQHandler+0x114>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	4619      	mov	r1, r3
 80020d6:	4a14      	ldr	r2, [pc, #80]	; (8002128 <USART3_IRQHandler+0x118>)
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	5453      	strb	r3, [r2, r1]
				stateFrame = 1;
 80020dc:	4b10      	ldr	r3, [pc, #64]	; (8002120 <USART3_IRQHandler+0x110>)
 80020de:	2201      	movs	r2, #1
 80020e0:	701a      	strb	r2, [r3, #0]
				receivedMessageFromUSART = 1;
 80020e2:	4b12      	ldr	r3, [pc, #72]	; (800212c <USART3_IRQHandler+0x11c>)
 80020e4:	2201      	movs	r2, #1
 80020e6:	701a      	strb	r2, [r3, #0]
			}
			else stateFrame = 1;
		break;
 80020e8:	e006      	b.n	80020f8 <USART3_IRQHandler+0xe8>
			else stateFrame = 1;
 80020ea:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <USART3_IRQHandler+0x110>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	701a      	strb	r2, [r3, #0]
		break;
 80020f0:	e002      	b.n	80020f8 <USART3_IRQHandler+0xe8>
		break;
 80020f2:	bf00      	nop
 80020f4:	e000      	b.n	80020f8 <USART3_IRQHandler+0xe8>
		break;
 80020f6:	bf00      	nop
		}
		if(wp++ >= sizeof(bufReceive)-1) wp = 0;
 80020f8:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <USART3_IRQHandler+0x114>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	1c5a      	adds	r2, r3, #1
 80020fe:	b2d1      	uxtb	r1, r2
 8002100:	4a08      	ldr	r2, [pc, #32]	; (8002124 <USART3_IRQHandler+0x114>)
 8002102:	7011      	strb	r1, [r2, #0]
 8002104:	2b1f      	cmp	r3, #31
 8002106:	d902      	bls.n	800210e <USART3_IRQHandler+0xfe>
 8002108:	4b06      	ldr	r3, [pc, #24]	; (8002124 <USART3_IRQHandler+0x114>)
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]
	{
		USART3_ReadMessage(wp);
		wp=0;
		USART3->ICR |= USART_ICR_IDLECF;
	}*/
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40004800 	.word	0x40004800
 8002120:	20000008 	.word	0x20000008
 8002124:	200000d0 	.word	0x200000d0
 8002128:	20000114 	.word	0x20000114
 800212c:	2000010c 	.word	0x2000010c

08002130 <USART3_SendChar>:


// Send a single char
void USART3_SendChar(unsigned char c)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	71fb      	strb	r3, [r7, #7]
	while(!(USART3->ISR & USART_ISR_TXE));	// wait for transmission complete
 800213a:	bf00      	nop
 800213c:	4b07      	ldr	r3, [pc, #28]	; (800215c <USART3_SendChar+0x2c>)
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0f9      	beq.n	800213c <USART3_SendChar+0xc>
	USART3->TDR = c; 						//load char to register
 8002148:	4b04      	ldr	r3, [pc, #16]	; (800215c <USART3_SendChar+0x2c>)
 800214a:	79fa      	ldrb	r2, [r7, #7]
 800214c:	b292      	uxth	r2, r2
 800214e:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	40004800 	.word	0x40004800

08002160 <USART3_SendData>:

// Send string from uint8_t array
void USART3_SendData(float *var, unsigned char *buf, char len)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	4613      	mov	r3, r2
 800216c:	71fb      	strb	r3, [r7, #7]
	dataToBuffer(var,buf);
 800216e:	68b9      	ldr	r1, [r7, #8]
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f7ff ff1b 	bl	8001fac <dataToBuffer>
	for(i=0;i<len;i++)
 8002176:	4b0e      	ldr	r3, [pc, #56]	; (80021b0 <USART3_SendData+0x50>)
 8002178:	2200      	movs	r2, #0
 800217a:	701a      	strb	r2, [r3, #0]
 800217c:	e00e      	b.n	800219c <USART3_SendData+0x3c>
	{
		USART3_SendChar(buf[i]);
 800217e:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <USART3_SendData+0x50>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	461a      	mov	r2, r3
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	4413      	add	r3, r2
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff ffd0 	bl	8002130 <USART3_SendChar>
	for(i=0;i<len;i++)
 8002190:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <USART3_SendData+0x50>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	3301      	adds	r3, #1
 8002196:	b2da      	uxtb	r2, r3
 8002198:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <USART3_SendData+0x50>)
 800219a:	701a      	strb	r2, [r3, #0]
 800219c:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <USART3_SendData+0x50>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	79fa      	ldrb	r2, [r7, #7]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d8eb      	bhi.n	800217e <USART3_SendData+0x1e>
	}
}
 80021a6:	bf00      	nop
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	200000d1 	.word	0x200000d1

080021b4 <main>:

float varToSend[]={0,0,0};


int main(void)
{
 80021b4:	b5b0      	push	{r4, r5, r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af02      	add	r7, sp, #8
	/*Init flags */

	/*Init peripherials */
	SysClockHSI_Init();
 80021ba:	f7ff f973 	bl	80014a4 <SysClockHSI_Init>
	SysTickInit();
 80021be:	f7ff fe47 	bl	8001e50 <SysTickInit>
	USART3_Init();
 80021c2:	f7ff feaf 	bl	8001f24 <USART3_Init>
	LedInit();
 80021c6:	f7ff f863 	bl	8001290 <LedInit>
	ServoInit();
 80021ca:	f7ff f9c7 	bl	800155c <ServoInit>
	ButtonsInit();
 80021ce:	f7fe fd01 	bl	8000bd4 <ButtonsInit>

	/* Check witch */
	if(GPIOE->IDR & GPIO_IDR_ID7) autoMode = 0;	// check switch position
 80021d2:	4b9a      	ldr	r3, [pc, #616]	; (800243c <main+0x288>)
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <main+0x32>
 80021de:	4b98      	ldr	r3, [pc, #608]	; (8002440 <main+0x28c>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]
 80021e4:	e002      	b.n	80021ec <main+0x38>
	else autoMode = 1;
 80021e6:	4b96      	ldr	r3, [pc, #600]	; (8002440 <main+0x28c>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  while (1)
  {
	// TESTING
	if(autoMode)
 80021ec:	4b94      	ldr	r3, [pc, #592]	; (8002440 <main+0x28c>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 8085 	beq.w	8002302 <main+0x14e>
	{

	if(timeElapsed(500,previousTime))
 80021f8:	4b92      	ldr	r3, [pc, #584]	; (8002444 <main+0x290>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4619      	mov	r1, r3
 80021fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002202:	f7ff fe5f 	bl	8001ec4 <timeElapsed>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0ef      	beq.n	80021ec <main+0x38>
	 {
		SunCalculatePosition(timezone,dayOfYear,hr,mn,sc,longitude,latitude);
 800220c:	4b8e      	ldr	r3, [pc, #568]	; (8002448 <main+0x294>)
 800220e:	7818      	ldrb	r0, [r3, #0]
 8002210:	4b8e      	ldr	r3, [pc, #568]	; (800244c <main+0x298>)
 8002212:	6819      	ldr	r1, [r3, #0]
 8002214:	4b8e      	ldr	r3, [pc, #568]	; (8002450 <main+0x29c>)
 8002216:	781c      	ldrb	r4, [r3, #0]
 8002218:	4b8e      	ldr	r3, [pc, #568]	; (8002454 <main+0x2a0>)
 800221a:	781d      	ldrb	r5, [r3, #0]
 800221c:	4b8e      	ldr	r3, [pc, #568]	; (8002458 <main+0x2a4>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	4a8e      	ldr	r2, [pc, #568]	; (800245c <main+0x2a8>)
 8002222:	edd2 7a00 	vldr	s15, [r2]
 8002226:	4a8e      	ldr	r2, [pc, #568]	; (8002460 <main+0x2ac>)
 8002228:	ed92 7a00 	vldr	s14, [r2]
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	eef0 0a47 	vmov.f32	s1, s14
 8002232:	eeb0 0a67 	vmov.f32	s0, s15
 8002236:	462b      	mov	r3, r5
 8002238:	4622      	mov	r2, r4
 800223a:	f7ff fa61 	bl	8001700 <SunCalculatePosition>
		LedWrite(LED_G,TOG);
 800223e:	2102      	movs	r1, #2
 8002240:	2002      	movs	r0, #2
 8002242:	f7ff f85b 	bl	80012fc <LedWrite>
		LedWrite(LED_R,OFF);
 8002246:	2100      	movs	r1, #0
 8002248:	2001      	movs	r0, #1
 800224a:	f7ff f857 	bl	80012fc <LedWrite>

	  	angleHorizontal = SunGetCurrentAzimuth();
 800224e:	f7ff fde3 	bl	8001e18 <SunGetCurrentAzimuth>
 8002252:	eef0 7a40 	vmov.f32	s15, s0
 8002256:	4b83      	ldr	r3, [pc, #524]	; (8002464 <main+0x2b0>)
 8002258:	edc3 7a00 	vstr	s15, [r3]
	  	angleVertical = SunGetCurrentZenith();
 800225c:	f7ff fdea 	bl	8001e34 <SunGetCurrentZenith>
 8002260:	eef0 7a40 	vmov.f32	s15, s0
 8002264:	4b80      	ldr	r3, [pc, #512]	; (8002468 <main+0x2b4>)
 8002266:	edc3 7a00 	vstr	s15, [r3]
	  	angleHorizontal = angleHorizontal- 90.0;
 800226a:	4b7e      	ldr	r3, [pc, #504]	; (8002464 <main+0x2b0>)
 800226c:	edd3 7a00 	vldr	s15, [r3]
 8002270:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800246c <main+0x2b8>
 8002274:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002278:	4b7a      	ldr	r3, [pc, #488]	; (8002464 <main+0x2b0>)
 800227a:	edc3 7a00 	vstr	s15, [r3]

	  	ServoSetAngleHorizontal(angleHorizontal);
 800227e:	4b79      	ldr	r3, [pc, #484]	; (8002464 <main+0x2b0>)
 8002280:	edd3 7a00 	vldr	s15, [r3]
 8002284:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002288:	ee17 0a90 	vmov	r0, s15
 800228c:	f7ff f9c8 	bl	8001620 <ServoSetAngleHorizontal>
	  	ServoSetAngleVertical(angleVertical);
 8002290:	4b75      	ldr	r3, [pc, #468]	; (8002468 <main+0x2b4>)
 8002292:	edd3 7a00 	vldr	s15, [r3]
 8002296:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800229a:	ee17 0a90 	vmov	r0, s15
 800229e:	f7ff f9f7 	bl	8001690 <ServoSetAngleVertical>
	  	varToSend[0]=SunGetCurrentAzimuth();
 80022a2:	f7ff fdb9 	bl	8001e18 <SunGetCurrentAzimuth>
 80022a6:	eef0 7a40 	vmov.f32	s15, s0
 80022aa:	4b71      	ldr	r3, [pc, #452]	; (8002470 <main+0x2bc>)
 80022ac:	edc3 7a00 	vstr	s15, [r3]
	  	varToSend[1]=SunGetCurrentZenith();
 80022b0:	f7ff fdc0 	bl	8001e34 <SunGetCurrentZenith>
 80022b4:	eef0 7a40 	vmov.f32	s15, s0
 80022b8:	4b6d      	ldr	r3, [pc, #436]	; (8002470 <main+0x2bc>)
 80022ba:	edc3 7a01 	vstr	s15, [r3, #4]
	  	varToSend[2]=(float)hr;
 80022be:	4b64      	ldr	r3, [pc, #400]	; (8002450 <main+0x29c>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	ee07 3a90 	vmov	s15, r3
 80022c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022ca:	4b69      	ldr	r3, [pc, #420]	; (8002470 <main+0x2bc>)
 80022cc:	edc3 7a02 	vstr	s15, [r3, #8]
	  	USART3_SendData(varToSend,bufSend,(char)sizeof(bufSend));
 80022d0:	220c      	movs	r2, #12
 80022d2:	4968      	ldr	r1, [pc, #416]	; (8002474 <main+0x2c0>)
 80022d4:	4866      	ldr	r0, [pc, #408]	; (8002470 <main+0x2bc>)
 80022d6:	f7ff ff43 	bl	8002160 <USART3_SendData>
	  	//USART3_SendChar('\n');
	  	hr +=1;
 80022da:	4b5d      	ldr	r3, [pc, #372]	; (8002450 <main+0x29c>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	3301      	adds	r3, #1
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	4b5b      	ldr	r3, [pc, #364]	; (8002450 <main+0x29c>)
 80022e4:	701a      	strb	r2, [r3, #0]
	  	if(hr==23) hr = 0;
 80022e6:	4b5a      	ldr	r3, [pc, #360]	; (8002450 <main+0x29c>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b17      	cmp	r3, #23
 80022ec:	d102      	bne.n	80022f4 <main+0x140>
 80022ee:	4b58      	ldr	r3, [pc, #352]	; (8002450 <main+0x29c>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	701a      	strb	r2, [r3, #0]
	  	previousTime = millis();
 80022f4:	f7ff fdda 	bl	8001eac <millis>
 80022f8:	4603      	mov	r3, r0
 80022fa:	461a      	mov	r2, r3
 80022fc:	4b51      	ldr	r3, [pc, #324]	; (8002444 <main+0x290>)
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	e774      	b.n	80021ec <main+0x38>
	 }
	 }
	 else
	 {
		 LedWrite(LED_R,ON);
 8002302:	2101      	movs	r1, #1
 8002304:	2001      	movs	r0, #1
 8002306:	f7fe fff9 	bl	80012fc <LedWrite>
		 LedWrite(LED_G,OFF);
 800230a:	2100      	movs	r1, #0
 800230c:	2002      	movs	r0, #2
 800230e:	f7fe fff5 	bl	80012fc <LedWrite>
		 if(ButtonUpRead() == 1) {LedWrite(LED2,TOG); angleVertical +=5;}
 8002312:	f7fe fcf5 	bl	8000d00 <ButtonUpRead>
 8002316:	4603      	mov	r3, r0
 8002318:	2b01      	cmp	r3, #1
 800231a:	d10d      	bne.n	8002338 <main+0x184>
 800231c:	2102      	movs	r1, #2
 800231e:	2080      	movs	r0, #128	; 0x80
 8002320:	f7fe ffec 	bl	80012fc <LedWrite>
 8002324:	4b50      	ldr	r3, [pc, #320]	; (8002468 <main+0x2b4>)
 8002326:	edd3 7a00 	vldr	s15, [r3]
 800232a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800232e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002332:	4b4d      	ldr	r3, [pc, #308]	; (8002468 <main+0x2b4>)
 8002334:	edc3 7a00 	vstr	s15, [r3]
		 if(ButtonDownRead() == 1) {LedWrite(LED2,TOG); angleVertical -=5;}
 8002338:	f7fe fd94 	bl	8000e64 <ButtonDownRead>
 800233c:	4603      	mov	r3, r0
 800233e:	2b01      	cmp	r3, #1
 8002340:	d10d      	bne.n	800235e <main+0x1aa>
 8002342:	2102      	movs	r1, #2
 8002344:	2080      	movs	r0, #128	; 0x80
 8002346:	f7fe ffd9 	bl	80012fc <LedWrite>
 800234a:	4b47      	ldr	r3, [pc, #284]	; (8002468 <main+0x2b4>)
 800234c:	edd3 7a00 	vldr	s15, [r3]
 8002350:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002354:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002358:	4b43      	ldr	r3, [pc, #268]	; (8002468 <main+0x2b4>)
 800235a:	edc3 7a00 	vstr	s15, [r3]
		 if(ButtonLeftRead() == 1) {LedWrite(LED3,TOG); angleHorizontal +=5;}
 800235e:	f7fe fe33 	bl	8000fc8 <ButtonLeftRead>
 8002362:	4603      	mov	r3, r0
 8002364:	2b01      	cmp	r3, #1
 8002366:	d10e      	bne.n	8002386 <main+0x1d2>
 8002368:	2102      	movs	r1, #2
 800236a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800236e:	f7fe ffc5 	bl	80012fc <LedWrite>
 8002372:	4b3c      	ldr	r3, [pc, #240]	; (8002464 <main+0x2b0>)
 8002374:	edd3 7a00 	vldr	s15, [r3]
 8002378:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800237c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002380:	4b38      	ldr	r3, [pc, #224]	; (8002464 <main+0x2b0>)
 8002382:	edc3 7a00 	vstr	s15, [r3]
		 if(ButtonRightRead() == 1) {LedWrite(LED3,TOG); angleHorizontal -=5;}
 8002386:	f7fe fed1 	bl	800112c <ButtonRightRead>
 800238a:	4603      	mov	r3, r0
 800238c:	2b01      	cmp	r3, #1
 800238e:	d10e      	bne.n	80023ae <main+0x1fa>
 8002390:	2102      	movs	r1, #2
 8002392:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002396:	f7fe ffb1 	bl	80012fc <LedWrite>
 800239a:	4b32      	ldr	r3, [pc, #200]	; (8002464 <main+0x2b0>)
 800239c:	edd3 7a00 	vldr	s15, [r3]
 80023a0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80023a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023a8:	4b2e      	ldr	r3, [pc, #184]	; (8002464 <main+0x2b0>)
 80023aa:	edc3 7a00 	vstr	s15, [r3]

		 // Limits
		 if(angleVertical > 90) angleVertical = 90;
 80023ae:	4b2e      	ldr	r3, [pc, #184]	; (8002468 <main+0x2b4>)
 80023b0:	edd3 7a00 	vldr	s15, [r3]
 80023b4:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800246c <main+0x2b8>
 80023b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c0:	dd03      	ble.n	80023ca <main+0x216>
 80023c2:	4b29      	ldr	r3, [pc, #164]	; (8002468 <main+0x2b4>)
 80023c4:	4a2c      	ldr	r2, [pc, #176]	; (8002478 <main+0x2c4>)
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	e00b      	b.n	80023e2 <main+0x22e>
		 else if(angleVertical < 0) angleVertical = 0;
 80023ca:	4b27      	ldr	r3, [pc, #156]	; (8002468 <main+0x2b4>)
 80023cc:	edd3 7a00 	vldr	s15, [r3]
 80023d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d8:	d503      	bpl.n	80023e2 <main+0x22e>
 80023da:	4b23      	ldr	r3, [pc, #140]	; (8002468 <main+0x2b4>)
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
		 if(angleHorizontal > 180) angleHorizontal = 180;
 80023e2:	4b20      	ldr	r3, [pc, #128]	; (8002464 <main+0x2b0>)
 80023e4:	edd3 7a00 	vldr	s15, [r3]
 80023e8:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800247c <main+0x2c8>
 80023ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f4:	dd03      	ble.n	80023fe <main+0x24a>
 80023f6:	4b1b      	ldr	r3, [pc, #108]	; (8002464 <main+0x2b0>)
 80023f8:	4a21      	ldr	r2, [pc, #132]	; (8002480 <main+0x2cc>)
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	e00b      	b.n	8002416 <main+0x262>
		 else if(angleHorizontal < 0) angleHorizontal = 0;
 80023fe:	4b19      	ldr	r3, [pc, #100]	; (8002464 <main+0x2b0>)
 8002400:	edd3 7a00 	vldr	s15, [r3]
 8002404:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800240c:	d503      	bpl.n	8002416 <main+0x262>
 800240e:	4b15      	ldr	r3, [pc, #84]	; (8002464 <main+0x2b0>)
 8002410:	f04f 0200 	mov.w	r2, #0
 8002414:	601a      	str	r2, [r3, #0]


		 ServoSetAngleHorizontal(angleHorizontal);
 8002416:	4b13      	ldr	r3, [pc, #76]	; (8002464 <main+0x2b0>)
 8002418:	edd3 7a00 	vldr	s15, [r3]
 800241c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002420:	ee17 0a90 	vmov	r0, s15
 8002424:	f7ff f8fc 	bl	8001620 <ServoSetAngleHorizontal>
		 ServoSetAngleVertical(angleVertical);
 8002428:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <main+0x2b4>)
 800242a:	edd3 7a00 	vldr	s15, [r3]
 800242e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002432:	ee17 0a90 	vmov	r0, s15
 8002436:	f7ff f92b 	bl	8001690 <ServoSetAngleVertical>
	if(autoMode)
 800243a:	e6d7      	b.n	80021ec <main+0x38>
 800243c:	48001000 	.word	0x48001000
 8002440:	200000f0 	.word	0x200000f0
 8002444:	200000d4 	.word	0x200000d4
 8002448:	20000014 	.word	0x20000014
 800244c:	20000018 	.word	0x20000018
 8002450:	200000e0 	.word	0x200000e0
 8002454:	200000e1 	.word	0x200000e1
 8002458:	200000e2 	.word	0x200000e2
 800245c:	2000000c 	.word	0x2000000c
 8002460:	20000010 	.word	0x20000010
 8002464:	200000dc 	.word	0x200000dc
 8002468:	200000d8 	.word	0x200000d8
 800246c:	42b40000 	.word	0x42b40000
 8002470:	200000e4 	.word	0x200000e4
 8002474:	20000100 	.word	0x20000100
 8002478:	42b40000 	.word	0x42b40000
 800247c:	43340000 	.word	0x43340000
 8002480:	43340000 	.word	0x43340000

08002484 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002484:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024bc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002488:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800248a:	e003      	b.n	8002494 <LoopCopyDataInit>

0800248c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800248c:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800248e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002490:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002492:	3104      	adds	r1, #4

08002494 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002494:	480b      	ldr	r0, [pc, #44]	; (80024c4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002496:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002498:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800249a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800249c:	d3f6      	bcc.n	800248c <CopyDataInit>
	ldr	r2, =_sbss
 800249e:	4a0b      	ldr	r2, [pc, #44]	; (80024cc <LoopForever+0x12>)
	b	LoopFillZerobss
 80024a0:	e002      	b.n	80024a8 <LoopFillZerobss>

080024a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80024a2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80024a4:	f842 3b04 	str.w	r3, [r2], #4

080024a8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80024a8:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <LoopForever+0x16>)
	cmp	r2, r3
 80024aa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80024ac:	d3f9      	bcc.n	80024a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024ae:	f000 f813 	bl	80024d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024b2:	f000 f847 	bl	8002544 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024b6:	f7ff fe7d 	bl	80021b4 <main>

080024ba <LoopForever>:

LoopForever:
    b LoopForever
 80024ba:	e7fe      	b.n	80024ba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80024bc:	20040000 	.word	0x20040000
	ldr	r3, =_sidata
 80024c0:	08003ac0 	.word	0x08003ac0
	ldr	r0, =_sdata
 80024c4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80024c8:	20000084 	.word	0x20000084
	ldr	r2, =_sbss
 80024cc:	20000084 	.word	0x20000084
	ldr	r3, = _ebss
 80024d0:	20000138 	.word	0x20000138

080024d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024d4:	e7fe      	b.n	80024d4 <ADC1_2_IRQHandler>
	...

080024d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024dc:	4a17      	ldr	r2, [pc, #92]	; (800253c <SystemInit+0x64>)
 80024de:	4b17      	ldr	r3, [pc, #92]	; (800253c <SystemInit+0x64>)
 80024e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80024ec:	4a14      	ldr	r2, [pc, #80]	; (8002540 <SystemInit+0x68>)
 80024ee:	4b14      	ldr	r3, [pc, #80]	; (8002540 <SystemInit+0x68>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80024f8:	4b11      	ldr	r3, [pc, #68]	; (8002540 <SystemInit+0x68>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80024fe:	4a10      	ldr	r2, [pc, #64]	; (8002540 <SystemInit+0x68>)
 8002500:	4b0f      	ldr	r3, [pc, #60]	; (8002540 <SystemInit+0x68>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002508:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800250c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800250e:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <SystemInit+0x68>)
 8002510:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002514:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002516:	4a0a      	ldr	r2, [pc, #40]	; (8002540 <SystemInit+0x68>)
 8002518:	4b09      	ldr	r3, [pc, #36]	; (8002540 <SystemInit+0x68>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002520:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002522:	4b07      	ldr	r3, [pc, #28]	; (8002540 <SystemInit+0x68>)
 8002524:	2200      	movs	r2, #0
 8002526:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002528:	4b04      	ldr	r3, [pc, #16]	; (800253c <SystemInit+0x64>)
 800252a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800252e:	609a      	str	r2, [r3, #8]
#endif
}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	e000ed00 	.word	0xe000ed00
 8002540:	40021000 	.word	0x40021000

08002544 <__libc_init_array>:
 8002544:	b570      	push	{r4, r5, r6, lr}
 8002546:	4e0d      	ldr	r6, [pc, #52]	; (800257c <__libc_init_array+0x38>)
 8002548:	4c0d      	ldr	r4, [pc, #52]	; (8002580 <__libc_init_array+0x3c>)
 800254a:	1ba4      	subs	r4, r4, r6
 800254c:	10a4      	asrs	r4, r4, #2
 800254e:	2500      	movs	r5, #0
 8002550:	42a5      	cmp	r5, r4
 8002552:	d109      	bne.n	8002568 <__libc_init_array+0x24>
 8002554:	4e0b      	ldr	r6, [pc, #44]	; (8002584 <__libc_init_array+0x40>)
 8002556:	4c0c      	ldr	r4, [pc, #48]	; (8002588 <__libc_init_array+0x44>)
 8002558:	f001 f8aa 	bl	80036b0 <_init>
 800255c:	1ba4      	subs	r4, r4, r6
 800255e:	10a4      	asrs	r4, r4, #2
 8002560:	2500      	movs	r5, #0
 8002562:	42a5      	cmp	r5, r4
 8002564:	d105      	bne.n	8002572 <__libc_init_array+0x2e>
 8002566:	bd70      	pop	{r4, r5, r6, pc}
 8002568:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800256c:	4798      	blx	r3
 800256e:	3501      	adds	r5, #1
 8002570:	e7ee      	b.n	8002550 <__libc_init_array+0xc>
 8002572:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002576:	4798      	blx	r3
 8002578:	3501      	adds	r5, #1
 800257a:	e7f2      	b.n	8002562 <__libc_init_array+0x1e>
 800257c:	08003ab8 	.word	0x08003ab8
 8002580:	08003ab8 	.word	0x08003ab8
 8002584:	08003ab8 	.word	0x08003ab8
 8002588:	08003abc 	.word	0x08003abc

0800258c <cosf>:
 800258c:	ee10 3a10 	vmov	r3, s0
 8002590:	b507      	push	{r0, r1, r2, lr}
 8002592:	4a1c      	ldr	r2, [pc, #112]	; (8002604 <cosf+0x78>)
 8002594:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002598:	4293      	cmp	r3, r2
 800259a:	dc04      	bgt.n	80025a6 <cosf+0x1a>
 800259c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8002608 <cosf+0x7c>
 80025a0:	f000 fcba 	bl	8002f18 <__kernel_cosf>
 80025a4:	e004      	b.n	80025b0 <cosf+0x24>
 80025a6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80025aa:	db04      	blt.n	80025b6 <cosf+0x2a>
 80025ac:	ee30 0a40 	vsub.f32	s0, s0, s0
 80025b0:	b003      	add	sp, #12
 80025b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80025b6:	4668      	mov	r0, sp
 80025b8:	f000 fb3a 	bl	8002c30 <__ieee754_rem_pio2f>
 80025bc:	f000 0003 	and.w	r0, r0, #3
 80025c0:	2801      	cmp	r0, #1
 80025c2:	d007      	beq.n	80025d4 <cosf+0x48>
 80025c4:	2802      	cmp	r0, #2
 80025c6:	d00e      	beq.n	80025e6 <cosf+0x5a>
 80025c8:	b9a0      	cbnz	r0, 80025f4 <cosf+0x68>
 80025ca:	eddd 0a01 	vldr	s1, [sp, #4]
 80025ce:	ed9d 0a00 	vldr	s0, [sp]
 80025d2:	e7e5      	b.n	80025a0 <cosf+0x14>
 80025d4:	eddd 0a01 	vldr	s1, [sp, #4]
 80025d8:	ed9d 0a00 	vldr	s0, [sp]
 80025dc:	f000 ff58 	bl	8003490 <__kernel_sinf>
 80025e0:	eeb1 0a40 	vneg.f32	s0, s0
 80025e4:	e7e4      	b.n	80025b0 <cosf+0x24>
 80025e6:	eddd 0a01 	vldr	s1, [sp, #4]
 80025ea:	ed9d 0a00 	vldr	s0, [sp]
 80025ee:	f000 fc93 	bl	8002f18 <__kernel_cosf>
 80025f2:	e7f5      	b.n	80025e0 <cosf+0x54>
 80025f4:	2001      	movs	r0, #1
 80025f6:	eddd 0a01 	vldr	s1, [sp, #4]
 80025fa:	ed9d 0a00 	vldr	s0, [sp]
 80025fe:	f000 ff47 	bl	8003490 <__kernel_sinf>
 8002602:	e7d5      	b.n	80025b0 <cosf+0x24>
 8002604:	3f490fd8 	.word	0x3f490fd8
 8002608:	00000000 	.word	0x00000000

0800260c <sinf>:
 800260c:	ee10 3a10 	vmov	r3, s0
 8002610:	b507      	push	{r0, r1, r2, lr}
 8002612:	4a1d      	ldr	r2, [pc, #116]	; (8002688 <sinf+0x7c>)
 8002614:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002618:	4293      	cmp	r3, r2
 800261a:	dc05      	bgt.n	8002628 <sinf+0x1c>
 800261c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800268c <sinf+0x80>
 8002620:	2000      	movs	r0, #0
 8002622:	f000 ff35 	bl	8003490 <__kernel_sinf>
 8002626:	e004      	b.n	8002632 <sinf+0x26>
 8002628:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800262c:	db04      	blt.n	8002638 <sinf+0x2c>
 800262e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8002632:	b003      	add	sp, #12
 8002634:	f85d fb04 	ldr.w	pc, [sp], #4
 8002638:	4668      	mov	r0, sp
 800263a:	f000 faf9 	bl	8002c30 <__ieee754_rem_pio2f>
 800263e:	f000 0003 	and.w	r0, r0, #3
 8002642:	2801      	cmp	r0, #1
 8002644:	d008      	beq.n	8002658 <sinf+0x4c>
 8002646:	2802      	cmp	r0, #2
 8002648:	d00d      	beq.n	8002666 <sinf+0x5a>
 800264a:	b9b0      	cbnz	r0, 800267a <sinf+0x6e>
 800264c:	2001      	movs	r0, #1
 800264e:	eddd 0a01 	vldr	s1, [sp, #4]
 8002652:	ed9d 0a00 	vldr	s0, [sp]
 8002656:	e7e4      	b.n	8002622 <sinf+0x16>
 8002658:	eddd 0a01 	vldr	s1, [sp, #4]
 800265c:	ed9d 0a00 	vldr	s0, [sp]
 8002660:	f000 fc5a 	bl	8002f18 <__kernel_cosf>
 8002664:	e7e5      	b.n	8002632 <sinf+0x26>
 8002666:	2001      	movs	r0, #1
 8002668:	eddd 0a01 	vldr	s1, [sp, #4]
 800266c:	ed9d 0a00 	vldr	s0, [sp]
 8002670:	f000 ff0e 	bl	8003490 <__kernel_sinf>
 8002674:	eeb1 0a40 	vneg.f32	s0, s0
 8002678:	e7db      	b.n	8002632 <sinf+0x26>
 800267a:	eddd 0a01 	vldr	s1, [sp, #4]
 800267e:	ed9d 0a00 	vldr	s0, [sp]
 8002682:	f000 fc49 	bl	8002f18 <__kernel_cosf>
 8002686:	e7f5      	b.n	8002674 <sinf+0x68>
 8002688:	3f490fd8 	.word	0x3f490fd8
 800268c:	00000000 	.word	0x00000000

08002690 <fmod>:
 8002690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002694:	ed2d 8b02 	vpush	{d8}
 8002698:	b08b      	sub	sp, #44	; 0x2c
 800269a:	ec55 4b10 	vmov	r4, r5, d0
 800269e:	ec57 6b11 	vmov	r6, r7, d1
 80026a2:	f000 f8b1 	bl	8002808 <__ieee754_fmod>
 80026a6:	4b2a      	ldr	r3, [pc, #168]	; (8002750 <fmod+0xc0>)
 80026a8:	eeb0 8a40 	vmov.f32	s16, s0
 80026ac:	eef0 8a60 	vmov.f32	s17, s1
 80026b0:	f993 8000 	ldrsb.w	r8, [r3]
 80026b4:	f1b8 3fff 	cmp.w	r8, #4294967295
 80026b8:	d030      	beq.n	800271c <fmod+0x8c>
 80026ba:	4632      	mov	r2, r6
 80026bc:	463b      	mov	r3, r7
 80026be:	4630      	mov	r0, r6
 80026c0:	4639      	mov	r1, r7
 80026c2:	f7fe f9e7 	bl	8000a94 <__aeabi_dcmpun>
 80026c6:	bb48      	cbnz	r0, 800271c <fmod+0x8c>
 80026c8:	4622      	mov	r2, r4
 80026ca:	462b      	mov	r3, r5
 80026cc:	4620      	mov	r0, r4
 80026ce:	4629      	mov	r1, r5
 80026d0:	f7fe f9e0 	bl	8000a94 <__aeabi_dcmpun>
 80026d4:	4681      	mov	r9, r0
 80026d6:	bb08      	cbnz	r0, 800271c <fmod+0x8c>
 80026d8:	2200      	movs	r2, #0
 80026da:	2300      	movs	r3, #0
 80026dc:	4630      	mov	r0, r6
 80026de:	4639      	mov	r1, r7
 80026e0:	f7fe f9a6 	bl	8000a30 <__aeabi_dcmpeq>
 80026e4:	b1d0      	cbz	r0, 800271c <fmod+0x8c>
 80026e6:	2301      	movs	r3, #1
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	4b1a      	ldr	r3, [pc, #104]	; (8002754 <fmod+0xc4>)
 80026ec:	9301      	str	r3, [sp, #4]
 80026ee:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80026f2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80026f6:	f8cd 9020 	str.w	r9, [sp, #32]
 80026fa:	f1b8 0f00 	cmp.w	r8, #0
 80026fe:	d116      	bne.n	800272e <fmod+0x9e>
 8002700:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002704:	4668      	mov	r0, sp
 8002706:	f000 ff0b 	bl	8003520 <matherr>
 800270a:	b1d8      	cbz	r0, 8002744 <fmod+0xb4>
 800270c:	9b08      	ldr	r3, [sp, #32]
 800270e:	b11b      	cbz	r3, 8002718 <fmod+0x88>
 8002710:	f000 ffc8 	bl	80036a4 <__errno>
 8002714:	9b08      	ldr	r3, [sp, #32]
 8002716:	6003      	str	r3, [r0, #0]
 8002718:	ed9d 8b06 	vldr	d8, [sp, #24]
 800271c:	eeb0 0a48 	vmov.f32	s0, s16
 8002720:	eef0 0a68 	vmov.f32	s1, s17
 8002724:	b00b      	add	sp, #44	; 0x2c
 8002726:	ecbd 8b02 	vpop	{d8}
 800272a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800272e:	2200      	movs	r2, #0
 8002730:	2300      	movs	r3, #0
 8002732:	4610      	mov	r0, r2
 8002734:	4619      	mov	r1, r3
 8002736:	f7fe f83d 	bl	80007b4 <__aeabi_ddiv>
 800273a:	f1b8 0f02 	cmp.w	r8, #2
 800273e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002742:	d1df      	bne.n	8002704 <fmod+0x74>
 8002744:	f000 ffae 	bl	80036a4 <__errno>
 8002748:	2321      	movs	r3, #33	; 0x21
 800274a:	6003      	str	r3, [r0, #0]
 800274c:	e7de      	b.n	800270c <fmod+0x7c>
 800274e:	bf00      	nop
 8002750:	2000001c 	.word	0x2000001c
 8002754:	080036c8 	.word	0x080036c8

08002758 <acosf>:
 8002758:	b510      	push	{r4, lr}
 800275a:	ed2d 8b02 	vpush	{d8}
 800275e:	4c27      	ldr	r4, [pc, #156]	; (80027fc <acosf+0xa4>)
 8002760:	b08a      	sub	sp, #40	; 0x28
 8002762:	eeb0 8a40 	vmov.f32	s16, s0
 8002766:	f000 f967 	bl	8002a38 <__ieee754_acosf>
 800276a:	f994 3000 	ldrsb.w	r3, [r4]
 800276e:	3301      	adds	r3, #1
 8002770:	eef0 8a40 	vmov.f32	s17, s0
 8002774:	d03c      	beq.n	80027f0 <acosf+0x98>
 8002776:	eeb4 8a48 	vcmp.f32	s16, s16
 800277a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800277e:	d637      	bvs.n	80027f0 <acosf+0x98>
 8002780:	eeb0 0a48 	vmov.f32	s0, s16
 8002784:	f000 fed8 	bl	8003538 <fabsf>
 8002788:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800278c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002794:	dd2c      	ble.n	80027f0 <acosf+0x98>
 8002796:	2301      	movs	r3, #1
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	4b19      	ldr	r3, [pc, #100]	; (8002800 <acosf+0xa8>)
 800279c:	9301      	str	r3, [sp, #4]
 800279e:	ee18 0a10 	vmov	r0, s16
 80027a2:	2300      	movs	r3, #0
 80027a4:	9308      	str	r3, [sp, #32]
 80027a6:	f7fd fe87 	bl	80004b8 <__aeabi_f2d>
 80027aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80027ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80027b2:	4814      	ldr	r0, [pc, #80]	; (8002804 <acosf+0xac>)
 80027b4:	f000 feb8 	bl	8003528 <nan>
 80027b8:	f994 3000 	ldrsb.w	r3, [r4]
 80027bc:	2b02      	cmp	r3, #2
 80027be:	ed8d 0b06 	vstr	d0, [sp, #24]
 80027c2:	d104      	bne.n	80027ce <acosf+0x76>
 80027c4:	f000 ff6e 	bl	80036a4 <__errno>
 80027c8:	2321      	movs	r3, #33	; 0x21
 80027ca:	6003      	str	r3, [r0, #0]
 80027cc:	e004      	b.n	80027d8 <acosf+0x80>
 80027ce:	4668      	mov	r0, sp
 80027d0:	f000 fea6 	bl	8003520 <matherr>
 80027d4:	2800      	cmp	r0, #0
 80027d6:	d0f5      	beq.n	80027c4 <acosf+0x6c>
 80027d8:	9b08      	ldr	r3, [sp, #32]
 80027da:	b11b      	cbz	r3, 80027e4 <acosf+0x8c>
 80027dc:	f000 ff62 	bl	80036a4 <__errno>
 80027e0:	9b08      	ldr	r3, [sp, #32]
 80027e2:	6003      	str	r3, [r0, #0]
 80027e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80027e8:	f7fe f98a 	bl	8000b00 <__aeabi_d2f>
 80027ec:	ee08 0a90 	vmov	s17, r0
 80027f0:	eeb0 0a68 	vmov.f32	s0, s17
 80027f4:	b00a      	add	sp, #40	; 0x28
 80027f6:	ecbd 8b02 	vpop	{d8}
 80027fa:	bd10      	pop	{r4, pc}
 80027fc:	2000001c 	.word	0x2000001c
 8002800:	080036cd 	.word	0x080036cd
 8002804:	080036cc 	.word	0x080036cc

08002808 <__ieee754_fmod>:
 8002808:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800280c:	ec53 2b11 	vmov	r2, r3, d1
 8002810:	ec57 6b10 	vmov	r6, r7, d0
 8002814:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8002818:	ea52 050e 	orrs.w	r5, r2, lr
 800281c:	ee10 9a10 	vmov	r9, s0
 8002820:	4639      	mov	r1, r7
 8002822:	ee10 4a10 	vmov	r4, s0
 8002826:	ee11 ca10 	vmov	ip, s2
 800282a:	4618      	mov	r0, r3
 800282c:	ee11 8a10 	vmov	r8, s2
 8002830:	d00c      	beq.n	800284c <__ieee754_fmod+0x44>
 8002832:	4d7a      	ldr	r5, [pc, #488]	; (8002a1c <__ieee754_fmod+0x214>)
 8002834:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
 8002838:	45aa      	cmp	sl, r5
 800283a:	dc07      	bgt.n	800284c <__ieee754_fmod+0x44>
 800283c:	4255      	negs	r5, r2
 800283e:	4315      	orrs	r5, r2
 8002840:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 8002a34 <__ieee754_fmod+0x22c>
 8002844:	ea4e 75d5 	orr.w	r5, lr, r5, lsr #31
 8002848:	455d      	cmp	r5, fp
 800284a:	d90d      	bls.n	8002868 <__ieee754_fmod+0x60>
 800284c:	4630      	mov	r0, r6
 800284e:	4639      	mov	r1, r7
 8002850:	f7fd fe86 	bl	8000560 <__aeabi_dmul>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	f7fd ffac 	bl	80007b4 <__aeabi_ddiv>
 800285c:	4606      	mov	r6, r0
 800285e:	460f      	mov	r7, r1
 8002860:	ec47 6b10 	vmov	d0, r6, r7
 8002864:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002868:	45f2      	cmp	sl, lr
 800286a:	f007 4500 	and.w	r5, r7, #2147483648	; 0x80000000
 800286e:	dc0a      	bgt.n	8002886 <__ieee754_fmod+0x7e>
 8002870:	dbf6      	blt.n	8002860 <__ieee754_fmod+0x58>
 8002872:	4296      	cmp	r6, r2
 8002874:	d3f4      	bcc.n	8002860 <__ieee754_fmod+0x58>
 8002876:	d106      	bne.n	8002886 <__ieee754_fmod+0x7e>
 8002878:	4a69      	ldr	r2, [pc, #420]	; (8002a20 <__ieee754_fmod+0x218>)
 800287a:	0fed      	lsrs	r5, r5, #31
 800287c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8002880:	e9d5 6700 	ldrd	r6, r7, [r5]
 8002884:	e7ec      	b.n	8002860 <__ieee754_fmod+0x58>
 8002886:	4b67      	ldr	r3, [pc, #412]	; (8002a24 <__ieee754_fmod+0x21c>)
 8002888:	459a      	cmp	sl, r3
 800288a:	dc48      	bgt.n	800291e <__ieee754_fmod+0x116>
 800288c:	f1ba 0f00 	cmp.w	sl, #0
 8002890:	d13c      	bne.n	800290c <__ieee754_fmod+0x104>
 8002892:	4e65      	ldr	r6, [pc, #404]	; (8002a28 <__ieee754_fmod+0x220>)
 8002894:	464a      	mov	r2, r9
 8002896:	2a00      	cmp	r2, #0
 8002898:	dc35      	bgt.n	8002906 <__ieee754_fmod+0xfe>
 800289a:	459e      	cmp	lr, r3
 800289c:	dc50      	bgt.n	8002940 <__ieee754_fmod+0x138>
 800289e:	f1be 0f00 	cmp.w	lr, #0
 80028a2:	d144      	bne.n	800292e <__ieee754_fmod+0x126>
 80028a4:	4a60      	ldr	r2, [pc, #384]	; (8002a28 <__ieee754_fmod+0x220>)
 80028a6:	4663      	mov	r3, ip
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	dc3d      	bgt.n	8002928 <__ieee754_fmod+0x120>
 80028ac:	4b5f      	ldr	r3, [pc, #380]	; (8002a2c <__ieee754_fmod+0x224>)
 80028ae:	429e      	cmp	r6, r3
 80028b0:	db4b      	blt.n	800294a <__ieee754_fmod+0x142>
 80028b2:	f3c1 0313 	ubfx	r3, r1, #0, #20
 80028b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ba:	495c      	ldr	r1, [pc, #368]	; (8002a2c <__ieee754_fmod+0x224>)
 80028bc:	428a      	cmp	r2, r1
 80028be:	db58      	blt.n	8002972 <__ieee754_fmod+0x16a>
 80028c0:	f3c0 0013 	ubfx	r0, r0, #0, #20
 80028c4:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 80028c8:	1ab6      	subs	r6, r6, r2
 80028ca:	1a19      	subs	r1, r3, r0
 80028cc:	2e00      	cmp	r6, #0
 80028ce:	d167      	bne.n	80029a0 <__ieee754_fmod+0x198>
 80028d0:	4544      	cmp	r4, r8
 80028d2:	bf38      	it	cc
 80028d4:	f101 31ff 	addcc.w	r1, r1, #4294967295
 80028d8:	2900      	cmp	r1, #0
 80028da:	bfa4      	itt	ge
 80028dc:	eba4 0408 	subge.w	r4, r4, r8
 80028e0:	460b      	movge	r3, r1
 80028e2:	ea53 0104 	orrs.w	r1, r3, r4
 80028e6:	d0c7      	beq.n	8002878 <__ieee754_fmod+0x70>
 80028e8:	494e      	ldr	r1, [pc, #312]	; (8002a24 <__ieee754_fmod+0x21c>)
 80028ea:	428b      	cmp	r3, r1
 80028ec:	dd6e      	ble.n	80029cc <__ieee754_fmod+0x1c4>
 80028ee:	494f      	ldr	r1, [pc, #316]	; (8002a2c <__ieee754_fmod+0x224>)
 80028f0:	428a      	cmp	r2, r1
 80028f2:	db71      	blt.n	80029d8 <__ieee754_fmod+0x1d0>
 80028f4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80028f8:	431d      	orrs	r5, r3
 80028fa:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 80028fe:	ea45 5702 	orr.w	r7, r5, r2, lsl #20
 8002902:	4626      	mov	r6, r4
 8002904:	e7ac      	b.n	8002860 <__ieee754_fmod+0x58>
 8002906:	3e01      	subs	r6, #1
 8002908:	0052      	lsls	r2, r2, #1
 800290a:	e7c4      	b.n	8002896 <__ieee754_fmod+0x8e>
 800290c:	4e47      	ldr	r6, [pc, #284]	; (8002a2c <__ieee754_fmod+0x224>)
 800290e:	ea4f 22ca 	mov.w	r2, sl, lsl #11
 8002912:	0052      	lsls	r2, r2, #1
 8002914:	2a00      	cmp	r2, #0
 8002916:	f106 36ff 	add.w	r6, r6, #4294967295
 800291a:	dcfa      	bgt.n	8002912 <__ieee754_fmod+0x10a>
 800291c:	e7bd      	b.n	800289a <__ieee754_fmod+0x92>
 800291e:	ea4f 562a 	mov.w	r6, sl, asr #20
 8002922:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8002926:	e7b8      	b.n	800289a <__ieee754_fmod+0x92>
 8002928:	3a01      	subs	r2, #1
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	e7bc      	b.n	80028a8 <__ieee754_fmod+0xa0>
 800292e:	4a3f      	ldr	r2, [pc, #252]	; (8002a2c <__ieee754_fmod+0x224>)
 8002930:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	f102 32ff 	add.w	r2, r2, #4294967295
 800293c:	dcfa      	bgt.n	8002934 <__ieee754_fmod+0x12c>
 800293e:	e7b5      	b.n	80028ac <__ieee754_fmod+0xa4>
 8002940:	ea4f 522e 	mov.w	r2, lr, asr #20
 8002944:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8002948:	e7b0      	b.n	80028ac <__ieee754_fmod+0xa4>
 800294a:	1b9c      	subs	r4, r3, r6
 800294c:	2c1f      	cmp	r4, #31
 800294e:	dc0a      	bgt.n	8002966 <__ieee754_fmod+0x15e>
 8002950:	f1c4 0320 	rsb	r3, r4, #32
 8002954:	fa0a fa04 	lsl.w	sl, sl, r4
 8002958:	fa29 f303 	lsr.w	r3, r9, r3
 800295c:	ea43 030a 	orr.w	r3, r3, sl
 8002960:	fa09 f404 	lsl.w	r4, r9, r4
 8002964:	e7a9      	b.n	80028ba <__ieee754_fmod+0xb2>
 8002966:	4b32      	ldr	r3, [pc, #200]	; (8002a30 <__ieee754_fmod+0x228>)
 8002968:	1b9b      	subs	r3, r3, r6
 800296a:	fa09 f303 	lsl.w	r3, r9, r3
 800296e:	2400      	movs	r4, #0
 8002970:	e7a3      	b.n	80028ba <__ieee754_fmod+0xb2>
 8002972:	eba1 0802 	sub.w	r8, r1, r2
 8002976:	f1b8 0f1f 	cmp.w	r8, #31
 800297a:	dc0a      	bgt.n	8002992 <__ieee754_fmod+0x18a>
 800297c:	f1c8 0020 	rsb	r0, r8, #32
 8002980:	fa0e fe08 	lsl.w	lr, lr, r8
 8002984:	fa2c f000 	lsr.w	r0, ip, r0
 8002988:	ea40 000e 	orr.w	r0, r0, lr
 800298c:	fa0c f808 	lsl.w	r8, ip, r8
 8002990:	e79a      	b.n	80028c8 <__ieee754_fmod+0xc0>
 8002992:	4827      	ldr	r0, [pc, #156]	; (8002a30 <__ieee754_fmod+0x228>)
 8002994:	1a80      	subs	r0, r0, r2
 8002996:	fa0c f000 	lsl.w	r0, ip, r0
 800299a:	f04f 0800 	mov.w	r8, #0
 800299e:	e793      	b.n	80028c8 <__ieee754_fmod+0xc0>
 80029a0:	4544      	cmp	r4, r8
 80029a2:	bf38      	it	cc
 80029a4:	f101 31ff 	addcc.w	r1, r1, #4294967295
 80029a8:	2900      	cmp	r1, #0
 80029aa:	da05      	bge.n	80029b8 <__ieee754_fmod+0x1b0>
 80029ac:	0fe1      	lsrs	r1, r4, #31
 80029ae:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80029b2:	0064      	lsls	r4, r4, #1
 80029b4:	3e01      	subs	r6, #1
 80029b6:	e788      	b.n	80028ca <__ieee754_fmod+0xc2>
 80029b8:	eba4 0408 	sub.w	r4, r4, r8
 80029bc:	ea51 0304 	orrs.w	r3, r1, r4
 80029c0:	f43f af5a 	beq.w	8002878 <__ieee754_fmod+0x70>
 80029c4:	0fe3      	lsrs	r3, r4, #31
 80029c6:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80029ca:	e7f2      	b.n	80029b2 <__ieee754_fmod+0x1aa>
 80029cc:	0fe0      	lsrs	r0, r4, #31
 80029ce:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80029d2:	0064      	lsls	r4, r4, #1
 80029d4:	3a01      	subs	r2, #1
 80029d6:	e788      	b.n	80028ea <__ieee754_fmod+0xe2>
 80029d8:	1a89      	subs	r1, r1, r2
 80029da:	2914      	cmp	r1, #20
 80029dc:	dc0a      	bgt.n	80029f4 <__ieee754_fmod+0x1ec>
 80029de:	f1c1 0220 	rsb	r2, r1, #32
 80029e2:	fa03 f202 	lsl.w	r2, r3, r2
 80029e6:	40cc      	lsrs	r4, r1
 80029e8:	4322      	orrs	r2, r4
 80029ea:	410b      	asrs	r3, r1
 80029ec:	ea43 0705 	orr.w	r7, r3, r5
 80029f0:	4616      	mov	r6, r2
 80029f2:	e735      	b.n	8002860 <__ieee754_fmod+0x58>
 80029f4:	291f      	cmp	r1, #31
 80029f6:	dc07      	bgt.n	8002a08 <__ieee754_fmod+0x200>
 80029f8:	fa24 f201 	lsr.w	r2, r4, r1
 80029fc:	f1c1 0120 	rsb	r1, r1, #32
 8002a00:	408b      	lsls	r3, r1
 8002a02:	431a      	orrs	r2, r3
 8002a04:	462b      	mov	r3, r5
 8002a06:	e7f1      	b.n	80029ec <__ieee754_fmod+0x1e4>
 8002a08:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8002a0c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8002a10:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8002a14:	32e2      	adds	r2, #226	; 0xe2
 8002a16:	fa43 f202 	asr.w	r2, r3, r2
 8002a1a:	e7f3      	b.n	8002a04 <__ieee754_fmod+0x1fc>
 8002a1c:	7fefffff 	.word	0x7fefffff
 8002a20:	080036d8 	.word	0x080036d8
 8002a24:	000fffff 	.word	0x000fffff
 8002a28:	fffffbed 	.word	0xfffffbed
 8002a2c:	fffffc02 	.word	0xfffffc02
 8002a30:	fffffbe2 	.word	0xfffffbe2
 8002a34:	7ff00000 	.word	0x7ff00000

08002a38 <__ieee754_acosf>:
 8002a38:	b508      	push	{r3, lr}
 8002a3a:	ee10 3a10 	vmov	r3, s0
 8002a3e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a42:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8002a46:	ed2d 8b0c 	vpush	{d8-d13}
 8002a4a:	d10a      	bne.n	8002a62 <__ieee754_acosf+0x2a>
 8002a4c:	ed9f 8a67 	vldr	s16, [pc, #412]	; 8002bec <__ieee754_acosf+0x1b4>
 8002a50:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8002bf0 <__ieee754_acosf+0x1b8>
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	bfd8      	it	le
 8002a58:	eeb0 0a48 	vmovle.f32	s0, s16
 8002a5c:	ecbd 8b0c 	vpop	{d8-d13}
 8002a60:	bd08      	pop	{r3, pc}
 8002a62:	dd04      	ble.n	8002a6e <__ieee754_acosf+0x36>
 8002a64:	ee30 8a40 	vsub.f32	s16, s0, s0
 8002a68:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8002a6c:	e7f6      	b.n	8002a5c <__ieee754_acosf+0x24>
 8002a6e:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8002a72:	da3e      	bge.n	8002af2 <__ieee754_acosf+0xba>
 8002a74:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8002a78:	f340 80b5 	ble.w	8002be6 <__ieee754_acosf+0x1ae>
 8002a7c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8002a80:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8002bf4 <__ieee754_acosf+0x1bc>
 8002a84:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8002bf8 <__ieee754_acosf+0x1c0>
 8002a88:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 8002bfc <__ieee754_acosf+0x1c4>
 8002a8c:	ed9f 8a5c 	vldr	s16, [pc, #368]	; 8002c00 <__ieee754_acosf+0x1c8>
 8002a90:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8002a94:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8002c04 <__ieee754_acosf+0x1cc>
 8002a98:	eee7 6a87 	vfma.f32	s13, s15, s14
 8002a9c:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8002c08 <__ieee754_acosf+0x1d0>
 8002aa0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8002aa4:	eddf 6a59 	vldr	s13, [pc, #356]	; 8002c0c <__ieee754_acosf+0x1d4>
 8002aa8:	eee7 6a87 	vfma.f32	s13, s15, s14
 8002aac:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002c10 <__ieee754_acosf+0x1d8>
 8002ab0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8002ab4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002c14 <__ieee754_acosf+0x1dc>
 8002ab8:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8002abc:	eddf 6a56 	vldr	s13, [pc, #344]	; 8002c18 <__ieee754_acosf+0x1e0>
 8002ac0:	eee7 6a86 	vfma.f32	s13, s15, s12
 8002ac4:	ed9f 6a55 	vldr	s12, [pc, #340]	; 8002c1c <__ieee754_acosf+0x1e4>
 8002ac8:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8002acc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ad0:	eee7 6a86 	vfma.f32	s13, s15, s12
 8002ad4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ad8:	eef0 7a66 	vmov.f32	s15, s13
 8002adc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002ae0:	eea0 8a66 	vfms.f32	s16, s0, s13
 8002ae4:	ee30 8a48 	vsub.f32	s16, s0, s16
 8002ae8:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8002c20 <__ieee754_acosf+0x1e8>
 8002aec:	ee30 0a48 	vsub.f32	s0, s0, s16
 8002af0:	e7b4      	b.n	8002a5c <__ieee754_acosf+0x24>
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	eddf da3f 	vldr	s27, [pc, #252]	; 8002bf4 <__ieee754_acosf+0x1bc>
 8002af8:	eddf ca3f 	vldr	s25, [pc, #252]	; 8002bf8 <__ieee754_acosf+0x1c0>
 8002afc:	ed9f ca41 	vldr	s24, [pc, #260]	; 8002c04 <__ieee754_acosf+0x1cc>
 8002b00:	eddf ba41 	vldr	s23, [pc, #260]	; 8002c08 <__ieee754_acosf+0x1d0>
 8002b04:	ed9f ba41 	vldr	s22, [pc, #260]	; 8002c0c <__ieee754_acosf+0x1d4>
 8002b08:	eddf 8a41 	vldr	s17, [pc, #260]	; 8002c10 <__ieee754_acosf+0x1d8>
 8002b0c:	ed9f da41 	vldr	s26, [pc, #260]	; 8002c14 <__ieee754_acosf+0x1dc>
 8002b10:	eddf aa3a 	vldr	s21, [pc, #232]	; 8002bfc <__ieee754_acosf+0x1c4>
 8002b14:	ed9f aa40 	vldr	s20, [pc, #256]	; 8002c18 <__ieee754_acosf+0x1e0>
 8002b18:	eddf 9a40 	vldr	s19, [pc, #256]	; 8002c1c <__ieee754_acosf+0x1e4>
 8002b1c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8002b20:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002b24:	da28      	bge.n	8002b78 <__ieee754_acosf+0x140>
 8002b26:	ee30 0a09 	vadd.f32	s0, s0, s18
 8002b2a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002b2e:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8002b32:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8002b36:	eea0 ca2c 	vfma.f32	s24, s0, s25
 8002b3a:	eea0 aa2a 	vfma.f32	s20, s0, s21
 8002b3e:	eee0 ba0c 	vfma.f32	s23, s0, s24
 8002b42:	eee0 9a0a 	vfma.f32	s19, s0, s20
 8002b46:	eea0 ba2b 	vfma.f32	s22, s0, s23
 8002b4a:	eea0 9a29 	vfma.f32	s18, s0, s19
 8002b4e:	eee0 8a0b 	vfma.f32	s17, s0, s22
 8002b52:	ee68 8a80 	vmul.f32	s17, s17, s0
 8002b56:	f000 f997 	bl	8002e88 <__ieee754_sqrtf>
 8002b5a:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8002b5e:	eddf 7a31 	vldr	s15, [pc, #196]	; 8002c24 <__ieee754_acosf+0x1ec>
 8002b62:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002b66:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002b6a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8002b6e:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8002c28 <__ieee754_acosf+0x1f0>
 8002b72:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8002b76:	e771      	b.n	8002a5c <__ieee754_acosf+0x24>
 8002b78:	ee39 8a40 	vsub.f32	s16, s18, s0
 8002b7c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8002b80:	eeb0 0a48 	vmov.f32	s0, s16
 8002b84:	f000 f980 	bl	8002e88 <__ieee754_sqrtf>
 8002b88:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8002b8c:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8002b90:	eea8 ca2c 	vfma.f32	s24, s16, s25
 8002b94:	eea8 aa2a 	vfma.f32	s20, s16, s21
 8002b98:	eee8 ba0c 	vfma.f32	s23, s16, s24
 8002b9c:	ee10 3a10 	vmov	r3, s0
 8002ba0:	eea8 ba2b 	vfma.f32	s22, s16, s23
 8002ba4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002ba8:	f023 030f 	bic.w	r3, r3, #15
 8002bac:	eee8 9a0a 	vfma.f32	s19, s16, s20
 8002bb0:	ee07 3a90 	vmov	s15, r3
 8002bb4:	eee8 8a0b 	vfma.f32	s17, s16, s22
 8002bb8:	eeb0 6a48 	vmov.f32	s12, s16
 8002bbc:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8002bc0:	eea8 9a29 	vfma.f32	s18, s16, s19
 8002bc4:	ee77 6a80 	vadd.f32	s13, s15, s0
 8002bc8:	ee68 8a88 	vmul.f32	s17, s17, s16
 8002bcc:	eeb0 7a40 	vmov.f32	s14, s0
 8002bd0:	ee86 0a26 	vdiv.f32	s0, s12, s13
 8002bd4:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8002bd8:	eea7 0a26 	vfma.f32	s0, s14, s13
 8002bdc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002be0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8002be4:	e73a      	b.n	8002a5c <__ieee754_acosf+0x24>
 8002be6:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8002c2c <__ieee754_acosf+0x1f4>
 8002bea:	e737      	b.n	8002a5c <__ieee754_acosf+0x24>
 8002bec:	40490fdb 	.word	0x40490fdb
 8002bf0:	00000000 	.word	0x00000000
 8002bf4:	3811ef08 	.word	0x3811ef08
 8002bf8:	3a4f7f04 	.word	0x3a4f7f04
 8002bfc:	bf303361 	.word	0xbf303361
 8002c00:	33a22168 	.word	0x33a22168
 8002c04:	bd241146 	.word	0xbd241146
 8002c08:	3e4e0aa8 	.word	0x3e4e0aa8
 8002c0c:	bea6b090 	.word	0xbea6b090
 8002c10:	3e2aaaab 	.word	0x3e2aaaab
 8002c14:	3d9dc62e 	.word	0x3d9dc62e
 8002c18:	4001572d 	.word	0x4001572d
 8002c1c:	c019d139 	.word	0xc019d139
 8002c20:	3fc90fda 	.word	0x3fc90fda
 8002c24:	b3a22168 	.word	0xb3a22168
 8002c28:	40490fda 	.word	0x40490fda
 8002c2c:	3fc90fdb 	.word	0x3fc90fdb

08002c30 <__ieee754_rem_pio2f>:
 8002c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c32:	ee10 6a10 	vmov	r6, s0
 8002c36:	4b86      	ldr	r3, [pc, #536]	; (8002e50 <__ieee754_rem_pio2f+0x220>)
 8002c38:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8002c3c:	429c      	cmp	r4, r3
 8002c3e:	b087      	sub	sp, #28
 8002c40:	4605      	mov	r5, r0
 8002c42:	dc05      	bgt.n	8002c50 <__ieee754_rem_pio2f+0x20>
 8002c44:	2300      	movs	r3, #0
 8002c46:	ed85 0a00 	vstr	s0, [r5]
 8002c4a:	6043      	str	r3, [r0, #4]
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	e020      	b.n	8002c92 <__ieee754_rem_pio2f+0x62>
 8002c50:	4b80      	ldr	r3, [pc, #512]	; (8002e54 <__ieee754_rem_pio2f+0x224>)
 8002c52:	429c      	cmp	r4, r3
 8002c54:	dc38      	bgt.n	8002cc8 <__ieee754_rem_pio2f+0x98>
 8002c56:	2e00      	cmp	r6, #0
 8002c58:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8002e58 <__ieee754_rem_pio2f+0x228>
 8002c5c:	4b7f      	ldr	r3, [pc, #508]	; (8002e5c <__ieee754_rem_pio2f+0x22c>)
 8002c5e:	f024 040f 	bic.w	r4, r4, #15
 8002c62:	dd18      	ble.n	8002c96 <__ieee754_rem_pio2f+0x66>
 8002c64:	429c      	cmp	r4, r3
 8002c66:	ee70 7a47 	vsub.f32	s15, s0, s14
 8002c6a:	bf09      	itett	eq
 8002c6c:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8002e60 <__ieee754_rem_pio2f+0x230>
 8002c70:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8002e64 <__ieee754_rem_pio2f+0x234>
 8002c74:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8002c78:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8002e68 <__ieee754_rem_pio2f+0x238>
 8002c7c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8002c80:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c84:	edc0 6a00 	vstr	s13, [r0]
 8002c88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c8c:	edc0 7a01 	vstr	s15, [r0, #4]
 8002c90:	2001      	movs	r0, #1
 8002c92:	b007      	add	sp, #28
 8002c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c96:	429c      	cmp	r4, r3
 8002c98:	ee70 7a07 	vadd.f32	s15, s0, s14
 8002c9c:	bf09      	itett	eq
 8002c9e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8002e60 <__ieee754_rem_pio2f+0x230>
 8002ca2:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8002e64 <__ieee754_rem_pio2f+0x234>
 8002ca6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8002caa:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8002e68 <__ieee754_rem_pio2f+0x238>
 8002cae:	ee77 6a87 	vadd.f32	s13, s15, s14
 8002cb2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002cb6:	edc0 6a00 	vstr	s13, [r0]
 8002cba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002cbe:	edc0 7a01 	vstr	s15, [r0, #4]
 8002cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc6:	e7e4      	b.n	8002c92 <__ieee754_rem_pio2f+0x62>
 8002cc8:	4b68      	ldr	r3, [pc, #416]	; (8002e6c <__ieee754_rem_pio2f+0x23c>)
 8002cca:	429c      	cmp	r4, r3
 8002ccc:	dc71      	bgt.n	8002db2 <__ieee754_rem_pio2f+0x182>
 8002cce:	f000 fc33 	bl	8003538 <fabsf>
 8002cd2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8002e70 <__ieee754_rem_pio2f+0x240>
 8002cd6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002cda:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002cde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ce2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002ce6:	ee17 0a90 	vmov	r0, s15
 8002cea:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8002e58 <__ieee754_rem_pio2f+0x228>
 8002cee:	eeb1 7a46 	vneg.f32	s14, s12
 8002cf2:	eea7 0a27 	vfma.f32	s0, s14, s15
 8002cf6:	281f      	cmp	r0, #31
 8002cf8:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8002e64 <__ieee754_rem_pio2f+0x234>
 8002cfc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002d00:	ee70 6a67 	vsub.f32	s13, s0, s15
 8002d04:	ee16 3a90 	vmov	r3, s13
 8002d08:	dc1c      	bgt.n	8002d44 <__ieee754_rem_pio2f+0x114>
 8002d0a:	1e47      	subs	r7, r0, #1
 8002d0c:	4959      	ldr	r1, [pc, #356]	; (8002e74 <__ieee754_rem_pio2f+0x244>)
 8002d0e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8002d12:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8002d16:	428a      	cmp	r2, r1
 8002d18:	d014      	beq.n	8002d44 <__ieee754_rem_pio2f+0x114>
 8002d1a:	602b      	str	r3, [r5, #0]
 8002d1c:	ed95 7a00 	vldr	s14, [r5]
 8002d20:	ee30 0a47 	vsub.f32	s0, s0, s14
 8002d24:	2e00      	cmp	r6, #0
 8002d26:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002d2a:	ed85 0a01 	vstr	s0, [r5, #4]
 8002d2e:	dab0      	bge.n	8002c92 <__ieee754_rem_pio2f+0x62>
 8002d30:	eeb1 7a47 	vneg.f32	s14, s14
 8002d34:	eeb1 0a40 	vneg.f32	s0, s0
 8002d38:	ed85 7a00 	vstr	s14, [r5]
 8002d3c:	ed85 0a01 	vstr	s0, [r5, #4]
 8002d40:	4240      	negs	r0, r0
 8002d42:	e7a6      	b.n	8002c92 <__ieee754_rem_pio2f+0x62>
 8002d44:	15e4      	asrs	r4, r4, #23
 8002d46:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8002d4a:	1aa2      	subs	r2, r4, r2
 8002d4c:	2a08      	cmp	r2, #8
 8002d4e:	dde4      	ble.n	8002d1a <__ieee754_rem_pio2f+0xea>
 8002d50:	eddf 7a43 	vldr	s15, [pc, #268]	; 8002e60 <__ieee754_rem_pio2f+0x230>
 8002d54:	eef0 6a40 	vmov.f32	s13, s0
 8002d58:	eee7 6a27 	vfma.f32	s13, s14, s15
 8002d5c:	ee30 0a66 	vsub.f32	s0, s0, s13
 8002d60:	eea7 0a27 	vfma.f32	s0, s14, s15
 8002d64:	eddf 7a40 	vldr	s15, [pc, #256]	; 8002e68 <__ieee754_rem_pio2f+0x238>
 8002d68:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8002d6c:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8002d70:	eef0 7a40 	vmov.f32	s15, s0
 8002d74:	ee15 3a90 	vmov	r3, s11
 8002d78:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8002d7c:	1aa4      	subs	r4, r4, r2
 8002d7e:	2c19      	cmp	r4, #25
 8002d80:	dc04      	bgt.n	8002d8c <__ieee754_rem_pio2f+0x15c>
 8002d82:	edc5 5a00 	vstr	s11, [r5]
 8002d86:	eeb0 0a66 	vmov.f32	s0, s13
 8002d8a:	e7c7      	b.n	8002d1c <__ieee754_rem_pio2f+0xec>
 8002d8c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8002e78 <__ieee754_rem_pio2f+0x248>
 8002d90:	eeb0 0a66 	vmov.f32	s0, s13
 8002d94:	eea7 0a25 	vfma.f32	s0, s14, s11
 8002d98:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8002d9c:	eee7 7a25 	vfma.f32	s15, s14, s11
 8002da0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002e7c <__ieee754_rem_pio2f+0x24c>
 8002da4:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8002da8:	ee30 7a67 	vsub.f32	s14, s0, s15
 8002dac:	ed85 7a00 	vstr	s14, [r5]
 8002db0:	e7b4      	b.n	8002d1c <__ieee754_rem_pio2f+0xec>
 8002db2:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8002db6:	db06      	blt.n	8002dc6 <__ieee754_rem_pio2f+0x196>
 8002db8:	ee70 7a40 	vsub.f32	s15, s0, s0
 8002dbc:	edc0 7a01 	vstr	s15, [r0, #4]
 8002dc0:	edc0 7a00 	vstr	s15, [r0]
 8002dc4:	e742      	b.n	8002c4c <__ieee754_rem_pio2f+0x1c>
 8002dc6:	15e2      	asrs	r2, r4, #23
 8002dc8:	3a86      	subs	r2, #134	; 0x86
 8002dca:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8002dce:	ee07 3a90 	vmov	s15, r3
 8002dd2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8002dd6:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8002e80 <__ieee754_rem_pio2f+0x250>
 8002dda:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002dde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002de2:	ed8d 7a03 	vstr	s14, [sp, #12]
 8002de6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002dea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8002dee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002df2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002df6:	ed8d 7a04 	vstr	s14, [sp, #16]
 8002dfa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002dfe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e06:	edcd 7a05 	vstr	s15, [sp, #20]
 8002e0a:	d11e      	bne.n	8002e4a <__ieee754_rem_pio2f+0x21a>
 8002e0c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8002e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e14:	bf14      	ite	ne
 8002e16:	2302      	movne	r3, #2
 8002e18:	2301      	moveq	r3, #1
 8002e1a:	491a      	ldr	r1, [pc, #104]	; (8002e84 <__ieee754_rem_pio2f+0x254>)
 8002e1c:	9101      	str	r1, [sp, #4]
 8002e1e:	2102      	movs	r1, #2
 8002e20:	9100      	str	r1, [sp, #0]
 8002e22:	a803      	add	r0, sp, #12
 8002e24:	4629      	mov	r1, r5
 8002e26:	f000 f8d5 	bl	8002fd4 <__kernel_rem_pio2f>
 8002e2a:	2e00      	cmp	r6, #0
 8002e2c:	f6bf af31 	bge.w	8002c92 <__ieee754_rem_pio2f+0x62>
 8002e30:	edd5 7a00 	vldr	s15, [r5]
 8002e34:	eef1 7a67 	vneg.f32	s15, s15
 8002e38:	edc5 7a00 	vstr	s15, [r5]
 8002e3c:	edd5 7a01 	vldr	s15, [r5, #4]
 8002e40:	eef1 7a67 	vneg.f32	s15, s15
 8002e44:	edc5 7a01 	vstr	s15, [r5, #4]
 8002e48:	e77a      	b.n	8002d40 <__ieee754_rem_pio2f+0x110>
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e7e5      	b.n	8002e1a <__ieee754_rem_pio2f+0x1ea>
 8002e4e:	bf00      	nop
 8002e50:	3f490fd8 	.word	0x3f490fd8
 8002e54:	4016cbe3 	.word	0x4016cbe3
 8002e58:	3fc90f80 	.word	0x3fc90f80
 8002e5c:	3fc90fd0 	.word	0x3fc90fd0
 8002e60:	37354400 	.word	0x37354400
 8002e64:	37354443 	.word	0x37354443
 8002e68:	2e85a308 	.word	0x2e85a308
 8002e6c:	43490f80 	.word	0x43490f80
 8002e70:	3f22f984 	.word	0x3f22f984
 8002e74:	080036e8 	.word	0x080036e8
 8002e78:	2e85a300 	.word	0x2e85a300
 8002e7c:	248d3132 	.word	0x248d3132
 8002e80:	43800000 	.word	0x43800000
 8002e84:	08003768 	.word	0x08003768

08002e88 <__ieee754_sqrtf>:
 8002e88:	ee10 2a10 	vmov	r2, s0
 8002e8c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8002e90:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8002e94:	b570      	push	{r4, r5, r6, lr}
 8002e96:	d302      	bcc.n	8002e9e <__ieee754_sqrtf+0x16>
 8002e98:	eea0 0a00 	vfma.f32	s0, s0, s0
 8002e9c:	bd70      	pop	{r4, r5, r6, pc}
 8002e9e:	b3b1      	cbz	r1, 8002f0e <__ieee754_sqrtf+0x86>
 8002ea0:	2a00      	cmp	r2, #0
 8002ea2:	da04      	bge.n	8002eae <__ieee754_sqrtf+0x26>
 8002ea4:	ee70 7a40 	vsub.f32	s15, s0, s0
 8002ea8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8002eac:	bd70      	pop	{r4, r5, r6, pc}
 8002eae:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002eb2:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8002eb6:	d204      	bcs.n	8002ec2 <__ieee754_sqrtf+0x3a>
 8002eb8:	2100      	movs	r1, #0
 8002eba:	0210      	lsls	r0, r2, #8
 8002ebc:	d528      	bpl.n	8002f10 <__ieee754_sqrtf+0x88>
 8002ebe:	3901      	subs	r1, #1
 8002ec0:	1a5b      	subs	r3, r3, r1
 8002ec2:	3b7f      	subs	r3, #127	; 0x7f
 8002ec4:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8002ec8:	07d9      	lsls	r1, r3, #31
 8002eca:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002ece:	bf48      	it	mi
 8002ed0:	0052      	lslmi	r2, r2, #1
 8002ed2:	1059      	asrs	r1, r3, #1
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	0052      	lsls	r2, r2, #1
 8002ed8:	2419      	movs	r4, #25
 8002eda:	461e      	mov	r6, r3
 8002edc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8002ee0:	1835      	adds	r5, r6, r0
 8002ee2:	4295      	cmp	r5, r2
 8002ee4:	bfde      	ittt	le
 8002ee6:	182e      	addle	r6, r5, r0
 8002ee8:	1b52      	suble	r2, r2, r5
 8002eea:	181b      	addle	r3, r3, r0
 8002eec:	3c01      	subs	r4, #1
 8002eee:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8002ef2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8002ef6:	d1f3      	bne.n	8002ee0 <__ieee754_sqrtf+0x58>
 8002ef8:	b112      	cbz	r2, 8002f00 <__ieee754_sqrtf+0x78>
 8002efa:	3301      	adds	r3, #1
 8002efc:	f023 0301 	bic.w	r3, r3, #1
 8002f00:	105b      	asrs	r3, r3, #1
 8002f02:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 8002f06:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 8002f0a:	ee00 3a10 	vmov	s0, r3
 8002f0e:	bd70      	pop	{r4, r5, r6, pc}
 8002f10:	0052      	lsls	r2, r2, #1
 8002f12:	3101      	adds	r1, #1
 8002f14:	e7d1      	b.n	8002eba <__ieee754_sqrtf+0x32>
	...

08002f18 <__kernel_cosf>:
 8002f18:	ee10 3a10 	vmov	r3, s0
 8002f1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f20:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8002f24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f28:	da05      	bge.n	8002f36 <__kernel_cosf+0x1e>
 8002f2a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002f2e:	ee17 2a90 	vmov	r2, s15
 8002f32:	2a00      	cmp	r2, #0
 8002f34:	d03b      	beq.n	8002fae <__kernel_cosf+0x96>
 8002f36:	ee20 7a00 	vmul.f32	s14, s0, s0
 8002f3a:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8002fb4 <__kernel_cosf+0x9c>
 8002f3e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8002fb8 <__kernel_cosf+0xa0>
 8002f42:	eddf 5a1e 	vldr	s11, [pc, #120]	; 8002fbc <__kernel_cosf+0xa4>
 8002f46:	4a1e      	ldr	r2, [pc, #120]	; (8002fc0 <__kernel_cosf+0xa8>)
 8002f48:	eea7 6a27 	vfma.f32	s12, s14, s15
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	ee60 0a20 	vmul.f32	s1, s0, s1
 8002f52:	eee7 5a06 	vfma.f32	s11, s14, s12
 8002f56:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8002fc4 <__kernel_cosf+0xac>
 8002f5a:	eea7 6a25 	vfma.f32	s12, s14, s11
 8002f5e:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8002fc8 <__kernel_cosf+0xb0>
 8002f62:	eee7 5a06 	vfma.f32	s11, s14, s12
 8002f66:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8002fcc <__kernel_cosf+0xb4>
 8002f6a:	eea7 6a25 	vfma.f32	s12, s14, s11
 8002f6e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8002f72:	ee26 6a07 	vmul.f32	s12, s12, s14
 8002f76:	dc06      	bgt.n	8002f86 <__kernel_cosf+0x6e>
 8002f78:	eed7 0a06 	vfnms.f32	s1, s14, s12
 8002f7c:	eed7 0a25 	vfnms.f32	s1, s14, s11
 8002f80:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8002f84:	4770      	bx	lr
 8002f86:	4a12      	ldr	r2, [pc, #72]	; (8002fd0 <__kernel_cosf+0xb8>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	bfda      	itte	le
 8002f8c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8002f90:	ee07 3a90 	vmovle	s15, r3
 8002f94:	eef5 7a02 	vmovgt.f32	s15, #82	; 0x3e900000  0.2812500
 8002f98:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002f9c:	eed7 0a06 	vfnms.f32	s1, s14, s12
 8002fa0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8002fa4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8002fa8:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8002fac:	4770      	bx	lr
 8002fae:	eeb0 0a66 	vmov.f32	s0, s13
 8002fb2:	4770      	bx	lr
 8002fb4:	310f74f6 	.word	0x310f74f6
 8002fb8:	ad47d74e 	.word	0xad47d74e
 8002fbc:	b493f27c 	.word	0xb493f27c
 8002fc0:	3e999999 	.word	0x3e999999
 8002fc4:	37d00d01 	.word	0x37d00d01
 8002fc8:	bab60b61 	.word	0xbab60b61
 8002fcc:	3d2aaaab 	.word	0x3d2aaaab
 8002fd0:	3f480000 	.word	0x3f480000

08002fd4 <__kernel_rem_pio2f>:
 8002fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fd8:	ed2d 8b04 	vpush	{d8-d9}
 8002fdc:	b0d7      	sub	sp, #348	; 0x15c
 8002fde:	468b      	mov	fp, r1
 8002fe0:	9301      	str	r3, [sp, #4]
 8002fe2:	9964      	ldr	r1, [sp, #400]	; 0x190
 8002fe4:	4bcb      	ldr	r3, [pc, #812]	; (8003314 <__kernel_rem_pio2f+0x340>)
 8002fe6:	9002      	str	r0, [sp, #8]
 8002fe8:	f853 a021 	ldr.w	sl, [r3, r1, lsl #2]
 8002fec:	9b01      	ldr	r3, [sp, #4]
 8002fee:	9e65      	ldr	r6, [sp, #404]	; 0x194
 8002ff0:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8003324 <__kernel_rem_pio2f+0x350>
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	1ed0      	subs	r0, r2, #3
 8002ff8:	2408      	movs	r4, #8
 8002ffa:	fb90 f0f4 	sdiv	r0, r0, r4
 8002ffe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8003002:	1c45      	adds	r5, r0, #1
 8003004:	1ac7      	subs	r7, r0, r3
 8003006:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800300a:	eb0a 0e03 	add.w	lr, sl, r3
 800300e:	ac1a      	add	r4, sp, #104	; 0x68
 8003010:	eb06 0c87 	add.w	ip, r6, r7, lsl #2
 8003014:	2200      	movs	r2, #0
 8003016:	4572      	cmp	r2, lr
 8003018:	dd0f      	ble.n	800303a <__kernel_rem_pio2f+0x66>
 800301a:	f50d 7e84 	add.w	lr, sp, #264	; 0x108
 800301e:	2400      	movs	r4, #0
 8003020:	4554      	cmp	r4, sl
 8003022:	dc26      	bgt.n	8003072 <__kernel_rem_pio2f+0x9e>
 8003024:	9a01      	ldr	r2, [sp, #4]
 8003026:	9f02      	ldr	r7, [sp, #8]
 8003028:	eddf 7abe 	vldr	s15, [pc, #760]	; 8003324 <__kernel_rem_pio2f+0x350>
 800302c:	4422      	add	r2, r4
 800302e:	a91a      	add	r1, sp, #104	; 0x68
 8003030:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8003034:	f04f 0c00 	mov.w	ip, #0
 8003038:	e015      	b.n	8003066 <__kernel_rem_pio2f+0x92>
 800303a:	42d7      	cmn	r7, r2
 800303c:	bf5d      	ittte	pl
 800303e:	f85c 1022 	ldrpl.w	r1, [ip, r2, lsl #2]
 8003042:	ee07 1a90 	vmovpl	s15, r1
 8003046:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800304a:	eef0 7a47 	vmovmi.f32	s15, s14
 800304e:	ece4 7a01 	vstmia	r4!, {s15}
 8003052:	3201      	adds	r2, #1
 8003054:	e7df      	b.n	8003016 <__kernel_rem_pio2f+0x42>
 8003056:	ecf7 6a01 	vldmia	r7!, {s13}
 800305a:	ed32 7a01 	vldmdb	r2!, {s14}
 800305e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003062:	f10c 0c01 	add.w	ip, ip, #1
 8003066:	459c      	cmp	ip, r3
 8003068:	ddf5      	ble.n	8003056 <__kernel_rem_pio2f+0x82>
 800306a:	ecee 7a01 	vstmia	lr!, {s15}
 800306e:	3401      	adds	r4, #1
 8003070:	e7d6      	b.n	8003020 <__kernel_rem_pio2f+0x4c>
 8003072:	aa06      	add	r2, sp, #24
 8003074:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8003078:	9204      	str	r2, [sp, #16]
 800307a:	eddf 8aa7 	vldr	s17, [pc, #668]	; 8003318 <__kernel_rem_pio2f+0x344>
 800307e:	ed9f 9aa7 	vldr	s18, [pc, #668]	; 800331c <__kernel_rem_pio2f+0x348>
 8003082:	eb06 0280 	add.w	r2, r6, r0, lsl #2
 8003086:	9203      	str	r2, [sp, #12]
 8003088:	4657      	mov	r7, sl
 800308a:	aa56      	add	r2, sp, #344	; 0x158
 800308c:	f107 4880 	add.w	r8, r7, #1073741824	; 0x40000000
 8003090:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 8003094:	f108 38ff 	add.w	r8, r8, #4294967295
 8003098:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
 800309c:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80030a0:	aa56      	add	r2, sp, #344	; 0x158
 80030a2:	eb02 0008 	add.w	r0, r2, r8
 80030a6:	384c      	subs	r0, #76	; 0x4c
 80030a8:	2200      	movs	r2, #0
 80030aa:	1abc      	subs	r4, r7, r2
 80030ac:	2c00      	cmp	r4, #0
 80030ae:	dc4a      	bgt.n	8003146 <__kernel_rem_pio2f+0x172>
 80030b0:	4628      	mov	r0, r5
 80030b2:	9305      	str	r3, [sp, #20]
 80030b4:	f000 fa8a 	bl	80035cc <scalbnf>
 80030b8:	eeb0 8a40 	vmov.f32	s16, s0
 80030bc:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80030c0:	ee28 0a00 	vmul.f32	s0, s16, s0
 80030c4:	f000 fa40 	bl	8003548 <floorf>
 80030c8:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80030cc:	eea0 8a67 	vfms.f32	s16, s0, s15
 80030d0:	2d00      	cmp	r5, #0
 80030d2:	9b05      	ldr	r3, [sp, #20]
 80030d4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80030d8:	ee17 9a90 	vmov	r9, s15
 80030dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030e0:	ee38 8a67 	vsub.f32	s16, s16, s15
 80030e4:	dd44      	ble.n	8003170 <__kernel_rem_pio2f+0x19c>
 80030e6:	1e78      	subs	r0, r7, #1
 80030e8:	aa06      	add	r2, sp, #24
 80030ea:	f1c5 0408 	rsb	r4, r5, #8
 80030ee:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 80030f2:	fa46 f204 	asr.w	r2, r6, r4
 80030f6:	4491      	add	r9, r2
 80030f8:	40a2      	lsls	r2, r4
 80030fa:	1ab6      	subs	r6, r6, r2
 80030fc:	aa06      	add	r2, sp, #24
 80030fe:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8003102:	f1c5 0207 	rsb	r2, r5, #7
 8003106:	4116      	asrs	r6, r2
 8003108:	2e00      	cmp	r6, #0
 800310a:	dd40      	ble.n	800318e <__kernel_rem_pio2f+0x1ba>
 800310c:	2400      	movs	r4, #0
 800310e:	f109 0901 	add.w	r9, r9, #1
 8003112:	4620      	mov	r0, r4
 8003114:	42a7      	cmp	r7, r4
 8003116:	dc75      	bgt.n	8003204 <__kernel_rem_pio2f+0x230>
 8003118:	2d00      	cmp	r5, #0
 800311a:	dd05      	ble.n	8003128 <__kernel_rem_pio2f+0x154>
 800311c:	2d01      	cmp	r5, #1
 800311e:	f000 8086 	beq.w	800322e <__kernel_rem_pio2f+0x25a>
 8003122:	2d02      	cmp	r5, #2
 8003124:	f000 808d 	beq.w	8003242 <__kernel_rem_pio2f+0x26e>
 8003128:	2e02      	cmp	r6, #2
 800312a:	d130      	bne.n	800318e <__kernel_rem_pio2f+0x1ba>
 800312c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003130:	ee30 8a48 	vsub.f32	s16, s0, s16
 8003134:	b358      	cbz	r0, 800318e <__kernel_rem_pio2f+0x1ba>
 8003136:	4628      	mov	r0, r5
 8003138:	9305      	str	r3, [sp, #20]
 800313a:	f000 fa47 	bl	80035cc <scalbnf>
 800313e:	9b05      	ldr	r3, [sp, #20]
 8003140:	ee38 8a40 	vsub.f32	s16, s16, s0
 8003144:	e023      	b.n	800318e <__kernel_rem_pio2f+0x1ba>
 8003146:	ee60 7a28 	vmul.f32	s15, s0, s17
 800314a:	ac06      	add	r4, sp, #24
 800314c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003154:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8003158:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800315c:	ee10 1a10 	vmov	r1, s0
 8003160:	ed30 0a01 	vldmdb	r0!, {s0}
 8003164:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8003168:	ee37 0a80 	vadd.f32	s0, s15, s0
 800316c:	3201      	adds	r2, #1
 800316e:	e79c      	b.n	80030aa <__kernel_rem_pio2f+0xd6>
 8003170:	d105      	bne.n	800317e <__kernel_rem_pio2f+0x1aa>
 8003172:	1e7a      	subs	r2, r7, #1
 8003174:	a906      	add	r1, sp, #24
 8003176:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800317a:	1236      	asrs	r6, r6, #8
 800317c:	e7c4      	b.n	8003108 <__kernel_rem_pio2f+0x134>
 800317e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003182:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800318a:	da39      	bge.n	8003200 <__kernel_rem_pio2f+0x22c>
 800318c:	2600      	movs	r6, #0
 800318e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8003192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003196:	f040 808d 	bne.w	80032b4 <__kernel_rem_pio2f+0x2e0>
 800319a:	1e7c      	subs	r4, r7, #1
 800319c:	4620      	mov	r0, r4
 800319e:	2200      	movs	r2, #0
 80031a0:	4550      	cmp	r0, sl
 80031a2:	da55      	bge.n	8003250 <__kernel_rem_pio2f+0x27c>
 80031a4:	2a00      	cmp	r2, #0
 80031a6:	d164      	bne.n	8003272 <__kernel_rem_pio2f+0x29e>
 80031a8:	2401      	movs	r4, #1
 80031aa:	f06f 0003 	mvn.w	r0, #3
 80031ae:	fb00 f204 	mul.w	r2, r0, r4
 80031b2:	9904      	ldr	r1, [sp, #16]
 80031b4:	588a      	ldr	r2, [r1, r2]
 80031b6:	2a00      	cmp	r2, #0
 80031b8:	d050      	beq.n	800325c <__kernel_rem_pio2f+0x288>
 80031ba:	aa56      	add	r2, sp, #344	; 0x158
 80031bc:	4490      	add	r8, r2
 80031be:	9a01      	ldr	r2, [sp, #4]
 80031c0:	a91a      	add	r1, sp, #104	; 0x68
 80031c2:	443a      	add	r2, r7
 80031c4:	1c78      	adds	r0, r7, #1
 80031c6:	f1a8 0848 	sub.w	r8, r8, #72	; 0x48
 80031ca:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80031ce:	4427      	add	r7, r4
 80031d0:	42b8      	cmp	r0, r7
 80031d2:	f73f af5a 	bgt.w	800308a <__kernel_rem_pio2f+0xb6>
 80031d6:	9903      	ldr	r1, [sp, #12]
 80031d8:	9e02      	ldr	r6, [sp, #8]
 80031da:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80031de:	9105      	str	r1, [sp, #20]
 80031e0:	ee07 1a90 	vmov	s15, r1
 80031e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031e8:	2400      	movs	r4, #0
 80031ea:	ece2 7a01 	vstmia	r2!, {s15}
 80031ee:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8003324 <__kernel_rem_pio2f+0x350>
 80031f2:	4696      	mov	lr, r2
 80031f4:	429c      	cmp	r4, r3
 80031f6:	dd33      	ble.n	8003260 <__kernel_rem_pio2f+0x28c>
 80031f8:	ece8 7a01 	vstmia	r8!, {s15}
 80031fc:	3001      	adds	r0, #1
 80031fe:	e7e7      	b.n	80031d0 <__kernel_rem_pio2f+0x1fc>
 8003200:	2602      	movs	r6, #2
 8003202:	e783      	b.n	800310c <__kernel_rem_pio2f+0x138>
 8003204:	aa06      	add	r2, sp, #24
 8003206:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800320a:	b948      	cbnz	r0, 8003220 <__kernel_rem_pio2f+0x24c>
 800320c:	b12a      	cbz	r2, 800321a <__kernel_rem_pio2f+0x246>
 800320e:	a906      	add	r1, sp, #24
 8003210:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8003214:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8003218:	2201      	movs	r2, #1
 800321a:	3401      	adds	r4, #1
 800321c:	4610      	mov	r0, r2
 800321e:	e779      	b.n	8003114 <__kernel_rem_pio2f+0x140>
 8003220:	a906      	add	r1, sp, #24
 8003222:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8003226:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 800322a:	4602      	mov	r2, r0
 800322c:	e7f5      	b.n	800321a <__kernel_rem_pio2f+0x246>
 800322e:	1e7c      	subs	r4, r7, #1
 8003230:	aa06      	add	r2, sp, #24
 8003232:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8003236:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800323a:	a906      	add	r1, sp, #24
 800323c:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8003240:	e772      	b.n	8003128 <__kernel_rem_pio2f+0x154>
 8003242:	1e7c      	subs	r4, r7, #1
 8003244:	aa06      	add	r2, sp, #24
 8003246:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800324a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800324e:	e7f4      	b.n	800323a <__kernel_rem_pio2f+0x266>
 8003250:	a906      	add	r1, sp, #24
 8003252:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8003256:	3801      	subs	r0, #1
 8003258:	430a      	orrs	r2, r1
 800325a:	e7a1      	b.n	80031a0 <__kernel_rem_pio2f+0x1cc>
 800325c:	3401      	adds	r4, #1
 800325e:	e7a6      	b.n	80031ae <__kernel_rem_pio2f+0x1da>
 8003260:	ecf6 6a01 	vldmia	r6!, {s13}
 8003264:	ed3e 7a01 	vldmdb	lr!, {s14}
 8003268:	3401      	adds	r4, #1
 800326a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800326e:	e7c1      	b.n	80031f4 <__kernel_rem_pio2f+0x220>
 8003270:	3c01      	subs	r4, #1
 8003272:	ab06      	add	r3, sp, #24
 8003274:	3d08      	subs	r5, #8
 8003276:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0f8      	beq.n	8003270 <__kernel_rem_pio2f+0x29c>
 800327e:	4628      	mov	r0, r5
 8003280:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003284:	f000 f9a2 	bl	80035cc <scalbnf>
 8003288:	00a3      	lsls	r3, r4, #2
 800328a:	aa42      	add	r2, sp, #264	; 0x108
 800328c:	3304      	adds	r3, #4
 800328e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003318 <__kernel_rem_pio2f+0x344>
 8003292:	18d0      	adds	r0, r2, r3
 8003294:	4622      	mov	r2, r4
 8003296:	2a00      	cmp	r2, #0
 8003298:	da46      	bge.n	8003328 <__kernel_rem_pio2f+0x354>
 800329a:	f10d 0eb8 	add.w	lr, sp, #184	; 0xb8
 800329e:	2200      	movs	r2, #0
 80032a0:	1aa5      	subs	r5, r4, r2
 80032a2:	d460      	bmi.n	8003366 <__kernel_rem_pio2f+0x392>
 80032a4:	a942      	add	r1, sp, #264	; 0x108
 80032a6:	4f1e      	ldr	r7, [pc, #120]	; (8003320 <__kernel_rem_pio2f+0x34c>)
 80032a8:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8003324 <__kernel_rem_pio2f+0x350>
 80032ac:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 80032b0:	2000      	movs	r0, #0
 80032b2:	e050      	b.n	8003356 <__kernel_rem_pio2f+0x382>
 80032b4:	4268      	negs	r0, r5
 80032b6:	eeb0 0a48 	vmov.f32	s0, s16
 80032ba:	f000 f987 	bl	80035cc <scalbnf>
 80032be:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800331c <__kernel_rem_pio2f+0x348>
 80032c2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80032c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ca:	db19      	blt.n	8003300 <__kernel_rem_pio2f+0x32c>
 80032cc:	eddf 7a12 	vldr	s15, [pc, #72]	; 8003318 <__kernel_rem_pio2f+0x344>
 80032d0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80032d4:	aa06      	add	r2, sp, #24
 80032d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032da:	1c7c      	adds	r4, r7, #1
 80032dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032e0:	3508      	adds	r5, #8
 80032e2:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80032e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032ea:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80032ee:	ee10 3a10 	vmov	r3, s0
 80032f2:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 80032f6:	ee17 3a90 	vmov	r3, s15
 80032fa:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80032fe:	e7be      	b.n	800327e <__kernel_rem_pio2f+0x2aa>
 8003300:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003304:	aa06      	add	r2, sp, #24
 8003306:	ee10 3a10 	vmov	r3, s0
 800330a:	463c      	mov	r4, r7
 800330c:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8003310:	e7b5      	b.n	800327e <__kernel_rem_pio2f+0x2aa>
 8003312:	bf00      	nop
 8003314:	08003aac 	.word	0x08003aac
 8003318:	3b800000 	.word	0x3b800000
 800331c:	43800000 	.word	0x43800000
 8003320:	08003a80 	.word	0x08003a80
 8003324:	00000000 	.word	0x00000000
 8003328:	a906      	add	r1, sp, #24
 800332a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800332e:	9101      	str	r1, [sp, #4]
 8003330:	ee07 1a90 	vmov	s15, r1
 8003334:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003338:	3a01      	subs	r2, #1
 800333a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800333e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8003342:	ed60 7a01 	vstmdb	r0!, {s15}
 8003346:	e7a6      	b.n	8003296 <__kernel_rem_pio2f+0x2c2>
 8003348:	ecf7 6a01 	vldmia	r7!, {s13}
 800334c:	ecb5 7a01 	vldmia	r5!, {s14}
 8003350:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003354:	3001      	adds	r0, #1
 8003356:	4550      	cmp	r0, sl
 8003358:	dc01      	bgt.n	800335e <__kernel_rem_pio2f+0x38a>
 800335a:	4290      	cmp	r0, r2
 800335c:	ddf4      	ble.n	8003348 <__kernel_rem_pio2f+0x374>
 800335e:	ecee 7a01 	vstmia	lr!, {s15}
 8003362:	3201      	adds	r2, #1
 8003364:	e79c      	b.n	80032a0 <__kernel_rem_pio2f+0x2cc>
 8003366:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8003368:	2a03      	cmp	r2, #3
 800336a:	d843      	bhi.n	80033f4 <__kernel_rem_pio2f+0x420>
 800336c:	e8df f002 	tbb	[pc, r2]
 8003370:	021d1d37 	.word	0x021d1d37
 8003374:	aa2e      	add	r2, sp, #184	; 0xb8
 8003376:	4413      	add	r3, r2
 8003378:	461a      	mov	r2, r3
 800337a:	4620      	mov	r0, r4
 800337c:	2800      	cmp	r0, #0
 800337e:	dc55      	bgt.n	800342c <__kernel_rem_pio2f+0x458>
 8003380:	461a      	mov	r2, r3
 8003382:	4620      	mov	r0, r4
 8003384:	2801      	cmp	r0, #1
 8003386:	dc61      	bgt.n	800344c <__kernel_rem_pio2f+0x478>
 8003388:	ed5f 7a1a 	vldr	s15, [pc, #-104]	; 8003324 <__kernel_rem_pio2f+0x350>
 800338c:	2c01      	cmp	r4, #1
 800338e:	dc6d      	bgt.n	800346c <__kernel_rem_pio2f+0x498>
 8003390:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8003394:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8003398:	2e00      	cmp	r6, #0
 800339a:	d16d      	bne.n	8003478 <__kernel_rem_pio2f+0x4a4>
 800339c:	edcb 6a00 	vstr	s13, [fp]
 80033a0:	ed8b 7a01 	vstr	s14, [fp, #4]
 80033a4:	edcb 7a02 	vstr	s15, [fp, #8]
 80033a8:	e024      	b.n	80033f4 <__kernel_rem_pio2f+0x420>
 80033aa:	aa2e      	add	r2, sp, #184	; 0xb8
 80033ac:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 8003324 <__kernel_rem_pio2f+0x350>
 80033b0:	4413      	add	r3, r2
 80033b2:	4622      	mov	r2, r4
 80033b4:	2a00      	cmp	r2, #0
 80033b6:	da2a      	bge.n	800340e <__kernel_rem_pio2f+0x43a>
 80033b8:	b37e      	cbz	r6, 800341a <__kernel_rem_pio2f+0x446>
 80033ba:	eef1 7a47 	vneg.f32	s15, s14
 80033be:	edcb 7a00 	vstr	s15, [fp]
 80033c2:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 80033c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033ca:	aa2f      	add	r2, sp, #188	; 0xbc
 80033cc:	2301      	movs	r3, #1
 80033ce:	429c      	cmp	r4, r3
 80033d0:	da26      	bge.n	8003420 <__kernel_rem_pio2f+0x44c>
 80033d2:	b10e      	cbz	r6, 80033d8 <__kernel_rem_pio2f+0x404>
 80033d4:	eef1 7a67 	vneg.f32	s15, s15
 80033d8:	edcb 7a01 	vstr	s15, [fp, #4]
 80033dc:	e00a      	b.n	80033f4 <__kernel_rem_pio2f+0x420>
 80033de:	aa2e      	add	r2, sp, #184	; 0xb8
 80033e0:	ed5f 7a30 	vldr	s15, [pc, #-192]	; 8003324 <__kernel_rem_pio2f+0x350>
 80033e4:	4413      	add	r3, r2
 80033e6:	2c00      	cmp	r4, #0
 80033e8:	da0b      	bge.n	8003402 <__kernel_rem_pio2f+0x42e>
 80033ea:	b10e      	cbz	r6, 80033f0 <__kernel_rem_pio2f+0x41c>
 80033ec:	eef1 7a67 	vneg.f32	s15, s15
 80033f0:	edcb 7a00 	vstr	s15, [fp]
 80033f4:	f009 0007 	and.w	r0, r9, #7
 80033f8:	b057      	add	sp, #348	; 0x15c
 80033fa:	ecbd 8b04 	vpop	{d8-d9}
 80033fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003402:	ed33 7a01 	vldmdb	r3!, {s14}
 8003406:	3c01      	subs	r4, #1
 8003408:	ee77 7a87 	vadd.f32	s15, s15, s14
 800340c:	e7eb      	b.n	80033e6 <__kernel_rem_pio2f+0x412>
 800340e:	ed73 7a01 	vldmdb	r3!, {s15}
 8003412:	3a01      	subs	r2, #1
 8003414:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003418:	e7cc      	b.n	80033b4 <__kernel_rem_pio2f+0x3e0>
 800341a:	eef0 7a47 	vmov.f32	s15, s14
 800341e:	e7ce      	b.n	80033be <__kernel_rem_pio2f+0x3ea>
 8003420:	ecb2 7a01 	vldmia	r2!, {s14}
 8003424:	3301      	adds	r3, #1
 8003426:	ee77 7a87 	vadd.f32	s15, s15, s14
 800342a:	e7d0      	b.n	80033ce <__kernel_rem_pio2f+0x3fa>
 800342c:	ed52 6a01 	vldr	s13, [r2, #-4]
 8003430:	ed52 7a02 	vldr	s15, [r2, #-8]
 8003434:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003438:	3801      	subs	r0, #1
 800343a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800343e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003442:	ed62 7a01 	vstmdb	r2!, {s15}
 8003446:	ed02 7a01 	vstr	s14, [r2, #-4]
 800344a:	e797      	b.n	800337c <__kernel_rem_pio2f+0x3a8>
 800344c:	ed52 6a01 	vldr	s13, [r2, #-4]
 8003450:	ed52 7a02 	vldr	s15, [r2, #-8]
 8003454:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003458:	3801      	subs	r0, #1
 800345a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800345e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003462:	ed62 7a01 	vstmdb	r2!, {s15}
 8003466:	ed02 7a01 	vstr	s14, [r2, #-4]
 800346a:	e78b      	b.n	8003384 <__kernel_rem_pio2f+0x3b0>
 800346c:	ed33 7a01 	vldmdb	r3!, {s14}
 8003470:	3c01      	subs	r4, #1
 8003472:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003476:	e789      	b.n	800338c <__kernel_rem_pio2f+0x3b8>
 8003478:	eef1 6a66 	vneg.f32	s13, s13
 800347c:	eeb1 7a47 	vneg.f32	s14, s14
 8003480:	edcb 6a00 	vstr	s13, [fp]
 8003484:	ed8b 7a01 	vstr	s14, [fp, #4]
 8003488:	eef1 7a67 	vneg.f32	s15, s15
 800348c:	e78a      	b.n	80033a4 <__kernel_rem_pio2f+0x3d0>
 800348e:	bf00      	nop

08003490 <__kernel_sinf>:
 8003490:	ee10 3a10 	vmov	r3, s0
 8003494:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003498:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800349c:	da04      	bge.n	80034a8 <__kernel_sinf+0x18>
 800349e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80034a2:	ee17 3a90 	vmov	r3, s15
 80034a6:	b35b      	cbz	r3, 8003500 <__kernel_sinf+0x70>
 80034a8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80034ac:	eddf 7a15 	vldr	s15, [pc, #84]	; 8003504 <__kernel_sinf+0x74>
 80034b0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8003508 <__kernel_sinf+0x78>
 80034b4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80034b8:	eddf 7a14 	vldr	s15, [pc, #80]	; 800350c <__kernel_sinf+0x7c>
 80034bc:	eee7 7a06 	vfma.f32	s15, s14, s12
 80034c0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8003510 <__kernel_sinf+0x80>
 80034c4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80034c8:	eddf 7a12 	vldr	s15, [pc, #72]	; 8003514 <__kernel_sinf+0x84>
 80034cc:	ee60 6a07 	vmul.f32	s13, s0, s14
 80034d0:	eee7 7a06 	vfma.f32	s15, s14, s12
 80034d4:	b930      	cbnz	r0, 80034e4 <__kernel_sinf+0x54>
 80034d6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8003518 <__kernel_sinf+0x88>
 80034da:	eea7 6a27 	vfma.f32	s12, s14, s15
 80034de:	eea6 0a86 	vfma.f32	s0, s13, s12
 80034e2:	4770      	bx	lr
 80034e4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80034e8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80034ec:	eee0 7a86 	vfma.f32	s15, s1, s12
 80034f0:	eed7 0a27 	vfnms.f32	s1, s14, s15
 80034f4:	eddf 7a09 	vldr	s15, [pc, #36]	; 800351c <__kernel_sinf+0x8c>
 80034f8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80034fc:	ee30 0a60 	vsub.f32	s0, s0, s1
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	2f2ec9d3 	.word	0x2f2ec9d3
 8003508:	b2d72f34 	.word	0xb2d72f34
 800350c:	3638ef1b 	.word	0x3638ef1b
 8003510:	b9500d01 	.word	0xb9500d01
 8003514:	3c088889 	.word	0x3c088889
 8003518:	be2aaaab 	.word	0xbe2aaaab
 800351c:	3e2aaaab 	.word	0x3e2aaaab

08003520 <matherr>:
 8003520:	2000      	movs	r0, #0
 8003522:	4770      	bx	lr
 8003524:	0000      	movs	r0, r0
	...

08003528 <nan>:
 8003528:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8003530 <nan+0x8>
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	00000000 	.word	0x00000000
 8003534:	7ff80000 	.word	0x7ff80000

08003538 <fabsf>:
 8003538:	ee10 3a10 	vmov	r3, s0
 800353c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003540:	ee00 3a10 	vmov	s0, r3
 8003544:	4770      	bx	lr
	...

08003548 <floorf>:
 8003548:	ee10 3a10 	vmov	r3, s0
 800354c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003550:	0dca      	lsrs	r2, r1, #23
 8003552:	3a7f      	subs	r2, #127	; 0x7f
 8003554:	2a16      	cmp	r2, #22
 8003556:	dc2a      	bgt.n	80035ae <floorf+0x66>
 8003558:	2a00      	cmp	r2, #0
 800355a:	da11      	bge.n	8003580 <floorf+0x38>
 800355c:	eddf 7a18 	vldr	s15, [pc, #96]	; 80035c0 <floorf+0x78>
 8003560:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003564:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800356c:	dd05      	ble.n	800357a <floorf+0x32>
 800356e:	2b00      	cmp	r3, #0
 8003570:	da23      	bge.n	80035ba <floorf+0x72>
 8003572:	4a14      	ldr	r2, [pc, #80]	; (80035c4 <floorf+0x7c>)
 8003574:	2900      	cmp	r1, #0
 8003576:	bf18      	it	ne
 8003578:	4613      	movne	r3, r2
 800357a:	ee00 3a10 	vmov	s0, r3
 800357e:	4770      	bx	lr
 8003580:	4911      	ldr	r1, [pc, #68]	; (80035c8 <floorf+0x80>)
 8003582:	4111      	asrs	r1, r2
 8003584:	420b      	tst	r3, r1
 8003586:	d0fa      	beq.n	800357e <floorf+0x36>
 8003588:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80035c0 <floorf+0x78>
 800358c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003590:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003598:	ddef      	ble.n	800357a <floorf+0x32>
 800359a:	2b00      	cmp	r3, #0
 800359c:	bfbe      	ittt	lt
 800359e:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80035a2:	fa40 f202 	asrlt.w	r2, r0, r2
 80035a6:	189b      	addlt	r3, r3, r2
 80035a8:	ea23 0301 	bic.w	r3, r3, r1
 80035ac:	e7e5      	b.n	800357a <floorf+0x32>
 80035ae:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80035b2:	d3e4      	bcc.n	800357e <floorf+0x36>
 80035b4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80035b8:	4770      	bx	lr
 80035ba:	2300      	movs	r3, #0
 80035bc:	e7dd      	b.n	800357a <floorf+0x32>
 80035be:	bf00      	nop
 80035c0:	7149f2ca 	.word	0x7149f2ca
 80035c4:	bf800000 	.word	0xbf800000
 80035c8:	007fffff 	.word	0x007fffff

080035cc <scalbnf>:
 80035cc:	b508      	push	{r3, lr}
 80035ce:	ee10 2a10 	vmov	r2, s0
 80035d2:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80035d6:	ed2d 8b02 	vpush	{d8}
 80035da:	eef0 0a40 	vmov.f32	s1, s0
 80035de:	d004      	beq.n	80035ea <scalbnf+0x1e>
 80035e0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80035e4:	d306      	bcc.n	80035f4 <scalbnf+0x28>
 80035e6:	ee70 0a00 	vadd.f32	s1, s0, s0
 80035ea:	ecbd 8b02 	vpop	{d8}
 80035ee:	eeb0 0a60 	vmov.f32	s0, s1
 80035f2:	bd08      	pop	{r3, pc}
 80035f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035f8:	d21c      	bcs.n	8003634 <scalbnf+0x68>
 80035fa:	4b1f      	ldr	r3, [pc, #124]	; (8003678 <scalbnf+0xac>)
 80035fc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800367c <scalbnf+0xb0>
 8003600:	4298      	cmp	r0, r3
 8003602:	ee60 0a27 	vmul.f32	s1, s0, s15
 8003606:	db10      	blt.n	800362a <scalbnf+0x5e>
 8003608:	ee10 2a90 	vmov	r2, s1
 800360c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8003610:	3b19      	subs	r3, #25
 8003612:	4403      	add	r3, r0
 8003614:	2bfe      	cmp	r3, #254	; 0xfe
 8003616:	dd0f      	ble.n	8003638 <scalbnf+0x6c>
 8003618:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8003680 <scalbnf+0xb4>
 800361c:	eeb0 0a48 	vmov.f32	s0, s16
 8003620:	f000 f834 	bl	800368c <copysignf>
 8003624:	ee60 0a08 	vmul.f32	s1, s0, s16
 8003628:	e7df      	b.n	80035ea <scalbnf+0x1e>
 800362a:	eddf 7a16 	vldr	s15, [pc, #88]	; 8003684 <scalbnf+0xb8>
 800362e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8003632:	e7da      	b.n	80035ea <scalbnf+0x1e>
 8003634:	0ddb      	lsrs	r3, r3, #23
 8003636:	e7ec      	b.n	8003612 <scalbnf+0x46>
 8003638:	2b00      	cmp	r3, #0
 800363a:	dd06      	ble.n	800364a <scalbnf+0x7e>
 800363c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8003640:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8003644:	ee00 3a90 	vmov	s1, r3
 8003648:	e7cf      	b.n	80035ea <scalbnf+0x1e>
 800364a:	f113 0f16 	cmn.w	r3, #22
 800364e:	da06      	bge.n	800365e <scalbnf+0x92>
 8003650:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003654:	4298      	cmp	r0, r3
 8003656:	dcdf      	bgt.n	8003618 <scalbnf+0x4c>
 8003658:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8003684 <scalbnf+0xb8>
 800365c:	e7de      	b.n	800361c <scalbnf+0x50>
 800365e:	3319      	adds	r3, #25
 8003660:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8003664:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8003668:	eddf 7a07 	vldr	s15, [pc, #28]	; 8003688 <scalbnf+0xbc>
 800366c:	ee07 3a10 	vmov	s14, r3
 8003670:	ee67 0a27 	vmul.f32	s1, s14, s15
 8003674:	e7b9      	b.n	80035ea <scalbnf+0x1e>
 8003676:	bf00      	nop
 8003678:	ffff3cb0 	.word	0xffff3cb0
 800367c:	4c000000 	.word	0x4c000000
 8003680:	7149f2ca 	.word	0x7149f2ca
 8003684:	0da24260 	.word	0x0da24260
 8003688:	33000000 	.word	0x33000000

0800368c <copysignf>:
 800368c:	ee10 3a10 	vmov	r3, s0
 8003690:	ee10 2a90 	vmov	r2, s1
 8003694:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003698:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800369c:	4313      	orrs	r3, r2
 800369e:	ee00 3a10 	vmov	s0, r3
 80036a2:	4770      	bx	lr

080036a4 <__errno>:
 80036a4:	4b01      	ldr	r3, [pc, #4]	; (80036ac <__errno+0x8>)
 80036a6:	6818      	ldr	r0, [r3, #0]
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	20000020 	.word	0x20000020

080036b0 <_init>:
 80036b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036b2:	bf00      	nop
 80036b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036b6:	bc08      	pop	{r3}
 80036b8:	469e      	mov	lr, r3
 80036ba:	4770      	bx	lr

080036bc <_fini>:
 80036bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036be:	bf00      	nop
 80036c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036c2:	bc08      	pop	{r3}
 80036c4:	469e      	mov	lr, r3
 80036c6:	4770      	bx	lr
