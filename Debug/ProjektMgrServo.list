
ProjektMgrServo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e70  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08004020  08004020  00014020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004410  08004410  00014410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004414  08004414  00014414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08004418  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ram2         00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  7 .bss          0000011c  20000070  20000070  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000018c  2000018c  00020070  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00004b73  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000f07  00000000  00000000  00024c13  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000002a0  00000000  00000000  00025b20  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001e8  00000000  00000000  00025dc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001b48  00000000  00000000  00025fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001893  00000000  00000000  00027af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00029383  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000d14  00000000  00000000  00029400  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002a114  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004008 	.word	0x08004008

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08004008 	.word	0x08004008

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f092 0f00 	teq	r2, #0
 80004da:	bf14      	ite	ne
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e720      	b.n	8000334 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aedc 	beq.w	80002e2 <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6c1      	b.n	80002e2 <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpun>:
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x10>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d10a      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x20>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d102      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0001 	mov.w	r0, #1
 8000abe:	4770      	bx	lr

08000ac0 <__aeabi_d2uiz>:
 8000ac0:	004a      	lsls	r2, r1, #1
 8000ac2:	d211      	bcs.n	8000ae8 <__aeabi_d2uiz+0x28>
 8000ac4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac8:	d211      	bcs.n	8000aee <__aeabi_d2uiz+0x2e>
 8000aca:	d50d      	bpl.n	8000ae8 <__aeabi_d2uiz+0x28>
 8000acc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad4:	d40e      	bmi.n	8000af4 <__aeabi_d2uiz+0x34>
 8000ad6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ada:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ade:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_d2uiz+0x3a>
 8000af4:	f04f 30ff 	mov.w	r0, #4294967295
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0000 	mov.w	r0, #0
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <ADC_Init>:
#include <ADC.h>
#include "stm32l4xx.h"

/* ADC */
void ADC_Init()
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN | RCC_AHB2ENR_ADCEN; 	// enable ADC and GPIO C clock
 8000ba4:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <ADC_Init+0x50>)
 8000ba6:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <ADC_Init+0x50>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bae:	f043 0304 	orr.w	r3, r3, #4
 8000bb2:	64d3      	str	r3, [r2, #76]	; 0x4c
RCC->CCIPR |= RCC_CCIPR_ADCSEL_0 | RCC_CCIPR_ADCSEL_1;		// select clock ADC
 8000bb4:	4a0e      	ldr	r2, [pc, #56]	; (8000bf0 <ADC_Init+0x50>)
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <ADC_Init+0x50>)
 8000bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bbc:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000bc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

ADC1->CFGR |= ADC_CFGR_DISCEN;			// discontinuous conversion mode
 8000bc4:	4a0b      	ldr	r2, [pc, #44]	; (8000bf4 <ADC_Init+0x54>)
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <ADC_Init+0x54>)
 8000bc8:	68db      	ldr	r3, [r3, #12]
 8000bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bce:	60d3      	str	r3, [r2, #12]
//NVIC_EnableIRQ(ADC1_IRQn);

//ADC1->SQR1 |= (4<< ADC_SQR1_SQ1_Pos);	// 4 channel
//ADC1->SMPR1 |= ADC_SMPR1_SMP4_1;		// 010 -> 12.5 ADC clock cycles, RESET STATE bits(000) -> 2.5 ADC clock cycles

ADC1->CR = ADC_CR_ADEN | ADC_CR_ADVREGEN;	// enable ADC and voltage regulator
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <ADC_Init+0x54>)
 8000bd2:	4a09      	ldr	r2, [pc, #36]	; (8000bf8 <ADC_Init+0x58>)
 8000bd4:	609a      	str	r2, [r3, #8]
while(!(ADC1->ISR & ADC_ISR_ADRDY));		// wait for ADC ready
 8000bd6:	bf00      	nop
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <ADC_Init+0x54>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f003 0301 	and.w	r3, r3, #1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d0f9      	beq.n	8000bd8 <ADC_Init+0x38>
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	50040000 	.word	0x50040000
 8000bf8:	10000001 	.word	0x10000001

08000bfc <readADC>:


int readADC(char pinADC)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
	ADC1->SQR1 = 0; // reset value
 8000c06:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <readADC+0x58>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	631a      	str	r2, [r3, #48]	; 0x30
	ADC1->SQR1 |= (pinADC << ADC_SQR1_SQ1_Pos);	// select channel
 8000c0c:	4911      	ldr	r1, [pc, #68]	; (8000c54 <readADC+0x58>)
 8000c0e:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <readADC+0x58>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	79fa      	ldrb	r2, [r7, #7]
 8000c14:	0192      	lsls	r2, r2, #6
 8000c16:	4313      	orrs	r3, r2
 8000c18:	630b      	str	r3, [r1, #48]	; 0x30
	ADC1->CR |= ADC_CR_ADSTART;			// start measurement
 8000c1a:	4a0e      	ldr	r2, [pc, #56]	; (8000c54 <readADC+0x58>)
 8000c1c:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <readADC+0x58>)
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	f043 0304 	orr.w	r3, r3, #4
 8000c24:	6093      	str	r3, [r2, #8]
	while(!(ADC1->ISR & ADC_ISR_EOS));	// wait for end of sequence
 8000c26:	bf00      	nop
 8000c28:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <readADC+0x58>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f003 0308 	and.w	r3, r3, #8
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d0f9      	beq.n	8000c28 <readADC+0x2c>
	int ADC_Val = ADC1->DR;				// read DR register
 8000c34:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <readADC+0x58>)
 8000c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c38:	60fb      	str	r3, [r7, #12]
	ADC1->ISR |= ADC_ISR_EOS;			// clear flag
 8000c3a:	4a06      	ldr	r2, [pc, #24]	; (8000c54 <readADC+0x58>)
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <readADC+0x58>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f043 0308 	orr.w	r3, r3, #8
 8000c44:	6013      	str	r3, [r2, #0]
	return ADC_Val;
 8000c46:	68fb      	ldr	r3, [r7, #12]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	50040000 	.word	0x50040000

08000c58 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000c62:	4909      	ldr	r1, [pc, #36]	; (8000c88 <NVIC_EnableIRQ+0x30>)
 8000c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c68:	095b      	lsrs	r3, r3, #5
 8000c6a:	79fa      	ldrb	r2, [r7, #7]
 8000c6c:	f002 021f 	and.w	r2, r2, #31
 8000c70:	2001      	movs	r0, #1
 8000c72:	fa00 f202 	lsl.w	r2, r0, r2
 8000c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000e100 	.word	0xe000e100

08000c8c <ButtonsInit>:
int startPressedTimeRight=0, pressedTimeRight = 0, stopPressedTimeRight=0;

int debouncingTime = 20;

void ButtonsInit()
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOEEN; // enable clock for GPIO E
 8000c90:	4a35      	ldr	r2, [pc, #212]	; (8000d68 <ButtonsInit+0xdc>)
 8000c92:	4b35      	ldr	r3, [pc, #212]	; (8000d68 <ButtonsInit+0xdc>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c96:	f043 0310 	orr.w	r3, r3, #16
 8000c9a:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; // enable clock for SYSCFG + COMP + VREFBUF
 8000c9c:	4a32      	ldr	r2, [pc, #200]	; (8000d68 <ButtonsInit+0xdc>)
 8000c9e:	4b32      	ldr	r3, [pc, #200]	; (8000d68 <ButtonsInit+0xdc>)
 8000ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	6613      	str	r3, [r2, #96]	; 0x60

	GPIOE->MODER &= ~(GPIO_MODER_MODE14_0 | GPIO_MODER_MODE14_1); //  configure PE14 [00] -> input mode, button UP
 8000ca8:	4a30      	ldr	r2, [pc, #192]	; (8000d6c <ButtonsInit+0xe0>)
 8000caa:	4b30      	ldr	r3, [pc, #192]	; (8000d6c <ButtonsInit+0xe0>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000cb2:	6013      	str	r3, [r2, #0]
	GPIOE->MODER &= ~(GPIO_MODER_MODE15_0 | GPIO_MODER_MODE15_1); //  configure PE15 [00] -> input mode, button DOWN
 8000cb4:	4a2d      	ldr	r2, [pc, #180]	; (8000d6c <ButtonsInit+0xe0>)
 8000cb6:	4b2d      	ldr	r3, [pc, #180]	; (8000d6c <ButtonsInit+0xe0>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000cbe:	6013      	str	r3, [r2, #0]
	GPIOE->MODER &= ~(GPIO_MODER_MODE10_0 | GPIO_MODER_MODE10_1); //  configure PE10 [00] -> input mode, button LEFT
 8000cc0:	4a2a      	ldr	r2, [pc, #168]	; (8000d6c <ButtonsInit+0xe0>)
 8000cc2:	4b2a      	ldr	r3, [pc, #168]	; (8000d6c <ButtonsInit+0xe0>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000cca:	6013      	str	r3, [r2, #0]
	GPIOE->MODER &= ~(GPIO_MODER_MODE12_0 | GPIO_MODER_MODE12_1); //  configure PE12 [00] -> input mode, button RIGHT
 8000ccc:	4a27      	ldr	r2, [pc, #156]	; (8000d6c <ButtonsInit+0xe0>)
 8000cce:	4b27      	ldr	r3, [pc, #156]	; (8000d6c <ButtonsInit+0xe0>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000cd6:	6013      	str	r3, [r2, #0]
	GPIOE->MODER &= ~(GPIO_MODER_MODE7_0 | GPIO_MODER_MODE7_1); //    configure PE7 [00] -> input mode, button MODE
 8000cd8:	4a24      	ldr	r2, [pc, #144]	; (8000d6c <ButtonsInit+0xe0>)
 8000cda:	4b24      	ldr	r3, [pc, #144]	; (8000d6c <ButtonsInit+0xe0>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ce2:	6013      	str	r3, [r2, #0]

	GPIOE->PUPDR |= GPIO_PUPDR_PUPD14_0; // configure PE14 [01] -> internal pull-up
 8000ce4:	4a21      	ldr	r2, [pc, #132]	; (8000d6c <ButtonsInit+0xe0>)
 8000ce6:	4b21      	ldr	r3, [pc, #132]	; (8000d6c <ButtonsInit+0xe0>)
 8000ce8:	68db      	ldr	r3, [r3, #12]
 8000cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cee:	60d3      	str	r3, [r2, #12]
	GPIOE->PUPDR |= GPIO_PUPDR_PUPD15_0; // configure PE15 [01] -> internal pull-up
 8000cf0:	4a1e      	ldr	r2, [pc, #120]	; (8000d6c <ButtonsInit+0xe0>)
 8000cf2:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <ButtonsInit+0xe0>)
 8000cf4:	68db      	ldr	r3, [r3, #12]
 8000cf6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000cfa:	60d3      	str	r3, [r2, #12]
	GPIOE->PUPDR |= GPIO_PUPDR_PUPD10_0; // configure PE10 [01] -> internal pull-up
 8000cfc:	4a1b      	ldr	r2, [pc, #108]	; (8000d6c <ButtonsInit+0xe0>)
 8000cfe:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <ButtonsInit+0xe0>)
 8000d00:	68db      	ldr	r3, [r3, #12]
 8000d02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d06:	60d3      	str	r3, [r2, #12]
	GPIOE->PUPDR |= GPIO_PUPDR_PUPD12_0; // configure PE12 [01] -> internal pull-up
 8000d08:	4a18      	ldr	r2, [pc, #96]	; (8000d6c <ButtonsInit+0xe0>)
 8000d0a:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <ButtonsInit+0xe0>)
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d12:	60d3      	str	r3, [r2, #12]
	GPIOE->PUPDR |= GPIO_PUPDR_PUPD7_0; // configure PE7 [01] -> internal pull-up
 8000d14:	4a15      	ldr	r2, [pc, #84]	; (8000d6c <ButtonsInit+0xe0>)
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <ButtonsInit+0xe0>)
 8000d18:	68db      	ldr	r3, [r3, #12]
 8000d1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d1e:	60d3      	str	r3, [r2, #12]

	SYSCFG->EXTICR[1] |= SYSCFG_EXTICR2_EXTI7_PE; // select PE line for EXTI
 8000d20:	4a13      	ldr	r2, [pc, #76]	; (8000d70 <ButtonsInit+0xe4>)
 8000d22:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <ButtonsInit+0xe4>)
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d2a:	60d3      	str	r3, [r2, #12]

	EXTI->FTSR1 |= EXTI_FTSR1_FT7; // falling trigger enable
 8000d2c:	4a11      	ldr	r2, [pc, #68]	; (8000d74 <ButtonsInit+0xe8>)
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <ButtonsInit+0xe8>)
 8000d30:	68db      	ldr	r3, [r3, #12]
 8000d32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d36:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR1 |= EXTI_RTSR1_RT7; // rising trigger enable
 8000d38:	4a0e      	ldr	r2, [pc, #56]	; (8000d74 <ButtonsInit+0xe8>)
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <ButtonsInit+0xe8>)
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d42:	6093      	str	r3, [r2, #8]

	EXTI->IMR1 |= EXTI_IMR1_IM7; // unmask interrupt line
 8000d44:	4a0b      	ldr	r2, [pc, #44]	; (8000d74 <ButtonsInit+0xe8>)
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <ButtonsInit+0xe8>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d4e:	6013      	str	r3, [r2, #0]
	EXTI->EMR1 |= EXTI_EMR1_EM7; // event
 8000d50:	4a08      	ldr	r2, [pc, #32]	; (8000d74 <ButtonsInit+0xe8>)
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <ButtonsInit+0xe8>)
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d5a:	6053      	str	r3, [r2, #4]

	NVIC_EnableIRQ(EXTI9_5_IRQn); // enable NVIC interface
 8000d5c:	2017      	movs	r0, #23
 8000d5e:	f7ff ff7b 	bl	8000c58 <NVIC_EnableIRQ>

}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	48001000 	.word	0x48001000
 8000d70:	40010000 	.word	0x40010000
 8000d74:	40010400 	.word	0x40010400

08000d78 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler()
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
	//if(EXTI->PR1 & EXTI_PR1_PIF7)
	//{
		if(GPIOE->IDR & GPIO_IDR_ID7) autoMode = 0;
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <EXTI9_5_IRQHandler+0x34>)
 8000d7e:	691b      	ldr	r3, [r3, #16]
 8000d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d003      	beq.n	8000d90 <EXTI9_5_IRQHandler+0x18>
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <EXTI9_5_IRQHandler+0x38>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
 8000d8e:	e002      	b.n	8000d96 <EXTI9_5_IRQHandler+0x1e>
		else autoMode = 1;
 8000d90:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <EXTI9_5_IRQHandler+0x38>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	701a      	strb	r2, [r3, #0]

		EXTI->PR1 |= EXTI_PR1_PIF7;
 8000d96:	4a07      	ldr	r2, [pc, #28]	; (8000db4 <EXTI9_5_IRQHandler+0x3c>)
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <EXTI9_5_IRQHandler+0x3c>)
 8000d9a:	695b      	ldr	r3, [r3, #20]
 8000d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000da0:	6153      	str	r3, [r2, #20]
	//}

}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	48001000 	.word	0x48001000
 8000db0:	200000ec 	.word	0x200000ec
 8000db4:	40010400 	.word	0x40010400

08000db8 <ButtonUpRead>:

/* Button UP */
char ButtonUpRead()
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
	int currentTime = millis();
 8000dbe:	f001 fb81 	bl	80024c4 <millis>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	607b      	str	r3, [r7, #4]

	switch(stateButtonUp)
 8000dc6:	4b4f      	ldr	r3, [pc, #316]	; (8000f04 <ButtonUpRead+0x14c>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	2b03      	cmp	r3, #3
 8000dce:	f200 8094 	bhi.w	8000efa <ButtonUpRead+0x142>
 8000dd2:	a201      	add	r2, pc, #4	; (adr r2, 8000dd8 <ButtonUpRead+0x20>)
 8000dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd8:	08000de9 	.word	0x08000de9
 8000ddc:	08000e0f 	.word	0x08000e0f
 8000de0:	08000e57 	.word	0x08000e57
 8000de4:	08000e83 	.word	0x08000e83
	{
	case 1:
		if(buttonUpPressed)
 8000de8:	4b47      	ldr	r3, [pc, #284]	; (8000f08 <ButtonUpRead+0x150>)
 8000dea:	691b      	ldr	r3, [r3, #16]
 8000dec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d17b      	bne.n	8000eec <ButtonUpRead+0x134>
		{	stateButtonUp = 2;
 8000df4:	4b43      	ldr	r3, [pc, #268]	; (8000f04 <ButtonUpRead+0x14c>)
 8000df6:	2202      	movs	r2, #2
 8000df8:	701a      	strb	r2, [r3, #0]
			startPressedTimeUp = millis();
 8000dfa:	f001 fb63 	bl	80024c4 <millis>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	461a      	mov	r2, r3
 8000e02:	4b42      	ldr	r3, [pc, #264]	; (8000f0c <ButtonUpRead+0x154>)
 8000e04:	601a      	str	r2, [r3, #0]
			pressedTimeUp = 0;
 8000e06:	4b42      	ldr	r3, [pc, #264]	; (8000f10 <ButtonUpRead+0x158>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
		}
	break;
 8000e0c:	e06e      	b.n	8000eec <ButtonUpRead+0x134>

	// check debouncing
	case 2:
		if((currentTime - startPressedTimeUp>debouncingTime) && buttonUpPressed) stateButtonUp = 3;
 8000e0e:	4b3f      	ldr	r3, [pc, #252]	; (8000f0c <ButtonUpRead+0x154>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	1ad2      	subs	r2, r2, r3
 8000e16:	4b3f      	ldr	r3, [pc, #252]	; (8000f14 <ButtonUpRead+0x15c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	dd09      	ble.n	8000e32 <ButtonUpRead+0x7a>
 8000e1e:	4b3a      	ldr	r3, [pc, #232]	; (8000f08 <ButtonUpRead+0x150>)
 8000e20:	691b      	ldr	r3, [r3, #16]
 8000e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d103      	bne.n	8000e32 <ButtonUpRead+0x7a>
 8000e2a:	4b36      	ldr	r3, [pc, #216]	; (8000f04 <ButtonUpRead+0x14c>)
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	701a      	strb	r2, [r3, #0]
		else if((currentTime - startPressedTimeUp>debouncingTime) && !buttonUpPressed) stateButtonUp = 1;
	break;
 8000e30:	e05e      	b.n	8000ef0 <ButtonUpRead+0x138>
		else if((currentTime - startPressedTimeUp>debouncingTime) && !buttonUpPressed) stateButtonUp = 1;
 8000e32:	4b36      	ldr	r3, [pc, #216]	; (8000f0c <ButtonUpRead+0x154>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	1ad2      	subs	r2, r2, r3
 8000e3a:	4b36      	ldr	r3, [pc, #216]	; (8000f14 <ButtonUpRead+0x15c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	dd56      	ble.n	8000ef0 <ButtonUpRead+0x138>
 8000e42:	4b31      	ldr	r3, [pc, #196]	; (8000f08 <ButtonUpRead+0x150>)
 8000e44:	691b      	ldr	r3, [r3, #16]
 8000e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d050      	beq.n	8000ef0 <ButtonUpRead+0x138>
 8000e4e:	4b2d      	ldr	r3, [pc, #180]	; (8000f04 <ButtonUpRead+0x14c>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	701a      	strb	r2, [r3, #0]
	break;
 8000e54:	e04c      	b.n	8000ef0 <ButtonUpRead+0x138>

	case 3:
		pressedTimeUp = currentTime - startPressedTimeUp;	// debouncing, counting pressed time
 8000e56:	4b2d      	ldr	r3, [pc, #180]	; (8000f0c <ButtonUpRead+0x154>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	4a2c      	ldr	r2, [pc, #176]	; (8000f10 <ButtonUpRead+0x158>)
 8000e60:	6013      	str	r3, [r2, #0]
		if(!buttonUpPressed) {stateButtonUp = 4; stopPressedTimeUp = millis();}		//
 8000e62:	4b29      	ldr	r3, [pc, #164]	; (8000f08 <ButtonUpRead+0x150>)
 8000e64:	691b      	ldr	r3, [r3, #16]
 8000e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d042      	beq.n	8000ef4 <ButtonUpRead+0x13c>
 8000e6e:	4b25      	ldr	r3, [pc, #148]	; (8000f04 <ButtonUpRead+0x14c>)
 8000e70:	2204      	movs	r2, #4
 8000e72:	701a      	strb	r2, [r3, #0]
 8000e74:	f001 fb26 	bl	80024c4 <millis>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	4b26      	ldr	r3, [pc, #152]	; (8000f18 <ButtonUpRead+0x160>)
 8000e7e:	601a      	str	r2, [r3, #0]
	break;
 8000e80:	e038      	b.n	8000ef4 <ButtonUpRead+0x13c>

	// check debouncing
	case 4:
		if((currentTime - stopPressedTimeUp>debouncingTime) && buttonUpPressed) stateButtonUp = 3;
 8000e82:	4b25      	ldr	r3, [pc, #148]	; (8000f18 <ButtonUpRead+0x160>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	1ad2      	subs	r2, r2, r3
 8000e8a:	4b22      	ldr	r3, [pc, #136]	; (8000f14 <ButtonUpRead+0x15c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	dd09      	ble.n	8000ea6 <ButtonUpRead+0xee>
 8000e92:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <ButtonUpRead+0x150>)
 8000e94:	691b      	ldr	r3, [r3, #16]
 8000e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d103      	bne.n	8000ea6 <ButtonUpRead+0xee>
 8000e9e:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <ButtonUpRead+0x14c>)
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	701a      	strb	r2, [r3, #0]
		{
		stateButtonUp = 1;
		if((pressedTimeUp >= 50) && (pressedTimeUp <= 1000)) return 1;	// short press, one click
		else if(pressedTimeUp > 1000) return 2;
		}
	break;
 8000ea4:	e028      	b.n	8000ef8 <ButtonUpRead+0x140>
		else if((currentTime - stopPressedTimeUp>debouncingTime) && !buttonUpPressed)
 8000ea6:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <ButtonUpRead+0x160>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	1ad2      	subs	r2, r2, r3
 8000eae:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <ButtonUpRead+0x15c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	dd20      	ble.n	8000ef8 <ButtonUpRead+0x140>
 8000eb6:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <ButtonUpRead+0x150>)
 8000eb8:	691b      	ldr	r3, [r3, #16]
 8000eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d01a      	beq.n	8000ef8 <ButtonUpRead+0x140>
		stateButtonUp = 1;
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <ButtonUpRead+0x14c>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	701a      	strb	r2, [r3, #0]
		if((pressedTimeUp >= 50) && (pressedTimeUp <= 1000)) return 1;	// short press, one click
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <ButtonUpRead+0x158>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b31      	cmp	r3, #49	; 0x31
 8000ece:	dd06      	ble.n	8000ede <ButtonUpRead+0x126>
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <ButtonUpRead+0x158>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ed8:	dc01      	bgt.n	8000ede <ButtonUpRead+0x126>
 8000eda:	2301      	movs	r3, #1
 8000edc:	e00d      	b.n	8000efa <ButtonUpRead+0x142>
		else if(pressedTimeUp > 1000) return 2;
 8000ede:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <ButtonUpRead+0x158>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ee6:	dd07      	ble.n	8000ef8 <ButtonUpRead+0x140>
 8000ee8:	2302      	movs	r3, #2
 8000eea:	e006      	b.n	8000efa <ButtonUpRead+0x142>
	break;
 8000eec:	bf00      	nop
 8000eee:	e004      	b.n	8000efa <ButtonUpRead+0x142>
	break;
 8000ef0:	bf00      	nop
 8000ef2:	e002      	b.n	8000efa <ButtonUpRead+0x142>
	break;
 8000ef4:	bf00      	nop
 8000ef6:	e000      	b.n	8000efa <ButtonUpRead+0x142>
	break;
 8000ef8:	bf00      	nop
	}
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000000 	.word	0x20000000
 8000f08:	48001000 	.word	0x48001000
 8000f0c:	2000008c 	.word	0x2000008c
 8000f10:	20000090 	.word	0x20000090
 8000f14:	20000004 	.word	0x20000004
 8000f18:	20000094 	.word	0x20000094

08000f1c <ButtonDownRead>:

/* Button DOWN */
char ButtonDownRead()
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
	int currentTime = millis();
 8000f22:	f001 facf 	bl	80024c4 <millis>
 8000f26:	4603      	mov	r3, r0
 8000f28:	607b      	str	r3, [r7, #4]

	switch(stateButtonDown)
 8000f2a:	4b4f      	ldr	r3, [pc, #316]	; (8001068 <ButtonDownRead+0x14c>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	2b03      	cmp	r3, #3
 8000f32:	f200 8094 	bhi.w	800105e <ButtonDownRead+0x142>
 8000f36:	a201      	add	r2, pc, #4	; (adr r2, 8000f3c <ButtonDownRead+0x20>)
 8000f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f3c:	08000f4d 	.word	0x08000f4d
 8000f40:	08000f73 	.word	0x08000f73
 8000f44:	08000fbb 	.word	0x08000fbb
 8000f48:	08000fe7 	.word	0x08000fe7
	{
	case 1:
		if(buttonDownPressed)
 8000f4c:	4b47      	ldr	r3, [pc, #284]	; (800106c <ButtonDownRead+0x150>)
 8000f4e:	691b      	ldr	r3, [r3, #16]
 8000f50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d17b      	bne.n	8001050 <ButtonDownRead+0x134>
		{	stateButtonDown = 2;
 8000f58:	4b43      	ldr	r3, [pc, #268]	; (8001068 <ButtonDownRead+0x14c>)
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	701a      	strb	r2, [r3, #0]
			startPressedTimeDown = millis();
 8000f5e:	f001 fab1 	bl	80024c4 <millis>
 8000f62:	4603      	mov	r3, r0
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b42      	ldr	r3, [pc, #264]	; (8001070 <ButtonDownRead+0x154>)
 8000f68:	601a      	str	r2, [r3, #0]
			pressedTimeDown = 0;
 8000f6a:	4b42      	ldr	r3, [pc, #264]	; (8001074 <ButtonDownRead+0x158>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
		}
	break;
 8000f70:	e06e      	b.n	8001050 <ButtonDownRead+0x134>

	case 2:
		if((currentTime - startPressedTimeDown>debouncingTime) && buttonDownPressed) stateButtonDown = 3;
 8000f72:	4b3f      	ldr	r3, [pc, #252]	; (8001070 <ButtonDownRead+0x154>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	1ad2      	subs	r2, r2, r3
 8000f7a:	4b3f      	ldr	r3, [pc, #252]	; (8001078 <ButtonDownRead+0x15c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	dd09      	ble.n	8000f96 <ButtonDownRead+0x7a>
 8000f82:	4b3a      	ldr	r3, [pc, #232]	; (800106c <ButtonDownRead+0x150>)
 8000f84:	691b      	ldr	r3, [r3, #16]
 8000f86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d103      	bne.n	8000f96 <ButtonDownRead+0x7a>
 8000f8e:	4b36      	ldr	r3, [pc, #216]	; (8001068 <ButtonDownRead+0x14c>)
 8000f90:	2203      	movs	r2, #3
 8000f92:	701a      	strb	r2, [r3, #0]
		else if((currentTime - startPressedTimeDown>debouncingTime) && !buttonDownPressed) stateButtonDown = 1;
	break;
 8000f94:	e05e      	b.n	8001054 <ButtonDownRead+0x138>
		else if((currentTime - startPressedTimeDown>debouncingTime) && !buttonDownPressed) stateButtonDown = 1;
 8000f96:	4b36      	ldr	r3, [pc, #216]	; (8001070 <ButtonDownRead+0x154>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	1ad2      	subs	r2, r2, r3
 8000f9e:	4b36      	ldr	r3, [pc, #216]	; (8001078 <ButtonDownRead+0x15c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	dd56      	ble.n	8001054 <ButtonDownRead+0x138>
 8000fa6:	4b31      	ldr	r3, [pc, #196]	; (800106c <ButtonDownRead+0x150>)
 8000fa8:	691b      	ldr	r3, [r3, #16]
 8000faa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d050      	beq.n	8001054 <ButtonDownRead+0x138>
 8000fb2:	4b2d      	ldr	r3, [pc, #180]	; (8001068 <ButtonDownRead+0x14c>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	701a      	strb	r2, [r3, #0]
	break;
 8000fb8:	e04c      	b.n	8001054 <ButtonDownRead+0x138>

	case 3:
		pressedTimeDown = currentTime - startPressedTimeDown;	// debouncing, counting pressed time
 8000fba:	4b2d      	ldr	r3, [pc, #180]	; (8001070 <ButtonDownRead+0x154>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	4a2c      	ldr	r2, [pc, #176]	; (8001074 <ButtonDownRead+0x158>)
 8000fc4:	6013      	str	r3, [r2, #0]
		if(!buttonDownPressed) {stateButtonDown = 4; stopPressedTimeDown = millis();}
 8000fc6:	4b29      	ldr	r3, [pc, #164]	; (800106c <ButtonDownRead+0x150>)
 8000fc8:	691b      	ldr	r3, [r3, #16]
 8000fca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d042      	beq.n	8001058 <ButtonDownRead+0x13c>
 8000fd2:	4b25      	ldr	r3, [pc, #148]	; (8001068 <ButtonDownRead+0x14c>)
 8000fd4:	2204      	movs	r2, #4
 8000fd6:	701a      	strb	r2, [r3, #0]
 8000fd8:	f001 fa74 	bl	80024c4 <millis>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	461a      	mov	r2, r3
 8000fe0:	4b26      	ldr	r3, [pc, #152]	; (800107c <ButtonDownRead+0x160>)
 8000fe2:	601a      	str	r2, [r3, #0]
	break;
 8000fe4:	e038      	b.n	8001058 <ButtonDownRead+0x13c>

	case 4:
		if((currentTime - stopPressedTimeDown>debouncingTime) && buttonDownPressed) stateButtonDown = 3;
 8000fe6:	4b25      	ldr	r3, [pc, #148]	; (800107c <ButtonDownRead+0x160>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	1ad2      	subs	r2, r2, r3
 8000fee:	4b22      	ldr	r3, [pc, #136]	; (8001078 <ButtonDownRead+0x15c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	dd09      	ble.n	800100a <ButtonDownRead+0xee>
 8000ff6:	4b1d      	ldr	r3, [pc, #116]	; (800106c <ButtonDownRead+0x150>)
 8000ff8:	691b      	ldr	r3, [r3, #16]
 8000ffa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d103      	bne.n	800100a <ButtonDownRead+0xee>
 8001002:	4b19      	ldr	r3, [pc, #100]	; (8001068 <ButtonDownRead+0x14c>)
 8001004:	2203      	movs	r2, #3
 8001006:	701a      	strb	r2, [r3, #0]
		{
		stateButtonDown = 1;
		if((pressedTimeDown >= 50) && (pressedTimeDown <= 1000)) return 1;	// short press, one click
		else if(pressedTimeDown > 1000) return 2;
		}
	break;
 8001008:	e028      	b.n	800105c <ButtonDownRead+0x140>
		else if((currentTime - stopPressedTimeDown>debouncingTime) && !buttonDownPressed)
 800100a:	4b1c      	ldr	r3, [pc, #112]	; (800107c <ButtonDownRead+0x160>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	1ad2      	subs	r2, r2, r3
 8001012:	4b19      	ldr	r3, [pc, #100]	; (8001078 <ButtonDownRead+0x15c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	429a      	cmp	r2, r3
 8001018:	dd20      	ble.n	800105c <ButtonDownRead+0x140>
 800101a:	4b14      	ldr	r3, [pc, #80]	; (800106c <ButtonDownRead+0x150>)
 800101c:	691b      	ldr	r3, [r3, #16]
 800101e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d01a      	beq.n	800105c <ButtonDownRead+0x140>
		stateButtonDown = 1;
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <ButtonDownRead+0x14c>)
 8001028:	2201      	movs	r2, #1
 800102a:	701a      	strb	r2, [r3, #0]
		if((pressedTimeDown >= 50) && (pressedTimeDown <= 1000)) return 1;	// short press, one click
 800102c:	4b11      	ldr	r3, [pc, #68]	; (8001074 <ButtonDownRead+0x158>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b31      	cmp	r3, #49	; 0x31
 8001032:	dd06      	ble.n	8001042 <ButtonDownRead+0x126>
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <ButtonDownRead+0x158>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800103c:	dc01      	bgt.n	8001042 <ButtonDownRead+0x126>
 800103e:	2301      	movs	r3, #1
 8001040:	e00d      	b.n	800105e <ButtonDownRead+0x142>
		else if(pressedTimeDown > 1000) return 2;
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <ButtonDownRead+0x158>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800104a:	dd07      	ble.n	800105c <ButtonDownRead+0x140>
 800104c:	2302      	movs	r3, #2
 800104e:	e006      	b.n	800105e <ButtonDownRead+0x142>
	break;
 8001050:	bf00      	nop
 8001052:	e004      	b.n	800105e <ButtonDownRead+0x142>
	break;
 8001054:	bf00      	nop
 8001056:	e002      	b.n	800105e <ButtonDownRead+0x142>
	break;
 8001058:	bf00      	nop
 800105a:	e000      	b.n	800105e <ButtonDownRead+0x142>
	break;
 800105c:	bf00      	nop
	}
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000001 	.word	0x20000001
 800106c:	48001000 	.word	0x48001000
 8001070:	20000098 	.word	0x20000098
 8001074:	2000009c 	.word	0x2000009c
 8001078:	20000004 	.word	0x20000004
 800107c:	200000a0 	.word	0x200000a0

08001080 <ButtonLeftRead>:

/* Button LEFT */
char ButtonLeftRead()
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
	int currentTime = millis();
 8001086:	f001 fa1d 	bl	80024c4 <millis>
 800108a:	4603      	mov	r3, r0
 800108c:	607b      	str	r3, [r7, #4]

	switch(stateButtonLeft)
 800108e:	4b4f      	ldr	r3, [pc, #316]	; (80011cc <ButtonLeftRead+0x14c>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	3b01      	subs	r3, #1
 8001094:	2b03      	cmp	r3, #3
 8001096:	f200 8094 	bhi.w	80011c2 <ButtonLeftRead+0x142>
 800109a:	a201      	add	r2, pc, #4	; (adr r2, 80010a0 <ButtonLeftRead+0x20>)
 800109c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a0:	080010b1 	.word	0x080010b1
 80010a4:	080010d7 	.word	0x080010d7
 80010a8:	0800111f 	.word	0x0800111f
 80010ac:	0800114b 	.word	0x0800114b
	{
	case 1:
		if(buttonLeftPressed)
 80010b0:	4b47      	ldr	r3, [pc, #284]	; (80011d0 <ButtonLeftRead+0x150>)
 80010b2:	691b      	ldr	r3, [r3, #16]
 80010b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d17b      	bne.n	80011b4 <ButtonLeftRead+0x134>
		{	stateButtonLeft = 2;
 80010bc:	4b43      	ldr	r3, [pc, #268]	; (80011cc <ButtonLeftRead+0x14c>)
 80010be:	2202      	movs	r2, #2
 80010c0:	701a      	strb	r2, [r3, #0]
			startPressedTimeLeft = millis();
 80010c2:	f001 f9ff 	bl	80024c4 <millis>
 80010c6:	4603      	mov	r3, r0
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b42      	ldr	r3, [pc, #264]	; (80011d4 <ButtonLeftRead+0x154>)
 80010cc:	601a      	str	r2, [r3, #0]
			pressedTimeLeft = 0;
 80010ce:	4b42      	ldr	r3, [pc, #264]	; (80011d8 <ButtonLeftRead+0x158>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
		}
	break;
 80010d4:	e06e      	b.n	80011b4 <ButtonLeftRead+0x134>

	case 2:
		if((currentTime - startPressedTimeLeft>debouncingTime) && buttonLeftPressed) stateButtonLeft = 3;
 80010d6:	4b3f      	ldr	r3, [pc, #252]	; (80011d4 <ButtonLeftRead+0x154>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	1ad2      	subs	r2, r2, r3
 80010de:	4b3f      	ldr	r3, [pc, #252]	; (80011dc <ButtonLeftRead+0x15c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	dd09      	ble.n	80010fa <ButtonLeftRead+0x7a>
 80010e6:	4b3a      	ldr	r3, [pc, #232]	; (80011d0 <ButtonLeftRead+0x150>)
 80010e8:	691b      	ldr	r3, [r3, #16]
 80010ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d103      	bne.n	80010fa <ButtonLeftRead+0x7a>
 80010f2:	4b36      	ldr	r3, [pc, #216]	; (80011cc <ButtonLeftRead+0x14c>)
 80010f4:	2203      	movs	r2, #3
 80010f6:	701a      	strb	r2, [r3, #0]
		else if((currentTime - startPressedTimeLeft>debouncingTime) && !buttonLeftPressed) stateButtonLeft = 1;
	break;
 80010f8:	e05e      	b.n	80011b8 <ButtonLeftRead+0x138>
		else if((currentTime - startPressedTimeLeft>debouncingTime) && !buttonLeftPressed) stateButtonLeft = 1;
 80010fa:	4b36      	ldr	r3, [pc, #216]	; (80011d4 <ButtonLeftRead+0x154>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	1ad2      	subs	r2, r2, r3
 8001102:	4b36      	ldr	r3, [pc, #216]	; (80011dc <ButtonLeftRead+0x15c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	429a      	cmp	r2, r3
 8001108:	dd56      	ble.n	80011b8 <ButtonLeftRead+0x138>
 800110a:	4b31      	ldr	r3, [pc, #196]	; (80011d0 <ButtonLeftRead+0x150>)
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d050      	beq.n	80011b8 <ButtonLeftRead+0x138>
 8001116:	4b2d      	ldr	r3, [pc, #180]	; (80011cc <ButtonLeftRead+0x14c>)
 8001118:	2201      	movs	r2, #1
 800111a:	701a      	strb	r2, [r3, #0]
	break;
 800111c:	e04c      	b.n	80011b8 <ButtonLeftRead+0x138>

	case 3:
		pressedTimeLeft = currentTime - startPressedTimeLeft;	// debouncing, counting pressed time
 800111e:	4b2d      	ldr	r3, [pc, #180]	; (80011d4 <ButtonLeftRead+0x154>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	4a2c      	ldr	r2, [pc, #176]	; (80011d8 <ButtonLeftRead+0x158>)
 8001128:	6013      	str	r3, [r2, #0]
		if(!buttonLeftPressed) {stateButtonLeft = 4; stopPressedTimeLeft = millis();}
 800112a:	4b29      	ldr	r3, [pc, #164]	; (80011d0 <ButtonLeftRead+0x150>)
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d042      	beq.n	80011bc <ButtonLeftRead+0x13c>
 8001136:	4b25      	ldr	r3, [pc, #148]	; (80011cc <ButtonLeftRead+0x14c>)
 8001138:	2204      	movs	r2, #4
 800113a:	701a      	strb	r2, [r3, #0]
 800113c:	f001 f9c2 	bl	80024c4 <millis>
 8001140:	4603      	mov	r3, r0
 8001142:	461a      	mov	r2, r3
 8001144:	4b26      	ldr	r3, [pc, #152]	; (80011e0 <ButtonLeftRead+0x160>)
 8001146:	601a      	str	r2, [r3, #0]
	break;
 8001148:	e038      	b.n	80011bc <ButtonLeftRead+0x13c>

	case 4:
		if((currentTime - stopPressedTimeLeft>debouncingTime) && buttonLeftPressed) stateButtonLeft = 3;
 800114a:	4b25      	ldr	r3, [pc, #148]	; (80011e0 <ButtonLeftRead+0x160>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	1ad2      	subs	r2, r2, r3
 8001152:	4b22      	ldr	r3, [pc, #136]	; (80011dc <ButtonLeftRead+0x15c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	429a      	cmp	r2, r3
 8001158:	dd09      	ble.n	800116e <ButtonLeftRead+0xee>
 800115a:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <ButtonLeftRead+0x150>)
 800115c:	691b      	ldr	r3, [r3, #16]
 800115e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d103      	bne.n	800116e <ButtonLeftRead+0xee>
 8001166:	4b19      	ldr	r3, [pc, #100]	; (80011cc <ButtonLeftRead+0x14c>)
 8001168:	2203      	movs	r2, #3
 800116a:	701a      	strb	r2, [r3, #0]
		{
		stateButtonLeft = 1;
		if((pressedTimeLeft >= 50) && (pressedTimeLeft <= 1000)) return 1;	// short press, one click
		else if(pressedTimeLeft > 1000) return 2;
		}
	break;
 800116c:	e028      	b.n	80011c0 <ButtonLeftRead+0x140>
		else if((currentTime - stopPressedTimeLeft>debouncingTime) && !buttonLeftPressed)
 800116e:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <ButtonLeftRead+0x160>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	1ad2      	subs	r2, r2, r3
 8001176:	4b19      	ldr	r3, [pc, #100]	; (80011dc <ButtonLeftRead+0x15c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	429a      	cmp	r2, r3
 800117c:	dd20      	ble.n	80011c0 <ButtonLeftRead+0x140>
 800117e:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <ButtonLeftRead+0x150>)
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d01a      	beq.n	80011c0 <ButtonLeftRead+0x140>
		stateButtonLeft = 1;
 800118a:	4b10      	ldr	r3, [pc, #64]	; (80011cc <ButtonLeftRead+0x14c>)
 800118c:	2201      	movs	r2, #1
 800118e:	701a      	strb	r2, [r3, #0]
		if((pressedTimeLeft >= 50) && (pressedTimeLeft <= 1000)) return 1;	// short press, one click
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <ButtonLeftRead+0x158>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b31      	cmp	r3, #49	; 0x31
 8001196:	dd06      	ble.n	80011a6 <ButtonLeftRead+0x126>
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <ButtonLeftRead+0x158>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011a0:	dc01      	bgt.n	80011a6 <ButtonLeftRead+0x126>
 80011a2:	2301      	movs	r3, #1
 80011a4:	e00d      	b.n	80011c2 <ButtonLeftRead+0x142>
		else if(pressedTimeLeft > 1000) return 2;
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <ButtonLeftRead+0x158>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011ae:	dd07      	ble.n	80011c0 <ButtonLeftRead+0x140>
 80011b0:	2302      	movs	r3, #2
 80011b2:	e006      	b.n	80011c2 <ButtonLeftRead+0x142>
	break;
 80011b4:	bf00      	nop
 80011b6:	e004      	b.n	80011c2 <ButtonLeftRead+0x142>
	break;
 80011b8:	bf00      	nop
 80011ba:	e002      	b.n	80011c2 <ButtonLeftRead+0x142>
	break;
 80011bc:	bf00      	nop
 80011be:	e000      	b.n	80011c2 <ButtonLeftRead+0x142>
	break;
 80011c0:	bf00      	nop
	}
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000002 	.word	0x20000002
 80011d0:	48001000 	.word	0x48001000
 80011d4:	200000a4 	.word	0x200000a4
 80011d8:	200000a8 	.word	0x200000a8
 80011dc:	20000004 	.word	0x20000004
 80011e0:	200000ac 	.word	0x200000ac

080011e4 <ButtonRightRead>:

/* Button RIGHT */
char ButtonRightRead()
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
	int currentTime = millis();
 80011ea:	f001 f96b 	bl	80024c4 <millis>
 80011ee:	4603      	mov	r3, r0
 80011f0:	607b      	str	r3, [r7, #4]

	switch(stateButtonRight)
 80011f2:	4b4f      	ldr	r3, [pc, #316]	; (8001330 <ButtonRightRead+0x14c>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	f200 8094 	bhi.w	8001326 <ButtonRightRead+0x142>
 80011fe:	a201      	add	r2, pc, #4	; (adr r2, 8001204 <ButtonRightRead+0x20>)
 8001200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001204:	08001215 	.word	0x08001215
 8001208:	0800123b 	.word	0x0800123b
 800120c:	08001283 	.word	0x08001283
 8001210:	080012af 	.word	0x080012af
	{
	case 1:
		if(buttonRightPressed)
 8001214:	4b47      	ldr	r3, [pc, #284]	; (8001334 <ButtonRightRead+0x150>)
 8001216:	691b      	ldr	r3, [r3, #16]
 8001218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800121c:	2b00      	cmp	r3, #0
 800121e:	d17b      	bne.n	8001318 <ButtonRightRead+0x134>
		{	stateButtonRight = 2;
 8001220:	4b43      	ldr	r3, [pc, #268]	; (8001330 <ButtonRightRead+0x14c>)
 8001222:	2202      	movs	r2, #2
 8001224:	701a      	strb	r2, [r3, #0]
			startPressedTimeRight = millis();
 8001226:	f001 f94d 	bl	80024c4 <millis>
 800122a:	4603      	mov	r3, r0
 800122c:	461a      	mov	r2, r3
 800122e:	4b42      	ldr	r3, [pc, #264]	; (8001338 <ButtonRightRead+0x154>)
 8001230:	601a      	str	r2, [r3, #0]
			pressedTimeRight = 0;
 8001232:	4b42      	ldr	r3, [pc, #264]	; (800133c <ButtonRightRead+0x158>)
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
		}
	break;
 8001238:	e06e      	b.n	8001318 <ButtonRightRead+0x134>

	case 2:
		if((currentTime - startPressedTimeRight>debouncingTime) && buttonRightPressed) stateButtonRight = 3;
 800123a:	4b3f      	ldr	r3, [pc, #252]	; (8001338 <ButtonRightRead+0x154>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	1ad2      	subs	r2, r2, r3
 8001242:	4b3f      	ldr	r3, [pc, #252]	; (8001340 <ButtonRightRead+0x15c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	429a      	cmp	r2, r3
 8001248:	dd09      	ble.n	800125e <ButtonRightRead+0x7a>
 800124a:	4b3a      	ldr	r3, [pc, #232]	; (8001334 <ButtonRightRead+0x150>)
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001252:	2b00      	cmp	r3, #0
 8001254:	d103      	bne.n	800125e <ButtonRightRead+0x7a>
 8001256:	4b36      	ldr	r3, [pc, #216]	; (8001330 <ButtonRightRead+0x14c>)
 8001258:	2203      	movs	r2, #3
 800125a:	701a      	strb	r2, [r3, #0]
		else if((currentTime - startPressedTimeRight>debouncingTime) && !buttonRightPressed) stateButtonRight = 1;
	break;
 800125c:	e05e      	b.n	800131c <ButtonRightRead+0x138>
		else if((currentTime - startPressedTimeRight>debouncingTime) && !buttonRightPressed) stateButtonRight = 1;
 800125e:	4b36      	ldr	r3, [pc, #216]	; (8001338 <ButtonRightRead+0x154>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	1ad2      	subs	r2, r2, r3
 8001266:	4b36      	ldr	r3, [pc, #216]	; (8001340 <ButtonRightRead+0x15c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	429a      	cmp	r2, r3
 800126c:	dd56      	ble.n	800131c <ButtonRightRead+0x138>
 800126e:	4b31      	ldr	r3, [pc, #196]	; (8001334 <ButtonRightRead+0x150>)
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001276:	2b00      	cmp	r3, #0
 8001278:	d050      	beq.n	800131c <ButtonRightRead+0x138>
 800127a:	4b2d      	ldr	r3, [pc, #180]	; (8001330 <ButtonRightRead+0x14c>)
 800127c:	2201      	movs	r2, #1
 800127e:	701a      	strb	r2, [r3, #0]
	break;
 8001280:	e04c      	b.n	800131c <ButtonRightRead+0x138>

	case 3:
		pressedTimeRight = currentTime - startPressedTimeRight;	// debouncing, counting pressed time
 8001282:	4b2d      	ldr	r3, [pc, #180]	; (8001338 <ButtonRightRead+0x154>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	4a2c      	ldr	r2, [pc, #176]	; (800133c <ButtonRightRead+0x158>)
 800128c:	6013      	str	r3, [r2, #0]
		if(!buttonRightPressed) {stateButtonRight = 4; stopPressedTimeRight = millis();}
 800128e:	4b29      	ldr	r3, [pc, #164]	; (8001334 <ButtonRightRead+0x150>)
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001296:	2b00      	cmp	r3, #0
 8001298:	d042      	beq.n	8001320 <ButtonRightRead+0x13c>
 800129a:	4b25      	ldr	r3, [pc, #148]	; (8001330 <ButtonRightRead+0x14c>)
 800129c:	2204      	movs	r2, #4
 800129e:	701a      	strb	r2, [r3, #0]
 80012a0:	f001 f910 	bl	80024c4 <millis>
 80012a4:	4603      	mov	r3, r0
 80012a6:	461a      	mov	r2, r3
 80012a8:	4b26      	ldr	r3, [pc, #152]	; (8001344 <ButtonRightRead+0x160>)
 80012aa:	601a      	str	r2, [r3, #0]
	break;
 80012ac:	e038      	b.n	8001320 <ButtonRightRead+0x13c>

	case 4:
		if((currentTime - stopPressedTimeRight>debouncingTime) && buttonRightPressed) stateButtonRight = 3;
 80012ae:	4b25      	ldr	r3, [pc, #148]	; (8001344 <ButtonRightRead+0x160>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	1ad2      	subs	r2, r2, r3
 80012b6:	4b22      	ldr	r3, [pc, #136]	; (8001340 <ButtonRightRead+0x15c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	dd09      	ble.n	80012d2 <ButtonRightRead+0xee>
 80012be:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <ButtonRightRead+0x150>)
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d103      	bne.n	80012d2 <ButtonRightRead+0xee>
 80012ca:	4b19      	ldr	r3, [pc, #100]	; (8001330 <ButtonRightRead+0x14c>)
 80012cc:	2203      	movs	r2, #3
 80012ce:	701a      	strb	r2, [r3, #0]
		{
		stateButtonRight = 1;
		if((pressedTimeRight >= 50) && (pressedTimeRight <= 1000)) return 1;	// short press, one click
		else if(pressedTimeRight > 1000) return 2;
		}
	break;
 80012d0:	e028      	b.n	8001324 <ButtonRightRead+0x140>
		else if((currentTime - stopPressedTimeRight>debouncingTime) && !buttonRightPressed)
 80012d2:	4b1c      	ldr	r3, [pc, #112]	; (8001344 <ButtonRightRead+0x160>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	1ad2      	subs	r2, r2, r3
 80012da:	4b19      	ldr	r3, [pc, #100]	; (8001340 <ButtonRightRead+0x15c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	429a      	cmp	r2, r3
 80012e0:	dd20      	ble.n	8001324 <ButtonRightRead+0x140>
 80012e2:	4b14      	ldr	r3, [pc, #80]	; (8001334 <ButtonRightRead+0x150>)
 80012e4:	691b      	ldr	r3, [r3, #16]
 80012e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d01a      	beq.n	8001324 <ButtonRightRead+0x140>
		stateButtonRight = 1;
 80012ee:	4b10      	ldr	r3, [pc, #64]	; (8001330 <ButtonRightRead+0x14c>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	701a      	strb	r2, [r3, #0]
		if((pressedTimeRight >= 50) && (pressedTimeRight <= 1000)) return 1;	// short press, one click
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <ButtonRightRead+0x158>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b31      	cmp	r3, #49	; 0x31
 80012fa:	dd06      	ble.n	800130a <ButtonRightRead+0x126>
 80012fc:	4b0f      	ldr	r3, [pc, #60]	; (800133c <ButtonRightRead+0x158>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001304:	dc01      	bgt.n	800130a <ButtonRightRead+0x126>
 8001306:	2301      	movs	r3, #1
 8001308:	e00d      	b.n	8001326 <ButtonRightRead+0x142>
		else if(pressedTimeRight > 1000) return 2;
 800130a:	4b0c      	ldr	r3, [pc, #48]	; (800133c <ButtonRightRead+0x158>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001312:	dd07      	ble.n	8001324 <ButtonRightRead+0x140>
 8001314:	2302      	movs	r3, #2
 8001316:	e006      	b.n	8001326 <ButtonRightRead+0x142>
	break;
 8001318:	bf00      	nop
 800131a:	e004      	b.n	8001326 <ButtonRightRead+0x142>
	break;
 800131c:	bf00      	nop
 800131e:	e002      	b.n	8001326 <ButtonRightRead+0x142>
	break;
 8001320:	bf00      	nop
 8001322:	e000      	b.n	8001326 <ButtonRightRead+0x142>
	break;
 8001324:	bf00      	nop
	}
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000003 	.word	0x20000003
 8001334:	48001000 	.word	0x48001000
 8001338:	200000b0 	.word	0x200000b0
 800133c:	200000b4 	.word	0x200000b4
 8001340:	20000004 	.word	0x20000004
 8001344:	200000b8 	.word	0x200000b8

08001348 <LedInit>:
#include "stm32l4xx.h"
#include "LED.h"


void LedInit()
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
	// 1. Enable clock on port B and A
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN | RCC_AHB2ENR_GPIOAEN;
 800134c:	4a17      	ldr	r2, [pc, #92]	; (80013ac <LedInit+0x64>)
 800134e:	4b17      	ldr	r3, [pc, #92]	; (80013ac <LedInit+0x64>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	f043 0303 	orr.w	r3, r3, #3
 8001356:	64d3      	str	r3, [r2, #76]	; 0x4c

	// 2. Set outputs
	// Default GPIO->MODER = 0xFFFF,
	GPIOB->MODER &= ~GPIO_MODER_MODE7_1; 	// Set PB7 as output, bits(15:14)=(0:1)
 8001358:	4a15      	ldr	r2, [pc, #84]	; (80013b0 <LedInit+0x68>)
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <LedInit+0x68>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001362:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~GPIO_MODER_MODE14_1; 	// Set PB14 as output, bits(29:28)=(0:1)
 8001364:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <LedInit+0x68>)
 8001366:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <LedInit+0x68>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800136e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~GPIO_MODER_MODE0_1;	// Set PA0 as output, bits(1:0)=(0:1)
 8001370:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001374:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f023 0302 	bic.w	r3, r3, #2
 800137e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~GPIO_MODER_MODE1_1;	// Set PA1 as output, bits(3:2)=(0:1)
 8001380:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001384:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f023 0308 	bic.w	r3, r3, #8
 800138e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~GPIO_MODER_MODE2_1;	// Set PA2 as output, bits(5:4)=(0:1)
 8001390:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001394:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f023 0320 	bic.w	r3, r3, #32
 800139e:	6013      	str	r3, [r2, #0]
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40021000 	.word	0x40021000
 80013b0:	48000400 	.word	0x48000400

080013b4 <LedWrite>:

// Write LED state
void LedWrite(LedPin pin, LedState state)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	460a      	mov	r2, r1
 80013be:	80fb      	strh	r3, [r7, #6]
 80013c0:	4613      	mov	r3, r2
 80013c2:	717b      	strb	r3, [r7, #5]
	switch(pin)
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	f000 8092 	beq.w	80014f0 <LedWrite+0x13c>
 80013cc:	2b04      	cmp	r3, #4
 80013ce:	dc04      	bgt.n	80013da <LedWrite+0x26>
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d045      	beq.n	8001460 <LedWrite+0xac>
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d067      	beq.n	80014a8 <LedWrite+0xf4>
		if(state == ON) GPIOA->BSRR |= LED_AUTO;
		else if(state == OFF) GPIOA->BRR |= LED_AUTO;
		else if(state == TOG) GPIOA->ODR ^= LED_AUTO;
	break;
	}
}
 80013d8:	e0b7      	b.n	800154a <LedWrite+0x196>
	switch(pin)
 80013da:	2b80      	cmp	r3, #128	; 0x80
 80013dc:	d003      	beq.n	80013e6 <LedWrite+0x32>
 80013de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013e2:	d01f      	beq.n	8001424 <LedWrite+0x70>
}
 80013e4:	e0b1      	b.n	800154a <LedWrite+0x196>
		if(state == ON) GPIOB->BSRR |= LED2;
 80013e6:	797b      	ldrb	r3, [r7, #5]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d106      	bne.n	80013fa <LedWrite+0x46>
 80013ec:	4a5a      	ldr	r2, [pc, #360]	; (8001558 <LedWrite+0x1a4>)
 80013ee:	4b5a      	ldr	r3, [pc, #360]	; (8001558 <LedWrite+0x1a4>)
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013f6:	6193      	str	r3, [r2, #24]
	break;
 80013f8:	e09e      	b.n	8001538 <LedWrite+0x184>
		else if(state == OFF) GPIOB->BRR |= LED2;
 80013fa:	797b      	ldrb	r3, [r7, #5]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d106      	bne.n	800140e <LedWrite+0x5a>
 8001400:	4a55      	ldr	r2, [pc, #340]	; (8001558 <LedWrite+0x1a4>)
 8001402:	4b55      	ldr	r3, [pc, #340]	; (8001558 <LedWrite+0x1a4>)
 8001404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800140a:	6293      	str	r3, [r2, #40]	; 0x28
	break;
 800140c:	e094      	b.n	8001538 <LedWrite+0x184>
		else if(state == TOG) GPIOB->ODR ^= LED2;
 800140e:	797b      	ldrb	r3, [r7, #5]
 8001410:	2b02      	cmp	r3, #2
 8001412:	f040 8091 	bne.w	8001538 <LedWrite+0x184>
 8001416:	4a50      	ldr	r2, [pc, #320]	; (8001558 <LedWrite+0x1a4>)
 8001418:	4b4f      	ldr	r3, [pc, #316]	; (8001558 <LedWrite+0x1a4>)
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8001420:	6153      	str	r3, [r2, #20]
	break;
 8001422:	e089      	b.n	8001538 <LedWrite+0x184>
		if(state == ON) GPIOB->BSRR |= LED3;
 8001424:	797b      	ldrb	r3, [r7, #5]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d106      	bne.n	8001438 <LedWrite+0x84>
 800142a:	4a4b      	ldr	r2, [pc, #300]	; (8001558 <LedWrite+0x1a4>)
 800142c:	4b4a      	ldr	r3, [pc, #296]	; (8001558 <LedWrite+0x1a4>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001434:	6193      	str	r3, [r2, #24]
	break;
 8001436:	e081      	b.n	800153c <LedWrite+0x188>
		else if(state == OFF) GPIOB->BRR |= LED3;
 8001438:	797b      	ldrb	r3, [r7, #5]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d106      	bne.n	800144c <LedWrite+0x98>
 800143e:	4a46      	ldr	r2, [pc, #280]	; (8001558 <LedWrite+0x1a4>)
 8001440:	4b45      	ldr	r3, [pc, #276]	; (8001558 <LedWrite+0x1a4>)
 8001442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001444:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001448:	6293      	str	r3, [r2, #40]	; 0x28
	break;
 800144a:	e077      	b.n	800153c <LedWrite+0x188>
		else if(state == TOG) GPIOB->ODR ^= LED3;
 800144c:	797b      	ldrb	r3, [r7, #5]
 800144e:	2b02      	cmp	r3, #2
 8001450:	d174      	bne.n	800153c <LedWrite+0x188>
 8001452:	4a41      	ldr	r2, [pc, #260]	; (8001558 <LedWrite+0x1a4>)
 8001454:	4b40      	ldr	r3, [pc, #256]	; (8001558 <LedWrite+0x1a4>)
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 800145c:	6153      	str	r3, [r2, #20]
	break;
 800145e:	e06d      	b.n	800153c <LedWrite+0x188>
		if(state == ON) GPIOA->BSRR |= LED_MAN;
 8001460:	797b      	ldrb	r3, [r7, #5]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d108      	bne.n	8001478 <LedWrite+0xc4>
 8001466:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800146a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6193      	str	r3, [r2, #24]
	break;
 8001476:	e063      	b.n	8001540 <LedWrite+0x18c>
		else if(state == OFF) GPIOA->BRR |= LED_MAN;
 8001478:	797b      	ldrb	r3, [r7, #5]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d108      	bne.n	8001490 <LedWrite+0xdc>
 800147e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001482:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6293      	str	r3, [r2, #40]	; 0x28
	break;
 800148e:	e057      	b.n	8001540 <LedWrite+0x18c>
		else if(state == TOG) GPIOA->ODR ^= LED_MAN;
 8001490:	797b      	ldrb	r3, [r7, #5]
 8001492:	2b02      	cmp	r3, #2
 8001494:	d154      	bne.n	8001540 <LedWrite+0x18c>
 8001496:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800149a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800149e:	695b      	ldr	r3, [r3, #20]
 80014a0:	f083 0301 	eor.w	r3, r3, #1
 80014a4:	6153      	str	r3, [r2, #20]
	break;
 80014a6:	e04b      	b.n	8001540 <LedWrite+0x18c>
		if(state == ON) GPIOA->BSRR |= LED_G;
 80014a8:	797b      	ldrb	r3, [r7, #5]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d108      	bne.n	80014c0 <LedWrite+0x10c>
 80014ae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80014b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	f043 0302 	orr.w	r3, r3, #2
 80014bc:	6193      	str	r3, [r2, #24]
	break;
 80014be:	e041      	b.n	8001544 <LedWrite+0x190>
		else if(state == OFF) GPIOA->BRR |= LED_G;
 80014c0:	797b      	ldrb	r3, [r7, #5]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d108      	bne.n	80014d8 <LedWrite+0x124>
 80014c6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80014ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80014ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d0:	f043 0302 	orr.w	r3, r3, #2
 80014d4:	6293      	str	r3, [r2, #40]	; 0x28
	break;
 80014d6:	e035      	b.n	8001544 <LedWrite+0x190>
		else if(state == TOG) GPIOA->ODR ^= LED_G;
 80014d8:	797b      	ldrb	r3, [r7, #5]
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d132      	bne.n	8001544 <LedWrite+0x190>
 80014de:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80014e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80014e6:	695b      	ldr	r3, [r3, #20]
 80014e8:	f083 0302 	eor.w	r3, r3, #2
 80014ec:	6153      	str	r3, [r2, #20]
	break;
 80014ee:	e029      	b.n	8001544 <LedWrite+0x190>
		if(state == ON) GPIOA->BSRR |= LED_AUTO;
 80014f0:	797b      	ldrb	r3, [r7, #5]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d108      	bne.n	8001508 <LedWrite+0x154>
 80014f6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80014fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	f043 0304 	orr.w	r3, r3, #4
 8001504:	6193      	str	r3, [r2, #24]
	break;
 8001506:	e01f      	b.n	8001548 <LedWrite+0x194>
		else if(state == OFF) GPIOA->BRR |= LED_AUTO;
 8001508:	797b      	ldrb	r3, [r7, #5]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d108      	bne.n	8001520 <LedWrite+0x16c>
 800150e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001512:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001518:	f043 0304 	orr.w	r3, r3, #4
 800151c:	6293      	str	r3, [r2, #40]	; 0x28
	break;
 800151e:	e013      	b.n	8001548 <LedWrite+0x194>
		else if(state == TOG) GPIOA->ODR ^= LED_AUTO;
 8001520:	797b      	ldrb	r3, [r7, #5]
 8001522:	2b02      	cmp	r3, #2
 8001524:	d110      	bne.n	8001548 <LedWrite+0x194>
 8001526:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800152a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800152e:	695b      	ldr	r3, [r3, #20]
 8001530:	f083 0304 	eor.w	r3, r3, #4
 8001534:	6153      	str	r3, [r2, #20]
	break;
 8001536:	e007      	b.n	8001548 <LedWrite+0x194>
	break;
 8001538:	bf00      	nop
 800153a:	e006      	b.n	800154a <LedWrite+0x196>
	break;
 800153c:	bf00      	nop
 800153e:	e004      	b.n	800154a <LedWrite+0x196>
	break;
 8001540:	bf00      	nop
 8001542:	e002      	b.n	800154a <LedWrite+0x196>
	break;
 8001544:	bf00      	nop
 8001546:	e000      	b.n	800154a <LedWrite+0x196>
	break;
 8001548:	bf00      	nop
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	48000400 	.word	0x48000400

0800155c <RTC_Init>:
#include "stm32l4xx.h"
#include "RTC.h"


void RTC_Init()
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
	// power interface clock enable
	RCC->APB1ENR1 |= RCC_APB1ENR1_PWREN;
 8001560:	4a18      	ldr	r2, [pc, #96]	; (80015c4 <RTC_Init+0x68>)
 8001562:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <RTC_Init+0x68>)
 8001564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800156a:	6593      	str	r3, [r2, #88]	; 0x58

	// access to RTC and Backup registers enabled
	PWR->CR1 |= PWR_CR1_DBP;
 800156c:	4a16      	ldr	r2, [pc, #88]	; (80015c8 <RTC_Init+0x6c>)
 800156e:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <RTC_Init+0x6c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001576:	6013      	str	r3, [r2, #0]
	// RCC->BDCR = 0;
	//RCC->BDCR |= RCC_BDCR_RTCSEL_1;
	//RCC->BDCR |= RCC_BDCR_RTCEN;

	// enable LSE oscillator and wait for confirmation
	RCC->BDCR |= RCC_BDCR_LSEON;
 8001578:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <RTC_Init+0x68>)
 800157a:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <RTC_Init+0x68>)
 800157c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	while(!(RCC->BDCR & RCC_BDCR_LSERDY));
 8001588:	bf00      	nop
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <RTC_Init+0x68>)
 800158c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0f8      	beq.n	800158a <RTC_Init+0x2e>
	// LSE oscillator clock used as RTC clock
	RCC->BDCR |= (1 << RCC_BDCR_RTCSEL_Pos);
 8001598:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <RTC_Init+0x68>)
 800159a:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <RTC_Init+0x68>)
 800159c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	RCC->BDCR |= RCC_BDCR_RTCEN;
 80015a8:	4a06      	ldr	r2, [pc, #24]	; (80015c4 <RTC_Init+0x68>)
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <RTC_Init+0x68>)
 80015ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40007000 	.word	0x40007000

080015cc <RTC_SetTime>:

void RTC_SetTime(unsigned char hr, unsigned char mn, unsigned char sc)
{
 80015cc:	b490      	push	{r4, r7}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]
 80015d6:	460b      	mov	r3, r1
 80015d8:	71bb      	strb	r3, [r7, #6]
 80015da:	4613      	mov	r3, r2
 80015dc:	717b      	strb	r3, [r7, #5]
	// unlock the write protection
	RTC->WPR = 0xCA;
 80015de:	4b4f      	ldr	r3, [pc, #316]	; (800171c <RTC_SetTime+0x150>)
 80015e0:	22ca      	movs	r2, #202	; 0xca
 80015e2:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = 0x53;
 80015e4:	4b4d      	ldr	r3, [pc, #308]	; (800171c <RTC_SetTime+0x150>)
 80015e6:	2253      	movs	r2, #83	; 0x53
 80015e8:	625a      	str	r2, [r3, #36]	; 0x24

	// enter to initialization mode and wait for confirmation
	RTC->ISR |= RTC_ISR_INIT;
 80015ea:	4a4c      	ldr	r2, [pc, #304]	; (800171c <RTC_SetTime+0x150>)
 80015ec:	4b4b      	ldr	r3, [pc, #300]	; (800171c <RTC_SetTime+0x150>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015f4:	60d3      	str	r3, [r2, #12]
	while(!(RTC->ISR & RTC_ISR_INITF));
 80015f6:	bf00      	nop
 80015f8:	4b48      	ldr	r3, [pc, #288]	; (800171c <RTC_SetTime+0x150>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0f9      	beq.n	80015f8 <RTC_SetTime+0x2c>

	RTC->PRER = 0;
 8001604:	4b45      	ldr	r3, [pc, #276]	; (800171c <RTC_SetTime+0x150>)
 8001606:	2200      	movs	r2, #0
 8001608:	611a      	str	r2, [r3, #16]
	RTC->PRER = (127 << 16) | (255 << 0); 	// synchronus and asynchronus prescalers
 800160a:	4b44      	ldr	r3, [pc, #272]	; (800171c <RTC_SetTime+0x150>)
 800160c:	4a44      	ldr	r2, [pc, #272]	; (8001720 <RTC_SetTime+0x154>)
 800160e:	611a      	str	r2, [r3, #16]

	RTC->CR |= RTC_CR_BYPSHAD;
 8001610:	4a42      	ldr	r2, [pc, #264]	; (800171c <RTC_SetTime+0x150>)
 8001612:	4b42      	ldr	r3, [pc, #264]	; (800171c <RTC_SetTime+0x150>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f043 0320 	orr.w	r3, r3, #32
 800161a:	6093      	str	r3, [r2, #8]

	RTC->TR = 0; 			// Clear register
 800161c:	4b3f      	ldr	r3, [pc, #252]	; (800171c <RTC_SetTime+0x150>)
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
	RTC->TR |= (hr/10) << 20; 	// Hour tens
 8001622:	493e      	ldr	r1, [pc, #248]	; (800171c <RTC_SetTime+0x150>)
 8001624:	4b3d      	ldr	r3, [pc, #244]	; (800171c <RTC_SetTime+0x150>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	79fa      	ldrb	r2, [r7, #7]
 800162a:	483e      	ldr	r0, [pc, #248]	; (8001724 <RTC_SetTime+0x158>)
 800162c:	fba0 0202 	umull	r0, r2, r0, r2
 8001630:	08d2      	lsrs	r2, r2, #3
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	0512      	lsls	r2, r2, #20
 8001636:	4313      	orrs	r3, r2
 8001638:	600b      	str	r3, [r1, #0]
	RTC->TR |= (hr%10) << 16; 	// Hour units
 800163a:	4c38      	ldr	r4, [pc, #224]	; (800171c <RTC_SetTime+0x150>)
 800163c:	4b37      	ldr	r3, [pc, #220]	; (800171c <RTC_SetTime+0x150>)
 800163e:	6818      	ldr	r0, [r3, #0]
 8001640:	79fa      	ldrb	r2, [r7, #7]
 8001642:	4b38      	ldr	r3, [pc, #224]	; (8001724 <RTC_SetTime+0x158>)
 8001644:	fba3 1302 	umull	r1, r3, r3, r2
 8001648:	08d9      	lsrs	r1, r3, #3
 800164a:	460b      	mov	r3, r1
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	440b      	add	r3, r1
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	b2db      	uxtb	r3, r3
 8001656:	041b      	lsls	r3, r3, #16
 8001658:	4303      	orrs	r3, r0
 800165a:	6023      	str	r3, [r4, #0]
	RTC->TR |= (mn/10) << 12; 	// Minute tens
 800165c:	492f      	ldr	r1, [pc, #188]	; (800171c <RTC_SetTime+0x150>)
 800165e:	4b2f      	ldr	r3, [pc, #188]	; (800171c <RTC_SetTime+0x150>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	79ba      	ldrb	r2, [r7, #6]
 8001664:	482f      	ldr	r0, [pc, #188]	; (8001724 <RTC_SetTime+0x158>)
 8001666:	fba0 0202 	umull	r0, r2, r0, r2
 800166a:	08d2      	lsrs	r2, r2, #3
 800166c:	b2d2      	uxtb	r2, r2
 800166e:	0312      	lsls	r2, r2, #12
 8001670:	4313      	orrs	r3, r2
 8001672:	600b      	str	r3, [r1, #0]
	RTC->TR |= (mn%10) << 8; 	// Minute units
 8001674:	4c29      	ldr	r4, [pc, #164]	; (800171c <RTC_SetTime+0x150>)
 8001676:	4b29      	ldr	r3, [pc, #164]	; (800171c <RTC_SetTime+0x150>)
 8001678:	6818      	ldr	r0, [r3, #0]
 800167a:	79ba      	ldrb	r2, [r7, #6]
 800167c:	4b29      	ldr	r3, [pc, #164]	; (8001724 <RTC_SetTime+0x158>)
 800167e:	fba3 1302 	umull	r1, r3, r3, r2
 8001682:	08d9      	lsrs	r1, r3, #3
 8001684:	460b      	mov	r3, r1
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	440b      	add	r3, r1
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	b2db      	uxtb	r3, r3
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	4303      	orrs	r3, r0
 8001694:	6023      	str	r3, [r4, #0]
	RTC->TR |= (sc/10) << 4; 	// Second tens
 8001696:	4921      	ldr	r1, [pc, #132]	; (800171c <RTC_SetTime+0x150>)
 8001698:	4b20      	ldr	r3, [pc, #128]	; (800171c <RTC_SetTime+0x150>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	797a      	ldrb	r2, [r7, #5]
 800169e:	4821      	ldr	r0, [pc, #132]	; (8001724 <RTC_SetTime+0x158>)
 80016a0:	fba0 0202 	umull	r0, r2, r0, r2
 80016a4:	08d2      	lsrs	r2, r2, #3
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	0112      	lsls	r2, r2, #4
 80016aa:	4313      	orrs	r3, r2
 80016ac:	600b      	str	r3, [r1, #0]
	RTC->TR |= (sc%10) << 0; 	// Second units
 80016ae:	4c1b      	ldr	r4, [pc, #108]	; (800171c <RTC_SetTime+0x150>)
 80016b0:	4b1a      	ldr	r3, [pc, #104]	; (800171c <RTC_SetTime+0x150>)
 80016b2:	6818      	ldr	r0, [r3, #0]
 80016b4:	797a      	ldrb	r2, [r7, #5]
 80016b6:	4b1b      	ldr	r3, [pc, #108]	; (8001724 <RTC_SetTime+0x158>)
 80016b8:	fba3 1302 	umull	r1, r3, r3, r2
 80016bc:	08d9      	lsrs	r1, r3, #3
 80016be:	460b      	mov	r3, r1
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	440b      	add	r3, r1
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	4303      	orrs	r3, r0
 80016cc:	6023      	str	r3, [r4, #0]

	// 24 hour/day format
	RTC->CR &= ~RTC_CR_FMT;
 80016ce:	4a13      	ldr	r2, [pc, #76]	; (800171c <RTC_SetTime+0x150>)
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <RTC_SetTime+0x150>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80016d8:	6093      	str	r3, [r2, #8]

	RTC->CR &= ~RTC_CR_BYPSHAD;
 80016da:	4a10      	ldr	r2, [pc, #64]	; (800171c <RTC_SetTime+0x150>)
 80016dc:	4b0f      	ldr	r3, [pc, #60]	; (800171c <RTC_SetTime+0x150>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f023 0320 	bic.w	r3, r3, #32
 80016e4:	6093      	str	r3, [r2, #8]

	// exit initialization mode
	RTC->ISR &= ~RTC_ISR_INIT;
 80016e6:	4a0d      	ldr	r2, [pc, #52]	; (800171c <RTC_SetTime+0x150>)
 80016e8:	4b0c      	ldr	r3, [pc, #48]	; (800171c <RTC_SetTime+0x150>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016f0:	60d3      	str	r3, [r2, #12]

	// wait for synchronization
	RTC->ISR &= ~RTC_ISR_RSF;
 80016f2:	4a0a      	ldr	r2, [pc, #40]	; (800171c <RTC_SetTime+0x150>)
 80016f4:	4b09      	ldr	r3, [pc, #36]	; (800171c <RTC_SetTime+0x150>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	f023 0320 	bic.w	r3, r3, #32
 80016fc:	60d3      	str	r3, [r2, #12]
	while (!(RTC->ISR & RTC_ISR_RSF));
 80016fe:	bf00      	nop
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <RTC_SetTime+0x150>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	f003 0320 	and.w	r3, r3, #32
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0f9      	beq.n	8001700 <RTC_SetTime+0x134>

	// enable write protection
	RTC->WPR = 0xFF;
 800170c:	4b03      	ldr	r3, [pc, #12]	; (800171c <RTC_SetTime+0x150>)
 800170e:	22ff      	movs	r2, #255	; 0xff
 8001710:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bc90      	pop	{r4, r7}
 800171a:	4770      	bx	lr
 800171c:	40002800 	.word	0x40002800
 8001720:	007f00ff 	.word	0x007f00ff
 8001724:	cccccccd 	.word	0xcccccccd

08001728 <RTC_SetDate>:

// Set date
void RTC_SetDate(unsigned char day, unsigned char month, unsigned char year)
{
 8001728:	b490      	push	{r4, r7}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
 8001732:	460b      	mov	r3, r1
 8001734:	71bb      	strb	r3, [r7, #6]
 8001736:	4613      	mov	r3, r2
 8001738:	717b      	strb	r3, [r7, #5]
	// unlock the write protection
	RTC->WPR = 0xCA;
 800173a:	4b4c      	ldr	r3, [pc, #304]	; (800186c <RTC_SetDate+0x144>)
 800173c:	22ca      	movs	r2, #202	; 0xca
 800173e:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = 0x53;
 8001740:	4b4a      	ldr	r3, [pc, #296]	; (800186c <RTC_SetDate+0x144>)
 8001742:	2253      	movs	r2, #83	; 0x53
 8001744:	625a      	str	r2, [r3, #36]	; 0x24

	// enter to initialization mode and wait for confirmation
	RTC->ISR |= RTC_ISR_INIT;
 8001746:	4a49      	ldr	r2, [pc, #292]	; (800186c <RTC_SetDate+0x144>)
 8001748:	4b48      	ldr	r3, [pc, #288]	; (800186c <RTC_SetDate+0x144>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001750:	60d3      	str	r3, [r2, #12]
	while(!(RTC->ISR & RTC_ISR_INITF));
 8001752:	bf00      	nop
 8001754:	4b45      	ldr	r3, [pc, #276]	; (800186c <RTC_SetDate+0x144>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0f9      	beq.n	8001754 <RTC_SetDate+0x2c>

	RTC->PRER = 0;
 8001760:	4b42      	ldr	r3, [pc, #264]	; (800186c <RTC_SetDate+0x144>)
 8001762:	2200      	movs	r2, #0
 8001764:	611a      	str	r2, [r3, #16]
	RTC->PRER = (127 << 16) | (255 << 0); 	// synchronus and asynchronus prescalers
 8001766:	4b41      	ldr	r3, [pc, #260]	; (800186c <RTC_SetDate+0x144>)
 8001768:	4a41      	ldr	r2, [pc, #260]	; (8001870 <RTC_SetDate+0x148>)
 800176a:	611a      	str	r2, [r3, #16]

	RTC->CR |= RTC_CR_BYPSHAD;
 800176c:	4a3f      	ldr	r2, [pc, #252]	; (800186c <RTC_SetDate+0x144>)
 800176e:	4b3f      	ldr	r3, [pc, #252]	; (800186c <RTC_SetDate+0x144>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f043 0320 	orr.w	r3, r3, #32
 8001776:	6093      	str	r3, [r2, #8]

	RTC->DR = 0; 					// Clear register
 8001778:	4b3c      	ldr	r3, [pc, #240]	; (800186c <RTC_SetDate+0x144>)
 800177a:	2200      	movs	r2, #0
 800177c:	605a      	str	r2, [r3, #4]
	RTC->DR |= (year/10) << 20; 	// Year tens
 800177e:	493b      	ldr	r1, [pc, #236]	; (800186c <RTC_SetDate+0x144>)
 8001780:	4b3a      	ldr	r3, [pc, #232]	; (800186c <RTC_SetDate+0x144>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	797a      	ldrb	r2, [r7, #5]
 8001786:	483b      	ldr	r0, [pc, #236]	; (8001874 <RTC_SetDate+0x14c>)
 8001788:	fba0 0202 	umull	r0, r2, r0, r2
 800178c:	08d2      	lsrs	r2, r2, #3
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	0512      	lsls	r2, r2, #20
 8001792:	4313      	orrs	r3, r2
 8001794:	604b      	str	r3, [r1, #4]
	RTC->DR |= (year%10) << 16; 	// Year units
 8001796:	4c35      	ldr	r4, [pc, #212]	; (800186c <RTC_SetDate+0x144>)
 8001798:	4b34      	ldr	r3, [pc, #208]	; (800186c <RTC_SetDate+0x144>)
 800179a:	6858      	ldr	r0, [r3, #4]
 800179c:	797a      	ldrb	r2, [r7, #5]
 800179e:	4b35      	ldr	r3, [pc, #212]	; (8001874 <RTC_SetDate+0x14c>)
 80017a0:	fba3 1302 	umull	r1, r3, r3, r2
 80017a4:	08d9      	lsrs	r1, r3, #3
 80017a6:	460b      	mov	r3, r1
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	440b      	add	r3, r1
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	041b      	lsls	r3, r3, #16
 80017b4:	4303      	orrs	r3, r0
 80017b6:	6063      	str	r3, [r4, #4]
	RTC->DR |= (month/10) << 12; 	// Month tens
 80017b8:	492c      	ldr	r1, [pc, #176]	; (800186c <RTC_SetDate+0x144>)
 80017ba:	4b2c      	ldr	r3, [pc, #176]	; (800186c <RTC_SetDate+0x144>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	79ba      	ldrb	r2, [r7, #6]
 80017c0:	482c      	ldr	r0, [pc, #176]	; (8001874 <RTC_SetDate+0x14c>)
 80017c2:	fba0 0202 	umull	r0, r2, r0, r2
 80017c6:	08d2      	lsrs	r2, r2, #3
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	0312      	lsls	r2, r2, #12
 80017cc:	4313      	orrs	r3, r2
 80017ce:	604b      	str	r3, [r1, #4]
	RTC->DR |= (month%10) << 8; 	// Month units
 80017d0:	4c26      	ldr	r4, [pc, #152]	; (800186c <RTC_SetDate+0x144>)
 80017d2:	4b26      	ldr	r3, [pc, #152]	; (800186c <RTC_SetDate+0x144>)
 80017d4:	6858      	ldr	r0, [r3, #4]
 80017d6:	79ba      	ldrb	r2, [r7, #6]
 80017d8:	4b26      	ldr	r3, [pc, #152]	; (8001874 <RTC_SetDate+0x14c>)
 80017da:	fba3 1302 	umull	r1, r3, r3, r2
 80017de:	08d9      	lsrs	r1, r3, #3
 80017e0:	460b      	mov	r3, r1
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	440b      	add	r3, r1
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	021b      	lsls	r3, r3, #8
 80017ee:	4303      	orrs	r3, r0
 80017f0:	6063      	str	r3, [r4, #4]
	RTC->DR |= (day/10) << 4; 		// Day tens
 80017f2:	491e      	ldr	r1, [pc, #120]	; (800186c <RTC_SetDate+0x144>)
 80017f4:	4b1d      	ldr	r3, [pc, #116]	; (800186c <RTC_SetDate+0x144>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	79fa      	ldrb	r2, [r7, #7]
 80017fa:	481e      	ldr	r0, [pc, #120]	; (8001874 <RTC_SetDate+0x14c>)
 80017fc:	fba0 0202 	umull	r0, r2, r0, r2
 8001800:	08d2      	lsrs	r2, r2, #3
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	0112      	lsls	r2, r2, #4
 8001806:	4313      	orrs	r3, r2
 8001808:	604b      	str	r3, [r1, #4]
	RTC->DR |= (day%10) << 0; 		// Day units
 800180a:	4c18      	ldr	r4, [pc, #96]	; (800186c <RTC_SetDate+0x144>)
 800180c:	4b17      	ldr	r3, [pc, #92]	; (800186c <RTC_SetDate+0x144>)
 800180e:	6858      	ldr	r0, [r3, #4]
 8001810:	79fa      	ldrb	r2, [r7, #7]
 8001812:	4b18      	ldr	r3, [pc, #96]	; (8001874 <RTC_SetDate+0x14c>)
 8001814:	fba3 1302 	umull	r1, r3, r3, r2
 8001818:	08d9      	lsrs	r1, r3, #3
 800181a:	460b      	mov	r3, r1
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	440b      	add	r3, r1
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	b2db      	uxtb	r3, r3
 8001826:	4303      	orrs	r3, r0
 8001828:	6063      	str	r3, [r4, #4]

	RTC->CR &= ~RTC_CR_BYPSHAD;
 800182a:	4a10      	ldr	r2, [pc, #64]	; (800186c <RTC_SetDate+0x144>)
 800182c:	4b0f      	ldr	r3, [pc, #60]	; (800186c <RTC_SetDate+0x144>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f023 0320 	bic.w	r3, r3, #32
 8001834:	6093      	str	r3, [r2, #8]

	// exit initialization mode
	RTC->ISR &= ~RTC_ISR_INIT;
 8001836:	4a0d      	ldr	r2, [pc, #52]	; (800186c <RTC_SetDate+0x144>)
 8001838:	4b0c      	ldr	r3, [pc, #48]	; (800186c <RTC_SetDate+0x144>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001840:	60d3      	str	r3, [r2, #12]

	// wait for synchronization
	RTC->ISR &= ~RTC_ISR_RSF;
 8001842:	4a0a      	ldr	r2, [pc, #40]	; (800186c <RTC_SetDate+0x144>)
 8001844:	4b09      	ldr	r3, [pc, #36]	; (800186c <RTC_SetDate+0x144>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	f023 0320 	bic.w	r3, r3, #32
 800184c:	60d3      	str	r3, [r2, #12]
	while (!(RTC->ISR & RTC_ISR_RSF));
 800184e:	bf00      	nop
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <RTC_SetDate+0x144>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	f003 0320 	and.w	r3, r3, #32
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0f9      	beq.n	8001850 <RTC_SetDate+0x128>

	// enable write protection
	RTC->WPR = 0xFF;
 800185c:	4b03      	ldr	r3, [pc, #12]	; (800186c <RTC_SetDate+0x144>)
 800185e:	22ff      	movs	r2, #255	; 0xff
 8001860:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bc90      	pop	{r4, r7}
 800186a:	4770      	bx	lr
 800186c:	40002800 	.word	0x40002800
 8001870:	007f00ff 	.word	0x007f00ff
 8001874:	cccccccd 	.word	0xcccccccd

08001878 <RTC_ReadTime>:

// Reading time from RTC
void RTC_ReadTime(unsigned char *hr, unsigned char *mn, unsigned char *sc)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
	*sc = 10 *((RTC->TR & RTC_TR_ST_Msk) >> RTC_TR_ST_Pos) + (RTC->TR & RTC_TR_SU_Msk); //Seconds
 8001884:	4b24      	ldr	r3, [pc, #144]	; (8001918 <RTC_ReadTime+0xa0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	091b      	lsrs	r3, r3, #4
 800188a:	b2db      	uxtb	r3, r3
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	b2db      	uxtb	r3, r3
 8001892:	461a      	mov	r2, r3
 8001894:	0092      	lsls	r2, r2, #2
 8001896:	4413      	add	r3, r2
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	b2da      	uxtb	r2, r3
 800189c:	4b1e      	ldr	r3, [pc, #120]	; (8001918 <RTC_ReadTime+0xa0>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	4413      	add	r3, r2
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	701a      	strb	r2, [r3, #0]
	*mn = 10 *((RTC->TR & RTC_TR_MNT_Msk) >> RTC_TR_MNT_Pos) + ((RTC->TR & RTC_TR_MNU_Msk) >> RTC_TR_MNU_Pos); // Minutes
 80018b0:	4b19      	ldr	r3, [pc, #100]	; (8001918 <RTC_ReadTime+0xa0>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	0b1b      	lsrs	r3, r3, #12
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	461a      	mov	r2, r3
 80018c0:	0092      	lsls	r2, r2, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	4b13      	ldr	r3, [pc, #76]	; (8001918 <RTC_ReadTime+0xa0>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	0a1b      	lsrs	r3, r3, #8
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	f003 030f 	and.w	r3, r3, #15
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	4413      	add	r3, r2
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	701a      	strb	r2, [r3, #0]
	*hr = 10 *((RTC->TR & RTC_TR_HT_Msk) >> RTC_TR_HT_Pos) + ((RTC->TR & RTC_TR_HU_Msk) >> RTC_TR_HU_Pos); // Hours
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <RTC_ReadTime+0xa0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	0d1b      	lsrs	r3, r3, #20
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	461a      	mov	r2, r3
 80018ee:	0092      	lsls	r2, r2, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	4b08      	ldr	r3, [pc, #32]	; (8001918 <RTC_ReadTime+0xa0>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	0c1b      	lsrs	r3, r3, #16
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	b2db      	uxtb	r3, r3
 8001904:	4413      	add	r3, r2
 8001906:	b2da      	uxtb	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	701a      	strb	r2, [r3, #0]
}
 800190c:	bf00      	nop
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	40002800 	.word	0x40002800

0800191c <RTC_ReadDate>:

// Reading date from RTC
void RTC_ReadDate(unsigned char *day, unsigned char *month, unsigned char *year)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
	*day = 10 *((RTC->DR & RTC_DR_DT_Msk) >> RTC_DR_DT_Pos) + (RTC->DR & RTC_DR_DU_Msk); // Day
 8001928:	4b24      	ldr	r3, [pc, #144]	; (80019bc <RTC_ReadDate+0xa0>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	091b      	lsrs	r3, r3, #4
 800192e:	b2db      	uxtb	r3, r3
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	b2db      	uxtb	r3, r3
 8001936:	461a      	mov	r2, r3
 8001938:	0092      	lsls	r2, r2, #2
 800193a:	4413      	add	r3, r2
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	b2da      	uxtb	r2, r3
 8001940:	4b1e      	ldr	r3, [pc, #120]	; (80019bc <RTC_ReadDate+0xa0>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	b2db      	uxtb	r3, r3
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	b2db      	uxtb	r3, r3
 800194c:	4413      	add	r3, r2
 800194e:	b2da      	uxtb	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	701a      	strb	r2, [r3, #0]
	*month = 10 *((RTC->DR & RTC_DR_MT_Msk) >> RTC_DR_MT_Pos) + ((RTC->DR & RTC_DR_MU_Msk) >> RTC_DR_MU_Pos); // Month
 8001954:	4b19      	ldr	r3, [pc, #100]	; (80019bc <RTC_ReadDate+0xa0>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	0b1b      	lsrs	r3, r3, #12
 800195a:	b2db      	uxtb	r3, r3
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	b2db      	uxtb	r3, r3
 8001962:	461a      	mov	r2, r3
 8001964:	0092      	lsls	r2, r2, #2
 8001966:	4413      	add	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	b2da      	uxtb	r2, r3
 800196c:	4b13      	ldr	r3, [pc, #76]	; (80019bc <RTC_ReadDate+0xa0>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	0a1b      	lsrs	r3, r3, #8
 8001972:	b2db      	uxtb	r3, r3
 8001974:	f003 030f 	and.w	r3, r3, #15
 8001978:	b2db      	uxtb	r3, r3
 800197a:	4413      	add	r3, r2
 800197c:	b2da      	uxtb	r2, r3
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	701a      	strb	r2, [r3, #0]
	*year = 10 *((RTC->DR & RTC_DR_YT_Msk) >> RTC_DR_YT_Pos) + ((RTC->DR & RTC_DR_YU_Msk) >> RTC_DR_YU_Pos); // Year
 8001982:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <RTC_ReadDate+0xa0>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	0d1b      	lsrs	r3, r3, #20
 8001988:	b2db      	uxtb	r3, r3
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	b2db      	uxtb	r3, r3
 8001990:	461a      	mov	r2, r3
 8001992:	0092      	lsls	r2, r2, #2
 8001994:	4413      	add	r3, r2
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4b08      	ldr	r3, [pc, #32]	; (80019bc <RTC_ReadDate+0xa0>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	0c1b      	lsrs	r3, r3, #16
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	4413      	add	r3, r2
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	701a      	strb	r2, [r3, #0]
}
 80019b0:	bf00      	nop
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	40002800 	.word	0x40002800

080019c0 <dayYear>:

short dayYear(char day, char month)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	460a      	mov	r2, r1
 80019ca:	71fb      	strb	r3, [r7, #7]
 80019cc:	4613      	mov	r3, r2
 80019ce:	71bb      	strb	r3, [r7, #6]
	if(month == 1) return day;											// January
 80019d0:	79bb      	ldrb	r3, [r7, #6]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d102      	bne.n	80019dc <dayYear+0x1c>
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	b21b      	sxth	r3, r3
 80019da:	e065      	b.n	8001aa8 <dayYear+0xe8>
	else if(month == 2) return (31+day);								// February
 80019dc:	79bb      	ldrb	r3, [r7, #6]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d105      	bne.n	80019ee <dayYear+0x2e>
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	331f      	adds	r3, #31
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	b21b      	sxth	r3, r3
 80019ec:	e05c      	b.n	8001aa8 <dayYear+0xe8>
	else if(month == 3) return (31+28+day);								// March
 80019ee:	79bb      	ldrb	r3, [r7, #6]
 80019f0:	2b03      	cmp	r3, #3
 80019f2:	d105      	bne.n	8001a00 <dayYear+0x40>
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	333b      	adds	r3, #59	; 0x3b
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	b21b      	sxth	r3, r3
 80019fe:	e053      	b.n	8001aa8 <dayYear+0xe8>
	else if(month == 4) return (31+28+31+day);							// April
 8001a00:	79bb      	ldrb	r3, [r7, #6]
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	d105      	bne.n	8001a12 <dayYear+0x52>
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	335a      	adds	r3, #90	; 0x5a
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	b21b      	sxth	r3, r3
 8001a10:	e04a      	b.n	8001aa8 <dayYear+0xe8>
	else if(month == 5) return (31+28+31+30+day);						// May
 8001a12:	79bb      	ldrb	r3, [r7, #6]
 8001a14:	2b05      	cmp	r3, #5
 8001a16:	d105      	bne.n	8001a24 <dayYear+0x64>
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	3378      	adds	r3, #120	; 0x78
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	b21b      	sxth	r3, r3
 8001a22:	e041      	b.n	8001aa8 <dayYear+0xe8>
	else if(month == 6) return (31+28+31+30+31+day);					// June
 8001a24:	79bb      	ldrb	r3, [r7, #6]
 8001a26:	2b06      	cmp	r3, #6
 8001a28:	d105      	bne.n	8001a36 <dayYear+0x76>
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	3397      	adds	r3, #151	; 0x97
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	b21b      	sxth	r3, r3
 8001a34:	e038      	b.n	8001aa8 <dayYear+0xe8>
	else if(month == 7) return (31+28+31+30+31+30+day);					// July
 8001a36:	79bb      	ldrb	r3, [r7, #6]
 8001a38:	2b07      	cmp	r3, #7
 8001a3a:	d105      	bne.n	8001a48 <dayYear+0x88>
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	33b5      	adds	r3, #181	; 0xb5
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	b21b      	sxth	r3, r3
 8001a46:	e02f      	b.n	8001aa8 <dayYear+0xe8>
	else if(month == 8) return (31+28+31+30+31+30+31+day);				// August
 8001a48:	79bb      	ldrb	r3, [r7, #6]
 8001a4a:	2b08      	cmp	r3, #8
 8001a4c:	d105      	bne.n	8001a5a <dayYear+0x9a>
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	33d4      	adds	r3, #212	; 0xd4
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	b21b      	sxth	r3, r3
 8001a58:	e026      	b.n	8001aa8 <dayYear+0xe8>
	else if(month == 9) return (31+28+31+30+31+30+31+31+day);			// September
 8001a5a:	79bb      	ldrb	r3, [r7, #6]
 8001a5c:	2b09      	cmp	r3, #9
 8001a5e:	d105      	bne.n	8001a6c <dayYear+0xac>
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	33f3      	adds	r3, #243	; 0xf3
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	b21b      	sxth	r3, r3
 8001a6a:	e01d      	b.n	8001aa8 <dayYear+0xe8>
	else if(month == 10) return (31+28+31+30+31+30+31+31+30+day);		// October
 8001a6c:	79bb      	ldrb	r3, [r7, #6]
 8001a6e:	2b0a      	cmp	r3, #10
 8001a70:	d106      	bne.n	8001a80 <dayYear+0xc0>
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	f203 1311 	addw	r3, r3, #273	; 0x111
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	b21b      	sxth	r3, r3
 8001a7e:	e013      	b.n	8001aa8 <dayYear+0xe8>
	else if(month == 11) return (31+28+31+30+31+30+31+31+30+31+day);	// November
 8001a80:	79bb      	ldrb	r3, [r7, #6]
 8001a82:	2b0b      	cmp	r3, #11
 8001a84:	d106      	bne.n	8001a94 <dayYear+0xd4>
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	b21b      	sxth	r3, r3
 8001a92:	e009      	b.n	8001aa8 <dayYear+0xe8>
	else if(month == 12) return (31+28+31+30+31+30+31+31+30+31+30+day);	// December
 8001a94:	79bb      	ldrb	r3, [r7, #6]
 8001a96:	2b0c      	cmp	r3, #12
 8001a98:	d106      	bne.n	8001aa8 <dayYear+0xe8>
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	f503 73a7 	add.w	r3, r3, #334	; 0x14e
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	b21b      	sxth	r3, r3
 8001aa6:	e7ff      	b.n	8001aa8 <dayYear+0xe8>
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <SysClockHSI_Init>:
#include "stm32l4xx.h"
#include "RccConfig.h"


void SysClockHSI_Init()
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
	// 1. Enable HSI 16MHz and wait for confirmation
	RCC->CR |= RCC_CR_HSION;
 8001ab8:	4a2a      	ldr	r2, [pc, #168]	; (8001b64 <SysClockHSI_Init+0xb0>)
 8001aba:	4b2a      	ldr	r3, [pc, #168]	; (8001b64 <SysClockHSI_Init+0xb0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac2:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSIRDY));
 8001ac4:	bf00      	nop
 8001ac6:	4b27      	ldr	r3, [pc, #156]	; (8001b64 <SysClockHSI_Init+0xb0>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0f9      	beq.n	8001ac6 <SysClockHSI_Init+0x12>
	//RCC->APB1ENR1 |= RCC_APB1ENR1_PWREN;

	// 3. Configure the FLASH and the LATENCY Related Settings
	//FLASH->ACR |= FLASH_ACR_ICEN; // instruction cache enable, RESET VALUE
	//FLASH->ACR |= FLASH_ACR_DCEN; // data cache enable, RESET VALUE
	FLASH->ACR |= FLASH_ACR_LATENCY_4WS; // 4 wait states (number of HCLK period to the Flash access time)
 8001ad2:	4a25      	ldr	r2, [pc, #148]	; (8001b68 <SysClockHSI_Init+0xb4>)
 8001ad4:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <SysClockHSI_Init+0xb4>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f043 0304 	orr.w	r3, r3, #4
 8001adc:	6013      	str	r3, [r2, #0]

	// 4. Configure PRESCALERS HCLK, PCLK1, PCLK2
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1; // AHB prescaler, HCLK
 8001ade:	4a21      	ldr	r2, [pc, #132]	; (8001b64 <SysClockHSI_Init+0xb0>)
 8001ae0:	4b20      	ldr	r3, [pc, #128]	; (8001b64 <SysClockHSI_Init+0xb0>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV1; // APB1 prescaler, PCLK1
 8001ae6:	4a1f      	ldr	r2, [pc, #124]	; (8001b64 <SysClockHSI_Init+0xb0>)
 8001ae8:	4b1e      	ldr	r3, [pc, #120]	; (8001b64 <SysClockHSI_Init+0xb0>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1; // APB2 prescaler, PCLK2
 8001aee:	4a1d      	ldr	r2, [pc, #116]	; (8001b64 <SysClockHSI_Init+0xb0>)
 8001af0:	4b1c      	ldr	r3, [pc, #112]	; (8001b64 <SysClockHSI_Init+0xb0>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	6093      	str	r3, [r2, #8]

	// 5. Configure PLL
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI; 					// set source PLL as HSI
 8001af6:	4a1b      	ldr	r2, [pc, #108]	; (8001b64 <SysClockHSI_Init+0xb0>)
 8001af8:	4b1a      	ldr	r3, [pc, #104]	; (8001b64 <SysClockHSI_Init+0xb0>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	f043 0302 	orr.w	r3, r3, #2
 8001b00:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |=	RCC_PLLCFGR_PLLM_0; 						// PLLM(6:4)=(001) -> PLLM = 2
 8001b02:	4a18      	ldr	r2, [pc, #96]	; (8001b64 <SysClockHSI_Init+0xb0>)
 8001b04:	4b17      	ldr	r3, [pc, #92]	; (8001b64 <SysClockHSI_Init+0xb0>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	f043 0310 	orr.w	r3, r3, #16
 8001b0c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |=	RCC_PLLCFGR_PLLN_2 | RCC_PLLCFGR_PLLN_4;	// PLLN(14:8)=(0010100) -> PLLN = 20
 8001b0e:	4a15      	ldr	r2, [pc, #84]	; (8001b64 <SysClockHSI_Init+0xb0>)
 8001b10:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <SysClockHSI_Init+0xb0>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001b18:	60d3      	str	r3, [r2, #12]
	//RCC->PLLCFGR |=	RCC_PLLCFGR_PLLN_5 | RCC_PLLCFGR_PLLN_3;
																// PLLR(26:25)=(00) -> PLLR = 2 RESET VALUE
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN;							// PLLCLK output ENABLE
 8001b1a:	4a12      	ldr	r2, [pc, #72]	; (8001b64 <SysClockHSI_Init+0xb0>)
 8001b1c:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <SysClockHSI_Init+0xb0>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b24:	60d3      	str	r3, [r2, #12]

	// 6. Enable PLL and wait for confirmation
	RCC->CR |= RCC_CR_PLLON;
 8001b26:	4a0f      	ldr	r2, [pc, #60]	; (8001b64 <SysClockHSI_Init+0xb0>)
 8001b28:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <SysClockHSI_Init+0xb0>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b30:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY));
 8001b32:	bf00      	nop
 8001b34:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <SysClockHSI_Init+0xb0>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0f9      	beq.n	8001b34 <SysClockHSI_Init+0x80>

	// 7. Select the Clock Source
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001b40:	4a08      	ldr	r2, [pc, #32]	; (8001b64 <SysClockHSI_Init+0xb0>)
 8001b42:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <SysClockHSI_Init+0xb0>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f043 0303 	orr.w	r3, r3, #3
 8001b4a:	6093      	str	r3, [r2, #8]
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL );
 8001b4c:	bf00      	nop
 8001b4e:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <SysClockHSI_Init+0xb0>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 030c 	and.w	r3, r3, #12
 8001b56:	2b0c      	cmp	r3, #12
 8001b58:	d1f9      	bne.n	8001b4e <SysClockHSI_Init+0x9a>
}
 8001b5a:	bf00      	nop
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40022000 	.word	0x40022000

08001b6c <ServoInit>:
#include "stm32l4xx.h"
#include "Servo.h"

// Initialization servo
void ServoInit()
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
	// Enable clock for TIM3 and GPIO C
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM3EN;
 8001b70:	4a2b      	ldr	r2, [pc, #172]	; (8001c20 <ServoInit+0xb4>)
 8001b72:	4b2b      	ldr	r3, [pc, #172]	; (8001c20 <ServoInit+0xb4>)
 8001b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b76:	f043 0302 	orr.w	r3, r3, #2
 8001b7a:	6593      	str	r3, [r2, #88]	; 0x58
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 8001b7c:	4a28      	ldr	r2, [pc, #160]	; (8001c20 <ServoInit+0xb4>)
 8001b7e:	4b28      	ldr	r3, [pc, #160]	; (8001c20 <ServoInit+0xb4>)
 8001b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b82:	f043 0304 	orr.w	r3, r3, #4
 8001b86:	64d3      	str	r3, [r2, #76]	; 0x4c

	// Configure pin PC8 and PC9 as alternate function
	GPIOC->MODER &= ~GPIO_MODER_MODE8_0; 	// Set PC8 as Alternate function, 0 write in MODER8[1]
 8001b88:	4a26      	ldr	r2, [pc, #152]	; (8001c24 <ServoInit+0xb8>)
 8001b8a:	4b26      	ldr	r3, [pc, #152]	; (8001c24 <ServoInit+0xb8>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b92:	6013      	str	r3, [r2, #0]
	GPIOC->AFR[1] |= GPIO_AFRH_AFSEL8_1; 	// AF 2 on PC8 -> TIM3_CH3
 8001b94:	4a23      	ldr	r2, [pc, #140]	; (8001c24 <ServoInit+0xb8>)
 8001b96:	4b23      	ldr	r3, [pc, #140]	; (8001c24 <ServoInit+0xb8>)
 8001b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9a:	f043 0302 	orr.w	r3, r3, #2
 8001b9e:	6253      	str	r3, [r2, #36]	; 0x24

	GPIOC->MODER &= ~GPIO_MODER_MODE9_0; 	// Set PC9 as Alternate function, 0 write in MODER9[1]
 8001ba0:	4a20      	ldr	r2, [pc, #128]	; (8001c24 <ServoInit+0xb8>)
 8001ba2:	4b20      	ldr	r3, [pc, #128]	; (8001c24 <ServoInit+0xb8>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001baa:	6013      	str	r3, [r2, #0]
	GPIOC->AFR[1] |= GPIO_AFRH_AFSEL9_1; 	// AF 2 on PC9 -> TIM3_CH4
 8001bac:	4a1d      	ldr	r2, [pc, #116]	; (8001c24 <ServoInit+0xb8>)
 8001bae:	4b1d      	ldr	r3, [pc, #116]	; (8001c24 <ServoInit+0xb8>)
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb2:	f043 0320 	orr.w	r3, r3, #32
 8001bb6:	6253      	str	r3, [r2, #36]	; 0x24


	// Configure TIM3, channel 3 and 4
	TIM3->PSC = 79;				// prescaler 80 MHz / (79 + 1) = 1 MHz
 8001bb8:	4b1b      	ldr	r3, [pc, #108]	; (8001c28 <ServoInit+0xbc>)
 8001bba:	224f      	movs	r2, #79	; 0x4f
 8001bbc:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 20000;			// 20000us = 20ms = 50Hz -> required by servo
 8001bbe:	4b1a      	ldr	r3, [pc, #104]	; (8001c28 <ServoInit+0xbc>)
 8001bc0:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001bc4:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;	// OCxM = 0110 -> PWM mode 1, channel is active when TIM3_CNT < TIM3_CCRx
 8001bc6:	4a18      	ldr	r2, [pc, #96]	; (8001c28 <ServoInit+0xbc>)
 8001bc8:	4b17      	ldr	r3, [pc, #92]	; (8001c28 <ServoInit+0xbc>)
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8001bd0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001bd4:	61d3      	str	r3, [r2, #28]
	TIM3->CCMR2 |= TIM_CCMR2_OC3PE | TIM_CCMR2_OC4PE;	// output compare preload enable
 8001bd6:	4a14      	ldr	r2, [pc, #80]	; (8001c28 <ServoInit+0xbc>)
 8001bd8:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <ServoInit+0xbc>)
 8001bda:	69db      	ldr	r3, [r3, #28]
 8001bdc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001be0:	f043 0308 	orr.w	r3, r3, #8
 8001be4:	61d3      	str	r3, [r2, #28]
	TIM3->CCER |= TIM_CCER_CC3E | TIM_CCER_CC4E;	// capture/compare 3 output enable
 8001be6:	4a10      	ldr	r2, [pc, #64]	; (8001c28 <ServoInit+0xbc>)
 8001be8:	4b0f      	ldr	r3, [pc, #60]	; (8001c28 <ServoInit+0xbc>)
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8001bf0:	6213      	str	r3, [r2, #32]
	TIM3->CR1 |= TIM_CR1_ARPE;	// auto-reload preload enable
 8001bf2:	4a0d      	ldr	r2, [pc, #52]	; (8001c28 <ServoInit+0xbc>)
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <ServoInit+0xbc>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bfc:	6013      	str	r3, [r2, #0]
	TIM3->EGR |= TIM_EGR_UG;	// update generation
 8001bfe:	4a0a      	ldr	r2, [pc, #40]	; (8001c28 <ServoInit+0xbc>)
 8001c00:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <ServoInit+0xbc>)
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6153      	str	r3, [r2, #20]
	TIM3->CR1 |= TIM_CR1_CEN;	// counter enable
 8001c0a:	4a07      	ldr	r2, [pc, #28]	; (8001c28 <ServoInit+0xbc>)
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <ServoInit+0xbc>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	6013      	str	r3, [r2, #0]
}
 8001c16:	bf00      	nop
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	40021000 	.word	0x40021000
 8001c24:	48000800 	.word	0x48000800
 8001c28:	40000400 	.word	0x40000400
 8001c2c:	00000000 	.word	0x00000000

08001c30 <ServoSetAngleHorizontal>:

void ServoSetAngleHorizontal(int angle)
{
 8001c30:	b590      	push	{r4, r7, lr}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
	// limits
	if(angle<0) angle = 0;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	da02      	bge.n	8001c44 <ServoSetAngleHorizontal+0x14>
 8001c3e:	2300      	movs	r3, #0
 8001c40:	607b      	str	r3, [r7, #4]
 8001c42:	e004      	b.n	8001c4e <ServoSetAngleHorizontal+0x1e>
	else if(angle>180) angle = 180;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2bb4      	cmp	r3, #180	; 0xb4
 8001c48:	dd01      	ble.n	8001c4e <ServoSetAngleHorizontal+0x1e>
 8001c4a:	23b4      	movs	r3, #180	; 0xb4
 8001c4c:	607b      	str	r3, [r7, #4]

	// servo can work in range 500 - 2500us, factor 11.11 -> 2000us /180 deg
	TIM3->CCR3 = 11.11 * (180 - angle) + 500;
 8001c4e:	4c12      	ldr	r4, [pc, #72]	; (8001c98 <ServoSetAngleHorizontal+0x68>)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7fe fc1c 	bl	8000494 <__aeabi_i2d>
 8001c5c:	a30c      	add	r3, pc, #48	; (adr r3, 8001c90 <ServoSetAngleHorizontal+0x60>)
 8001c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c62:	f7fe fc7d 	bl	8000560 <__aeabi_dmul>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <ServoSetAngleHorizontal+0x6c>)
 8001c74:	f7fe fac2 	bl	80001fc <__adddf3>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	4619      	mov	r1, r3
 8001c80:	f7fe ff1e 	bl	8000ac0 <__aeabi_d2uiz>
 8001c84:	4603      	mov	r3, r0
 8001c86:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd90      	pop	{r4, r7, pc}
 8001c90:	eb851eb8 	.word	0xeb851eb8
 8001c94:	40263851 	.word	0x40263851
 8001c98:	40000400 	.word	0x40000400
 8001c9c:	407f4000 	.word	0x407f4000

08001ca0 <ServoSetAngleVertical>:

void ServoSetAngleVertical(int angle)
{
 8001ca0:	b590      	push	{r4, r7, lr}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
	// offset, error in mechanism
	angle = angle - 9;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3b09      	subs	r3, #9
 8001cac:	607b      	str	r3, [r7, #4]

	// limits
	if(angle<0) angle = 0;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	da02      	bge.n	8001cba <ServoSetAngleVertical+0x1a>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	e004      	b.n	8001cc4 <ServoSetAngleVertical+0x24>
	else if(angle>90) angle = 90;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b5a      	cmp	r3, #90	; 0x5a
 8001cbe:	dd01      	ble.n	8001cc4 <ServoSetAngleVertical+0x24>
 8001cc0:	235a      	movs	r3, #90	; 0x5a
 8001cc2:	607b      	str	r3, [r7, #4]

	// servo can work in range 500 - 2500us, factor 11.11 -> 2000us /180 deg
	TIM3->CCR4 = 11.11 * angle + 500;
 8001cc4:	4c10      	ldr	r4, [pc, #64]	; (8001d08 <ServoSetAngleVertical+0x68>)
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7fe fbe4 	bl	8000494 <__aeabi_i2d>
 8001ccc:	a30c      	add	r3, pc, #48	; (adr r3, 8001d00 <ServoSetAngleVertical+0x60>)
 8001cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd2:	f7fe fc45 	bl	8000560 <__aeabi_dmul>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4610      	mov	r0, r2
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f04f 0200 	mov.w	r2, #0
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <ServoSetAngleVertical+0x6c>)
 8001ce4:	f7fe fa8a 	bl	80001fc <__adddf3>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4610      	mov	r0, r2
 8001cee:	4619      	mov	r1, r3
 8001cf0:	f7fe fee6 	bl	8000ac0 <__aeabi_d2uiz>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd90      	pop	{r4, r7, pc}
 8001d00:	eb851eb8 	.word	0xeb851eb8
 8001d04:	40263851 	.word	0x40263851
 8001d08:	40000400 	.word	0x40000400
 8001d0c:	407f4000 	.word	0x407f4000

08001d10 <SunCalculatePosition>:
// azimuth and zenith angles
float solarAzimuthAngleDeg, solarZenithAngleDeg;

// calculate sun position by means of the time and the location of observer
void SunCalculatePosition(char timezone,short dayOfYear, unsigned char hr, unsigned char mn, unsigned char sc,float longitude, float latitude)
{
 8001d10:	b5b0      	push	{r4, r5, r7, lr}
 8001d12:	ed2d 8b02 	vpush	{d8}
 8001d16:	b08c      	sub	sp, #48	; 0x30
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4604      	mov	r4, r0
 8001d1c:	4608      	mov	r0, r1
 8001d1e:	4611      	mov	r1, r2
 8001d20:	461a      	mov	r2, r3
 8001d22:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d26:	edc7 0a00 	vstr	s1, [r7]
 8001d2a:	4623      	mov	r3, r4
 8001d2c:	73fb      	strb	r3, [r7, #15]
 8001d2e:	4603      	mov	r3, r0
 8001d30:	81bb      	strh	r3, [r7, #12]
 8001d32:	460b      	mov	r3, r1
 8001d34:	73bb      	strb	r3, [r7, #14]
 8001d36:	4613      	mov	r3, r2
 8001d38:	72fb      	strb	r3, [r7, #11]
	// calculate fractional year
	float y = ((2*M_PI)/365.0)*((float)dayOfYear - 1.0 + (((float)hr - 12.0)/24.0));
 8001d3a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d3e:	ee07 3a90 	vmov	s15, r3
 8001d42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d46:	ee17 0a90 	vmov	r0, s15
 8001d4a:	f7fe fbb5 	bl	80004b8 <__aeabi_f2d>
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	4be9      	ldr	r3, [pc, #932]	; (80020f8 <SunCalculatePosition+0x3e8>)
 8001d54:	f7fe fa50 	bl	80001f8 <__aeabi_dsub>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	460c      	mov	r4, r1
 8001d5c:	4625      	mov	r5, r4
 8001d5e:	461c      	mov	r4, r3
 8001d60:	7bbb      	ldrb	r3, [r7, #14]
 8001d62:	ee07 3a90 	vmov	s15, r3
 8001d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d6a:	ee17 0a90 	vmov	r0, s15
 8001d6e:	f7fe fba3 	bl	80004b8 <__aeabi_f2d>
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	4be1      	ldr	r3, [pc, #900]	; (80020fc <SunCalculatePosition+0x3ec>)
 8001d78:	f7fe fa3e 	bl	80001f8 <__aeabi_dsub>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4610      	mov	r0, r2
 8001d82:	4619      	mov	r1, r3
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	4bdd      	ldr	r3, [pc, #884]	; (8002100 <SunCalculatePosition+0x3f0>)
 8001d8a:	f7fe fd13 	bl	80007b4 <__aeabi_ddiv>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	4620      	mov	r0, r4
 8001d94:	4629      	mov	r1, r5
 8001d96:	f7fe fa31 	bl	80001fc <__adddf3>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	460c      	mov	r4, r1
 8001d9e:	4618      	mov	r0, r3
 8001da0:	4621      	mov	r1, r4
 8001da2:	a3b9      	add	r3, pc, #740	; (adr r3, 8002088 <SunCalculatePosition+0x378>)
 8001da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da8:	f7fe fbda 	bl	8000560 <__aeabi_dmul>
 8001dac:	4603      	mov	r3, r0
 8001dae:	460c      	mov	r4, r1
 8001db0:	4618      	mov	r0, r3
 8001db2:	4621      	mov	r1, r4
 8001db4:	f7fe fea4 	bl	8000b00 <__aeabi_d2f>
 8001db8:	4603      	mov	r3, r0
 8001dba:	62fb      	str	r3, [r7, #44]	; 0x2c

	//estimate the equation of time (in minutes)
	float eqtime = 229.18*(0.000075+0.001868*cosf(y)-0.032077*sinf(y) - 0.014615*cosf(2*y)-0.040849*sinf(2*y));
 8001dbc:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8001dc0:	f001 f892 	bl	8002ee8 <cosf>
 8001dc4:	ee10 3a10 	vmov	r3, s0
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe fb75 	bl	80004b8 <__aeabi_f2d>
 8001dce:	a3b0      	add	r3, pc, #704	; (adr r3, 8002090 <SunCalculatePosition+0x380>)
 8001dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd4:	f7fe fbc4 	bl	8000560 <__aeabi_dmul>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	460c      	mov	r4, r1
 8001ddc:	4618      	mov	r0, r3
 8001dde:	4621      	mov	r1, r4
 8001de0:	a3ad      	add	r3, pc, #692	; (adr r3, 8002098 <SunCalculatePosition+0x388>)
 8001de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de6:	f7fe fa09 	bl	80001fc <__adddf3>
 8001dea:	4603      	mov	r3, r0
 8001dec:	460c      	mov	r4, r1
 8001dee:	4625      	mov	r5, r4
 8001df0:	461c      	mov	r4, r3
 8001df2:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8001df6:	f001 f8b7 	bl	8002f68 <sinf>
 8001dfa:	ee10 3a10 	vmov	r3, s0
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe fb5a 	bl	80004b8 <__aeabi_f2d>
 8001e04:	a3a6      	add	r3, pc, #664	; (adr r3, 80020a0 <SunCalculatePosition+0x390>)
 8001e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0a:	f7fe fba9 	bl	8000560 <__aeabi_dmul>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4620      	mov	r0, r4
 8001e14:	4629      	mov	r1, r5
 8001e16:	f7fe f9ef 	bl	80001f8 <__aeabi_dsub>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	460c      	mov	r4, r1
 8001e1e:	4625      	mov	r5, r4
 8001e20:	461c      	mov	r4, r3
 8001e22:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001e26:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e2e:	f001 f85b 	bl	8002ee8 <cosf>
 8001e32:	ee10 3a10 	vmov	r3, s0
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe fb3e 	bl	80004b8 <__aeabi_f2d>
 8001e3c:	a39a      	add	r3, pc, #616	; (adr r3, 80020a8 <SunCalculatePosition+0x398>)
 8001e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e42:	f7fe fb8d 	bl	8000560 <__aeabi_dmul>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	4629      	mov	r1, r5
 8001e4e:	f7fe f9d3 	bl	80001f8 <__aeabi_dsub>
 8001e52:	4603      	mov	r3, r0
 8001e54:	460c      	mov	r4, r1
 8001e56:	4625      	mov	r5, r4
 8001e58:	461c      	mov	r4, r3
 8001e5a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001e5e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e62:	eeb0 0a67 	vmov.f32	s0, s15
 8001e66:	f001 f87f 	bl	8002f68 <sinf>
 8001e6a:	ee10 3a10 	vmov	r3, s0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe fb22 	bl	80004b8 <__aeabi_f2d>
 8001e74:	a38e      	add	r3, pc, #568	; (adr r3, 80020b0 <SunCalculatePosition+0x3a0>)
 8001e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7a:	f7fe fb71 	bl	8000560 <__aeabi_dmul>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4620      	mov	r0, r4
 8001e84:	4629      	mov	r1, r5
 8001e86:	f7fe f9b7 	bl	80001f8 <__aeabi_dsub>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	460c      	mov	r4, r1
 8001e8e:	4618      	mov	r0, r3
 8001e90:	4621      	mov	r1, r4
 8001e92:	a389      	add	r3, pc, #548	; (adr r3, 80020b8 <SunCalculatePosition+0x3a8>)
 8001e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e98:	f7fe fb62 	bl	8000560 <__aeabi_dmul>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	460c      	mov	r4, r1
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	4621      	mov	r1, r4
 8001ea4:	f7fe fe2c 	bl	8000b00 <__aeabi_d2f>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	62bb      	str	r3, [r7, #40]	; 0x28

	// solar declination angle
	float declinationRad = 0.006918 - 0.399912*cosf(y) + 0.070257*sinf(y) - 0.006758*cosf(2*y) + 0.000907*sinf(2*y) - 0.002697*cosf(3*y) + 0.00148*sinf(3*y);
 8001eac:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8001eb0:	f001 f81a 	bl	8002ee8 <cosf>
 8001eb4:	ee10 3a10 	vmov	r3, s0
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7fe fafd 	bl	80004b8 <__aeabi_f2d>
 8001ebe:	a380      	add	r3, pc, #512	; (adr r3, 80020c0 <SunCalculatePosition+0x3b0>)
 8001ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec4:	f7fe fb4c 	bl	8000560 <__aeabi_dmul>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	460c      	mov	r4, r1
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4623      	mov	r3, r4
 8001ed0:	a17d      	add	r1, pc, #500	; (adr r1, 80020c8 <SunCalculatePosition+0x3b8>)
 8001ed2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ed6:	f7fe f98f 	bl	80001f8 <__aeabi_dsub>
 8001eda:	4603      	mov	r3, r0
 8001edc:	460c      	mov	r4, r1
 8001ede:	4625      	mov	r5, r4
 8001ee0:	461c      	mov	r4, r3
 8001ee2:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8001ee6:	f001 f83f 	bl	8002f68 <sinf>
 8001eea:	ee10 3a10 	vmov	r3, s0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe fae2 	bl	80004b8 <__aeabi_f2d>
 8001ef4:	a376      	add	r3, pc, #472	; (adr r3, 80020d0 <SunCalculatePosition+0x3c0>)
 8001ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efa:	f7fe fb31 	bl	8000560 <__aeabi_dmul>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4620      	mov	r0, r4
 8001f04:	4629      	mov	r1, r5
 8001f06:	f7fe f979 	bl	80001fc <__adddf3>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	460c      	mov	r4, r1
 8001f0e:	4625      	mov	r5, r4
 8001f10:	461c      	mov	r4, r3
 8001f12:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f16:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f1e:	f000 ffe3 	bl	8002ee8 <cosf>
 8001f22:	ee10 3a10 	vmov	r3, s0
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe fac6 	bl	80004b8 <__aeabi_f2d>
 8001f2c:	a36a      	add	r3, pc, #424	; (adr r3, 80020d8 <SunCalculatePosition+0x3c8>)
 8001f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f32:	f7fe fb15 	bl	8000560 <__aeabi_dmul>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	4629      	mov	r1, r5
 8001f3e:	f7fe f95b 	bl	80001f8 <__aeabi_dsub>
 8001f42:	4603      	mov	r3, r0
 8001f44:	460c      	mov	r4, r1
 8001f46:	4625      	mov	r5, r4
 8001f48:	461c      	mov	r4, r3
 8001f4a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f4e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f52:	eeb0 0a67 	vmov.f32	s0, s15
 8001f56:	f001 f807 	bl	8002f68 <sinf>
 8001f5a:	ee10 3a10 	vmov	r3, s0
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe faaa 	bl	80004b8 <__aeabi_f2d>
 8001f64:	a35e      	add	r3, pc, #376	; (adr r3, 80020e0 <SunCalculatePosition+0x3d0>)
 8001f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6a:	f7fe faf9 	bl	8000560 <__aeabi_dmul>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	4620      	mov	r0, r4
 8001f74:	4629      	mov	r1, r5
 8001f76:	f7fe f941 	bl	80001fc <__adddf3>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	460c      	mov	r4, r1
 8001f7e:	4625      	mov	r5, r4
 8001f80:	461c      	mov	r4, r3
 8001f82:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f86:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001f8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f92:	f000 ffa9 	bl	8002ee8 <cosf>
 8001f96:	ee10 3a10 	vmov	r3, s0
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7fe fa8c 	bl	80004b8 <__aeabi_f2d>
 8001fa0:	a351      	add	r3, pc, #324	; (adr r3, 80020e8 <SunCalculatePosition+0x3d8>)
 8001fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa6:	f7fe fadb 	bl	8000560 <__aeabi_dmul>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	4620      	mov	r0, r4
 8001fb0:	4629      	mov	r1, r5
 8001fb2:	f7fe f921 	bl	80001f8 <__aeabi_dsub>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	460c      	mov	r4, r1
 8001fba:	4625      	mov	r5, r4
 8001fbc:	461c      	mov	r4, r3
 8001fbe:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001fc2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001fc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fca:	eeb0 0a67 	vmov.f32	s0, s15
 8001fce:	f000 ffcb 	bl	8002f68 <sinf>
 8001fd2:	ee10 3a10 	vmov	r3, s0
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe fa6e 	bl	80004b8 <__aeabi_f2d>
 8001fdc:	a344      	add	r3, pc, #272	; (adr r3, 80020f0 <SunCalculatePosition+0x3e0>)
 8001fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe2:	f7fe fabd 	bl	8000560 <__aeabi_dmul>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	4620      	mov	r0, r4
 8001fec:	4629      	mov	r1, r5
 8001fee:	f7fe f905 	bl	80001fc <__adddf3>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	460c      	mov	r4, r1
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	4621      	mov	r1, r4
 8001ffa:	f7fe fd81 	bl	8000b00 <__aeabi_d2f>
 8001ffe:	4603      	mov	r3, r0
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
	//float declinationDeg = rad2deg(declinationRad);

	// calculate time offset
	float time_offset = eqtime + 4*longitude - 60*(float)timezone;
 8002002:	edd7 7a01 	vldr	s15, [r7, #4]
 8002006:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800200a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800200e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002012:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002016:	7bfb      	ldrb	r3, [r7, #15]
 8002018:	ee07 3a90 	vmov	s15, r3
 800201c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002020:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002104 <SunCalculatePosition+0x3f4>
 8002024:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002028:	ee77 7a67 	vsub.f32	s15, s14, s15
 800202c:	edc7 7a08 	vstr	s15, [r7, #32]

	// true solar time
	float tst = (float)hr*60.0 + mn + sc/60 + time_offset;
 8002030:	7bbb      	ldrb	r3, [r7, #14]
 8002032:	ee07 3a90 	vmov	s15, r3
 8002036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800203a:	ee17 0a90 	vmov	r0, s15
 800203e:	f7fe fa3b 	bl	80004b8 <__aeabi_f2d>
 8002042:	f04f 0200 	mov.w	r2, #0
 8002046:	4b30      	ldr	r3, [pc, #192]	; (8002108 <SunCalculatePosition+0x3f8>)
 8002048:	f7fe fa8a 	bl	8000560 <__aeabi_dmul>
 800204c:	4603      	mov	r3, r0
 800204e:	460c      	mov	r4, r1
 8002050:	4625      	mov	r5, r4
 8002052:	461c      	mov	r4, r3
 8002054:	7afb      	ldrb	r3, [r7, #11]
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe fa1c 	bl	8000494 <__aeabi_i2d>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4620      	mov	r0, r4
 8002062:	4629      	mov	r1, r5
 8002064:	f7fe f8ca 	bl	80001fc <__adddf3>
 8002068:	4603      	mov	r3, r0
 800206a:	460c      	mov	r4, r1
 800206c:	4625      	mov	r5, r4
 800206e:	461c      	mov	r4, r3
 8002070:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002074:	4a25      	ldr	r2, [pc, #148]	; (800210c <SunCalculatePosition+0x3fc>)
 8002076:	fba2 2303 	umull	r2, r3, r2, r3
 800207a:	095b      	lsrs	r3, r3, #5
 800207c:	b2db      	uxtb	r3, r3
 800207e:	4618      	mov	r0, r3
 8002080:	f7fe fa08 	bl	8000494 <__aeabi_i2d>
 8002084:	4602      	mov	r2, r0
 8002086:	e045      	b.n	8002114 <SunCalculatePosition+0x404>
 8002088:	d4b3ac9a 	.word	0xd4b3ac9a
 800208c:	3f91a099 	.word	0x3f91a099
 8002090:	ba2be059 	.word	0xba2be059
 8002094:	3f5e9af5 	.word	0x3f5e9af5
 8002098:	30553261 	.word	0x30553261
 800209c:	3f13a92a 	.word	0x3f13a92a
 80020a0:	83e8576d 	.word	0x83e8576d
 80020a4:	3fa06c65 	.word	0x3fa06c65
 80020a8:	183f91e6 	.word	0x183f91e6
 80020ac:	3f8dee78 	.word	0x3f8dee78
 80020b0:	fe260b2d 	.word	0xfe260b2d
 80020b4:	3fa4ea28 	.word	0x3fa4ea28
 80020b8:	8f5c28f6 	.word	0x8f5c28f6
 80020bc:	406ca5c2 	.word	0x406ca5c2
 80020c0:	8051c9f7 	.word	0x8051c9f7
 80020c4:	3fd99828 	.word	0x3fd99828
 80020c8:	7c0f4517 	.word	0x7c0f4517
 80020cc:	3f7c560c 	.word	0x3f7c560c
 80020d0:	dd50a88f 	.word	0xdd50a88f
 80020d4:	3fb1fc5c 	.word	0x3fb1fc5c
 80020d8:	cfc829d0 	.word	0xcfc829d0
 80020dc:	3f7bae46 	.word	0x3f7bae46
 80020e0:	ab324852 	.word	0xab324852
 80020e4:	3f4db877 	.word	0x3f4db877
 80020e8:	d9839475 	.word	0xd9839475
 80020ec:	3f661804 	.word	0x3f661804
 80020f0:	e646f156 	.word	0xe646f156
 80020f4:	3f583f91 	.word	0x3f583f91
 80020f8:	3ff00000 	.word	0x3ff00000
 80020fc:	40280000 	.word	0x40280000
 8002100:	40380000 	.word	0x40380000
 8002104:	42700000 	.word	0x42700000
 8002108:	404e0000 	.word	0x404e0000
 800210c:	88888889 	.word	0x88888889
 8002110:	43340000 	.word	0x43340000
 8002114:	460b      	mov	r3, r1
 8002116:	4620      	mov	r0, r4
 8002118:	4629      	mov	r1, r5
 800211a:	f7fe f86f 	bl	80001fc <__adddf3>
 800211e:	4603      	mov	r3, r0
 8002120:	460c      	mov	r4, r1
 8002122:	4625      	mov	r5, r4
 8002124:	461c      	mov	r4, r3
 8002126:	6a38      	ldr	r0, [r7, #32]
 8002128:	f7fe f9c6 	bl	80004b8 <__aeabi_f2d>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	4620      	mov	r0, r4
 8002132:	4629      	mov	r1, r5
 8002134:	f7fe f862 	bl	80001fc <__adddf3>
 8002138:	4603      	mov	r3, r0
 800213a:	460c      	mov	r4, r1
 800213c:	4618      	mov	r0, r3
 800213e:	4621      	mov	r1, r4
 8002140:	f7fe fcde 	bl	8000b00 <__aeabi_d2f>
 8002144:	4603      	mov	r3, r0
 8002146:	61fb      	str	r3, [r7, #28]

	// solar hour angle
	float sha = (tst/4) - 180;
 8002148:	ed97 7a07 	vldr	s14, [r7, #28]
 800214c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002150:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002154:	ed1f 7a12 	vldr	s14, [pc, #-72]	; 8002110 <SunCalculatePosition+0x400>
 8002158:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800215c:	edc7 7a06 	vstr	s15, [r7, #24]

	// solar zenith angle
	float solarZenithAngle = acosf(sinf(deg2rad(latitude))*sinf(declinationRad)+cosf(deg2rad(latitude))*cosf(declinationRad)*cosf(deg2rad(sha)));
 8002160:	6838      	ldr	r0, [r7, #0]
 8002162:	f7fe f9a9 	bl	80004b8 <__aeabi_f2d>
 8002166:	a3aa      	add	r3, pc, #680	; (adr r3, 8002410 <SunCalculatePosition+0x700>)
 8002168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216c:	f7fe f9f8 	bl	8000560 <__aeabi_dmul>
 8002170:	4603      	mov	r3, r0
 8002172:	460c      	mov	r4, r1
 8002174:	4618      	mov	r0, r3
 8002176:	4621      	mov	r1, r4
 8002178:	f04f 0200 	mov.w	r2, #0
 800217c:	4ba8      	ldr	r3, [pc, #672]	; (8002420 <SunCalculatePosition+0x710>)
 800217e:	f7fe fb19 	bl	80007b4 <__aeabi_ddiv>
 8002182:	4603      	mov	r3, r0
 8002184:	460c      	mov	r4, r1
 8002186:	4618      	mov	r0, r3
 8002188:	4621      	mov	r1, r4
 800218a:	f7fe fcb9 	bl	8000b00 <__aeabi_d2f>
 800218e:	4603      	mov	r3, r0
 8002190:	ee00 3a10 	vmov	s0, r3
 8002194:	f000 fee8 	bl	8002f68 <sinf>
 8002198:	eeb0 8a40 	vmov.f32	s16, s0
 800219c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80021a0:	f000 fee2 	bl	8002f68 <sinf>
 80021a4:	eef0 7a40 	vmov.f32	s15, s0
 80021a8:	ee28 8a27 	vmul.f32	s16, s16, s15
 80021ac:	6838      	ldr	r0, [r7, #0]
 80021ae:	f7fe f983 	bl	80004b8 <__aeabi_f2d>
 80021b2:	a397      	add	r3, pc, #604	; (adr r3, 8002410 <SunCalculatePosition+0x700>)
 80021b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b8:	f7fe f9d2 	bl	8000560 <__aeabi_dmul>
 80021bc:	4603      	mov	r3, r0
 80021be:	460c      	mov	r4, r1
 80021c0:	4618      	mov	r0, r3
 80021c2:	4621      	mov	r1, r4
 80021c4:	f04f 0200 	mov.w	r2, #0
 80021c8:	4b95      	ldr	r3, [pc, #596]	; (8002420 <SunCalculatePosition+0x710>)
 80021ca:	f7fe faf3 	bl	80007b4 <__aeabi_ddiv>
 80021ce:	4603      	mov	r3, r0
 80021d0:	460c      	mov	r4, r1
 80021d2:	4618      	mov	r0, r3
 80021d4:	4621      	mov	r1, r4
 80021d6:	f7fe fc93 	bl	8000b00 <__aeabi_d2f>
 80021da:	4603      	mov	r3, r0
 80021dc:	ee00 3a10 	vmov	s0, r3
 80021e0:	f000 fe82 	bl	8002ee8 <cosf>
 80021e4:	eef0 8a40 	vmov.f32	s17, s0
 80021e8:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80021ec:	f000 fe7c 	bl	8002ee8 <cosf>
 80021f0:	eef0 7a40 	vmov.f32	s15, s0
 80021f4:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80021f8:	69b8      	ldr	r0, [r7, #24]
 80021fa:	f7fe f95d 	bl	80004b8 <__aeabi_f2d>
 80021fe:	a384      	add	r3, pc, #528	; (adr r3, 8002410 <SunCalculatePosition+0x700>)
 8002200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002204:	f7fe f9ac 	bl	8000560 <__aeabi_dmul>
 8002208:	4603      	mov	r3, r0
 800220a:	460c      	mov	r4, r1
 800220c:	4618      	mov	r0, r3
 800220e:	4621      	mov	r1, r4
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	4b82      	ldr	r3, [pc, #520]	; (8002420 <SunCalculatePosition+0x710>)
 8002216:	f7fe facd 	bl	80007b4 <__aeabi_ddiv>
 800221a:	4603      	mov	r3, r0
 800221c:	460c      	mov	r4, r1
 800221e:	4618      	mov	r0, r3
 8002220:	4621      	mov	r1, r4
 8002222:	f7fe fc6d 	bl	8000b00 <__aeabi_d2f>
 8002226:	4603      	mov	r3, r0
 8002228:	ee00 3a10 	vmov	s0, r3
 800222c:	f000 fe5c 	bl	8002ee8 <cosf>
 8002230:	eef0 7a40 	vmov.f32	s15, s0
 8002234:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8002238:	ee78 7a27 	vadd.f32	s15, s16, s15
 800223c:	eeb0 0a67 	vmov.f32	s0, s15
 8002240:	f000 ff38 	bl	80030b4 <acosf>
 8002244:	ed87 0a05 	vstr	s0, [r7, #20]
	solarZenithAngleDeg = rad2deg(solarZenithAngle);
 8002248:	6978      	ldr	r0, [r7, #20]
 800224a:	f7fe f935 	bl	80004b8 <__aeabi_f2d>
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	4b73      	ldr	r3, [pc, #460]	; (8002420 <SunCalculatePosition+0x710>)
 8002254:	f7fe f984 	bl	8000560 <__aeabi_dmul>
 8002258:	4603      	mov	r3, r0
 800225a:	460c      	mov	r4, r1
 800225c:	4618      	mov	r0, r3
 800225e:	4621      	mov	r1, r4
 8002260:	a36b      	add	r3, pc, #428	; (adr r3, 8002410 <SunCalculatePosition+0x700>)
 8002262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002266:	f7fe faa5 	bl	80007b4 <__aeabi_ddiv>
 800226a:	4603      	mov	r3, r0
 800226c:	460c      	mov	r4, r1
 800226e:	4618      	mov	r0, r3
 8002270:	4621      	mov	r1, r4
 8002272:	f7fe fc45 	bl	8000b00 <__aeabi_d2f>
 8002276:	4602      	mov	r2, r0
 8002278:	4b6a      	ldr	r3, [pc, #424]	; (8002424 <SunCalculatePosition+0x714>)
 800227a:	601a      	str	r2, [r3, #0]

	//solar azimuth angle from North
	float solarAzimuthAngle = acosf((sinf(deg2rad(latitude))*cosf(solarZenithAngle)-sinf(declinationRad))/(cosf(deg2rad(latitude))*sinf(solarZenithAngle)));
 800227c:	6838      	ldr	r0, [r7, #0]
 800227e:	f7fe f91b 	bl	80004b8 <__aeabi_f2d>
 8002282:	a363      	add	r3, pc, #396	; (adr r3, 8002410 <SunCalculatePosition+0x700>)
 8002284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002288:	f7fe f96a 	bl	8000560 <__aeabi_dmul>
 800228c:	4603      	mov	r3, r0
 800228e:	460c      	mov	r4, r1
 8002290:	4618      	mov	r0, r3
 8002292:	4621      	mov	r1, r4
 8002294:	f04f 0200 	mov.w	r2, #0
 8002298:	4b61      	ldr	r3, [pc, #388]	; (8002420 <SunCalculatePosition+0x710>)
 800229a:	f7fe fa8b 	bl	80007b4 <__aeabi_ddiv>
 800229e:	4603      	mov	r3, r0
 80022a0:	460c      	mov	r4, r1
 80022a2:	4618      	mov	r0, r3
 80022a4:	4621      	mov	r1, r4
 80022a6:	f7fe fc2b 	bl	8000b00 <__aeabi_d2f>
 80022aa:	4603      	mov	r3, r0
 80022ac:	ee00 3a10 	vmov	s0, r3
 80022b0:	f000 fe5a 	bl	8002f68 <sinf>
 80022b4:	eeb0 8a40 	vmov.f32	s16, s0
 80022b8:	ed97 0a05 	vldr	s0, [r7, #20]
 80022bc:	f000 fe14 	bl	8002ee8 <cosf>
 80022c0:	eef0 7a40 	vmov.f32	s15, s0
 80022c4:	ee28 8a27 	vmul.f32	s16, s16, s15
 80022c8:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80022cc:	f000 fe4c 	bl	8002f68 <sinf>
 80022d0:	eef0 7a40 	vmov.f32	s15, s0
 80022d4:	ee38 8a67 	vsub.f32	s16, s16, s15
 80022d8:	6838      	ldr	r0, [r7, #0]
 80022da:	f7fe f8ed 	bl	80004b8 <__aeabi_f2d>
 80022de:	a34c      	add	r3, pc, #304	; (adr r3, 8002410 <SunCalculatePosition+0x700>)
 80022e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e4:	f7fe f93c 	bl	8000560 <__aeabi_dmul>
 80022e8:	4603      	mov	r3, r0
 80022ea:	460c      	mov	r4, r1
 80022ec:	4618      	mov	r0, r3
 80022ee:	4621      	mov	r1, r4
 80022f0:	f04f 0200 	mov.w	r2, #0
 80022f4:	4b4a      	ldr	r3, [pc, #296]	; (8002420 <SunCalculatePosition+0x710>)
 80022f6:	f7fe fa5d 	bl	80007b4 <__aeabi_ddiv>
 80022fa:	4603      	mov	r3, r0
 80022fc:	460c      	mov	r4, r1
 80022fe:	4618      	mov	r0, r3
 8002300:	4621      	mov	r1, r4
 8002302:	f7fe fbfd 	bl	8000b00 <__aeabi_d2f>
 8002306:	4603      	mov	r3, r0
 8002308:	ee00 3a10 	vmov	s0, r3
 800230c:	f000 fdec 	bl	8002ee8 <cosf>
 8002310:	eef0 8a40 	vmov.f32	s17, s0
 8002314:	ed97 0a05 	vldr	s0, [r7, #20]
 8002318:	f000 fe26 	bl	8002f68 <sinf>
 800231c:	eef0 7a40 	vmov.f32	s15, s0
 8002320:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8002324:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8002328:	eeb0 0a47 	vmov.f32	s0, s14
 800232c:	f000 fec2 	bl	80030b4 <acosf>
 8002330:	ed87 0a04 	vstr	s0, [r7, #16]
	if(sha>0)	solarAzimuthAngleDeg = fmod(rad2deg(solarAzimuthAngle)+180,360);
 8002334:	edd7 7a06 	vldr	s15, [r7, #24]
 8002338:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800233c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002340:	dd2f      	ble.n	80023a2 <SunCalculatePosition+0x692>
 8002342:	6938      	ldr	r0, [r7, #16]
 8002344:	f7fe f8b8 	bl	80004b8 <__aeabi_f2d>
 8002348:	f04f 0200 	mov.w	r2, #0
 800234c:	4b34      	ldr	r3, [pc, #208]	; (8002420 <SunCalculatePosition+0x710>)
 800234e:	f7fe f907 	bl	8000560 <__aeabi_dmul>
 8002352:	4603      	mov	r3, r0
 8002354:	460c      	mov	r4, r1
 8002356:	4618      	mov	r0, r3
 8002358:	4621      	mov	r1, r4
 800235a:	a32d      	add	r3, pc, #180	; (adr r3, 8002410 <SunCalculatePosition+0x700>)
 800235c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002360:	f7fe fa28 	bl	80007b4 <__aeabi_ddiv>
 8002364:	4603      	mov	r3, r0
 8002366:	460c      	mov	r4, r1
 8002368:	4618      	mov	r0, r3
 800236a:	4621      	mov	r1, r4
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	4b2b      	ldr	r3, [pc, #172]	; (8002420 <SunCalculatePosition+0x710>)
 8002372:	f7fd ff43 	bl	80001fc <__adddf3>
 8002376:	4603      	mov	r3, r0
 8002378:	460c      	mov	r4, r1
 800237a:	ec44 3b17 	vmov	d7, r3, r4
 800237e:	ed9f 1b26 	vldr	d1, [pc, #152]	; 8002418 <SunCalculatePosition+0x708>
 8002382:	eeb0 0a47 	vmov.f32	s0, s14
 8002386:	eef0 0a67 	vmov.f32	s1, s15
 800238a:	f000 fe2f 	bl	8002fec <fmod>
 800238e:	ec54 3b10 	vmov	r3, r4, d0
 8002392:	4618      	mov	r0, r3
 8002394:	4621      	mov	r1, r4
 8002396:	f7fe fbb3 	bl	8000b00 <__aeabi_d2f>
 800239a:	4602      	mov	r2, r0
 800239c:	4b22      	ldr	r3, [pc, #136]	; (8002428 <SunCalculatePosition+0x718>)
 800239e:	601a      	str	r2, [r3, #0]
	else solarAzimuthAngleDeg = fmod(540 - rad2deg(solarAzimuthAngle),360);
}
 80023a0:	e02e      	b.n	8002400 <SunCalculatePosition+0x6f0>
	else solarAzimuthAngleDeg = fmod(540 - rad2deg(solarAzimuthAngle),360);
 80023a2:	6938      	ldr	r0, [r7, #16]
 80023a4:	f7fe f888 	bl	80004b8 <__aeabi_f2d>
 80023a8:	f04f 0200 	mov.w	r2, #0
 80023ac:	4b1c      	ldr	r3, [pc, #112]	; (8002420 <SunCalculatePosition+0x710>)
 80023ae:	f7fe f8d7 	bl	8000560 <__aeabi_dmul>
 80023b2:	4603      	mov	r3, r0
 80023b4:	460c      	mov	r4, r1
 80023b6:	4618      	mov	r0, r3
 80023b8:	4621      	mov	r1, r4
 80023ba:	a315      	add	r3, pc, #84	; (adr r3, 8002410 <SunCalculatePosition+0x700>)
 80023bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c0:	f7fe f9f8 	bl	80007b4 <__aeabi_ddiv>
 80023c4:	4603      	mov	r3, r0
 80023c6:	460c      	mov	r4, r1
 80023c8:	461a      	mov	r2, r3
 80023ca:	4623      	mov	r3, r4
 80023cc:	f04f 0000 	mov.w	r0, #0
 80023d0:	4916      	ldr	r1, [pc, #88]	; (800242c <SunCalculatePosition+0x71c>)
 80023d2:	f7fd ff11 	bl	80001f8 <__aeabi_dsub>
 80023d6:	4603      	mov	r3, r0
 80023d8:	460c      	mov	r4, r1
 80023da:	ec44 3b17 	vmov	d7, r3, r4
 80023de:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8002418 <SunCalculatePosition+0x708>
 80023e2:	eeb0 0a47 	vmov.f32	s0, s14
 80023e6:	eef0 0a67 	vmov.f32	s1, s15
 80023ea:	f000 fdff 	bl	8002fec <fmod>
 80023ee:	ec54 3b10 	vmov	r3, r4, d0
 80023f2:	4618      	mov	r0, r3
 80023f4:	4621      	mov	r1, r4
 80023f6:	f7fe fb83 	bl	8000b00 <__aeabi_d2f>
 80023fa:	4602      	mov	r2, r0
 80023fc:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <SunCalculatePosition+0x718>)
 80023fe:	601a      	str	r2, [r3, #0]
}
 8002400:	bf00      	nop
 8002402:	3730      	adds	r7, #48	; 0x30
 8002404:	46bd      	mov	sp, r7
 8002406:	ecbd 8b02 	vpop	{d8}
 800240a:	bdb0      	pop	{r4, r5, r7, pc}
 800240c:	f3af 8000 	nop.w
 8002410:	54442d18 	.word	0x54442d18
 8002414:	400921fb 	.word	0x400921fb
 8002418:	00000000 	.word	0x00000000
 800241c:	40768000 	.word	0x40768000
 8002420:	40668000 	.word	0x40668000
 8002424:	200000f0 	.word	0x200000f0
 8002428:	200000f4 	.word	0x200000f4
 800242c:	4080e000 	.word	0x4080e000

08002430 <SunGetCurrentAzimuth>:

// return current azimuth angle
float SunGetCurrentAzimuth()
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
	return solarAzimuthAngleDeg;
 8002434:	4b04      	ldr	r3, [pc, #16]	; (8002448 <SunGetCurrentAzimuth+0x18>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	ee07 3a90 	vmov	s15, r3
}
 800243c:	eeb0 0a67 	vmov.f32	s0, s15
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	200000f4 	.word	0x200000f4

0800244c <SunGetCurrentZenith>:

// return current zenith angle
float SunGetCurrentZenith()
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
	return solarZenithAngleDeg;
 8002450:	4b04      	ldr	r3, [pc, #16]	; (8002464 <SunGetCurrentZenith+0x18>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	ee07 3a90 	vmov	s15, r3
}
 8002458:	eeb0 0a67 	vmov.f32	s0, s15
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	200000f0 	.word	0x200000f0

08002468 <SysTickInit>:

volatile int ticks;

// Configuration SysTick registers
void SysTickInit()
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
	SysTick->LOAD = SYSTICK_CONFIG_MS - 1;			// Number of cycles between interrupts
 800246c:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <SysTickInit+0x38>)
 800246e:	4a0d      	ldr	r2, [pc, #52]	; (80024a4 <SysTickInit+0x3c>)
 8002470:	605a      	str	r2, [r3, #4]

	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;		// Enable interrupt
 8002472:	4a0b      	ldr	r2, [pc, #44]	; (80024a0 <SysTickInit+0x38>)
 8002474:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <SysTickInit+0x38>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f043 0302 	orr.w	r3, r3, #2
 800247c:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;	// Enable clock system AHB
 800247e:	4a08      	ldr	r2, [pc, #32]	; (80024a0 <SysTickInit+0x38>)
 8002480:	4b07      	ldr	r3, [pc, #28]	; (80024a0 <SysTickInit+0x38>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f043 0304 	orr.w	r3, r3, #4
 8002488:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;		// Enable SysTick
 800248a:	4a05      	ldr	r2, [pc, #20]	; (80024a0 <SysTickInit+0x38>)
 800248c:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <SysTickInit+0x38>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f043 0301 	orr.w	r3, r3, #1
 8002494:	6013      	str	r3, [r2, #0]
}
 8002496:	bf00      	nop
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	e000e010 	.word	0xe000e010
 80024a4:	0001387f 	.word	0x0001387f

080024a8 <SysTick_Handler>:

void SysTick_Handler()
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
	ticks++;
 80024ac:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <SysTick_Handler+0x18>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	3301      	adds	r3, #1
 80024b2:	4a03      	ldr	r2, [pc, #12]	; (80024c0 <SysTick_Handler+0x18>)
 80024b4:	6013      	str	r3, [r2, #0]
}
 80024b6:	bf00      	nop
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	200000f8 	.word	0x200000f8

080024c4 <millis>:

// Return current time in milliseconds
uint32_t millis()
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
	return ticks;
 80024c8:	4b03      	ldr	r3, [pc, #12]	; (80024d8 <millis+0x14>)
 80024ca:	681b      	ldr	r3, [r3, #0]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	200000f8 	.word	0x200000f8

080024dc <timeElapsed>:

// Return 1 if time ms elapsed from the previousTime
char timeElapsed(uint32_t ms, uint32_t previousTime)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
	uint32_t time = millis();
 80024e6:	f7ff ffed 	bl	80024c4 <millis>
 80024ea:	60f8      	str	r0, [r7, #12]
	if(time - previousTime >= ms) return 1;
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	1ad2      	subs	r2, r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d301      	bcc.n	80024fc <timeElapsed+0x20>
 80024f8:	2301      	movs	r3, #1
 80024fa:	e000      	b.n	80024fe <timeElapsed+0x22>
	else return 0;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <NVIC_EnableIRQ>:
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002512:	4909      	ldr	r1, [pc, #36]	; (8002538 <NVIC_EnableIRQ+0x30>)
 8002514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002518:	095b      	lsrs	r3, r3, #5
 800251a:	79fa      	ldrb	r2, [r7, #7]
 800251c:	f002 021f 	and.w	r2, r2, #31
 8002520:	2001      	movs	r0, #1
 8002522:	fa00 f202 	lsl.w	r2, r0, r2
 8002526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	e000e100 	.word	0xe000e100

0800253c <USART3_Init>:
	float a;
}floatToBytes;


void USART3_Init()
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0

	// 1. Enable USART3 clock and GPIOB GPIOD (PB10 -> TX, PD9 - RX)
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN | RCC_AHB2ENR_GPIODEN;
 8002540:	4a1c      	ldr	r2, [pc, #112]	; (80025b4 <USART3_Init+0x78>)
 8002542:	4b1c      	ldr	r3, [pc, #112]	; (80025b4 <USART3_Init+0x78>)
 8002544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002546:	f043 030a 	orr.w	r3, r3, #10
 800254a:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART3EN;
 800254c:	4a19      	ldr	r2, [pc, #100]	; (80025b4 <USART3_Init+0x78>)
 800254e:	4b19      	ldr	r3, [pc, #100]	; (80025b4 <USART3_Init+0x78>)
 8002550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002552:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002556:	6593      	str	r3, [r2, #88]	; 0x58

	// 2. Configure LPUART pins as alternate functions
	GPIOB->MODER &= ~GPIO_MODER_MODE10_0; 	// Set PB10 as Alternate function, 0 write in MODER7[1]
 8002558:	4a17      	ldr	r2, [pc, #92]	; (80025b8 <USART3_Init+0x7c>)
 800255a:	4b17      	ldr	r3, [pc, #92]	; (80025b8 <USART3_Init+0x7c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002562:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~GPIO_MODER_MODE9_0; 	// Set PD9 as Alternate function, 0 write in MODER8[1]
 8002564:	4a15      	ldr	r2, [pc, #84]	; (80025bc <USART3_Init+0x80>)
 8002566:	4b15      	ldr	r3, [pc, #84]	; (80025bc <USART3_Init+0x80>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800256e:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[1] |= GPIO_AFRH_AFSEL10_0 | GPIO_AFRH_AFSEL10_1 | GPIO_AFRH_AFSEL10_2;	//PB10 -> Select alternate function in AFRH (USART3_TX), AF7 -> bits(11:10:9:8)=(0:1:1:1)
 8002570:	4a11      	ldr	r2, [pc, #68]	; (80025b8 <USART3_Init+0x7c>)
 8002572:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <USART3_Init+0x7c>)
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800257a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= GPIO_AFRH_AFSEL9_0 | GPIO_AFRH_AFSEL9_1 | GPIO_AFRH_AFSEL9_2;		//PD9 -> Select alternate function in AFRH (USART3_RX), Table 16 datasheet STM32L496
 800257c:	4a0f      	ldr	r2, [pc, #60]	; (80025bc <USART3_Init+0x80>)
 800257e:	4b0f      	ldr	r3, [pc, #60]	; (80025bc <USART3_Init+0x80>)
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002582:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002586:	6253      	str	r3, [r2, #36]	; 0x24

	// 3. Set word length, baud rate
	// USART3->CR1 |=				// Default word length -> 1 start bit, 8 data bits
	// USART3->CR2 |=				// Default 1 STOP bits
	USART3->BRR = F_CLK/BAUDRATE;	// 115200 baudrate
 8002588:	4b0d      	ldr	r3, [pc, #52]	; (80025c0 <USART3_Init+0x84>)
 800258a:	f240 22b6 	movw	r2, #694	; 0x2b6
 800258e:	60da      	str	r2, [r3, #12]

	// 4. Enable UART, transmitter and receiver
	USART3->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8002590:	4a0b      	ldr	r2, [pc, #44]	; (80025c0 <USART3_Init+0x84>)
 8002592:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <USART3_Init+0x84>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f043 030d 	orr.w	r3, r3, #13
 800259a:	6013      	str	r3, [r2, #0]

	// 5. Enable USART interrupt
	USART3->CR1 |= USART_CR1_RXNEIE; //| USART_CR1_IDLEIE;
 800259c:	4a08      	ldr	r2, [pc, #32]	; (80025c0 <USART3_Init+0x84>)
 800259e:	4b08      	ldr	r3, [pc, #32]	; (80025c0 <USART3_Init+0x84>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f043 0320 	orr.w	r3, r3, #32
 80025a6:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(USART3_IRQn);
 80025a8:	2027      	movs	r0, #39	; 0x27
 80025aa:	f7ff ffad 	bl	8002508 <NVIC_EnableIRQ>
}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40021000 	.word	0x40021000
 80025b8:	48000400 	.word	0x48000400
 80025bc:	48000c00 	.word	0x48000c00
 80025c0:	40004800 	.word	0x40004800

080025c4 <dataToBuffer>:


// Write data to send buffer
void dataToBuffer(float *var, unsigned char *bufSend)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
	unsigned char j,i;
	bufSend[0] = '#'; // Start of frame
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	2223      	movs	r2, #35	; 0x23
 80025d2:	701a      	strb	r2, [r3, #0]
	bufSend[1] = '#';
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	3301      	adds	r3, #1
 80025d8:	2223      	movs	r2, #35	; 0x23
 80025da:	701a      	strb	r2, [r3, #0]
	for(j=0;j<NUM_OF_FLOATS_SEND_USART;j++)
 80025dc:	2300      	movs	r3, #0
 80025de:	73fb      	strb	r3, [r7, #15]
 80025e0:	e01f      	b.n	8002622 <dataToBuffer+0x5e>
	{
	floatToBytes.a = var[j];
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	4413      	add	r3, r2
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a15      	ldr	r2, [pc, #84]	; (8002644 <dataToBuffer+0x80>)
 80025ee:	6013      	str	r3, [r2, #0]
	for(i=0;i<sizeof(float);i++)
 80025f0:	2300      	movs	r3, #0
 80025f2:	73bb      	strb	r3, [r7, #14]
 80025f4:	e00f      	b.n	8002616 <dataToBuffer+0x52>
	{
		bufSend[2+i+sizeof(float)*j] = floatToBytes.bytes[3-i];
 80025f6:	7bba      	ldrb	r2, [r7, #14]
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	3302      	adds	r3, #2
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	4413      	add	r3, r2
 8002604:	7bba      	ldrb	r2, [r7, #14]
 8002606:	f1c2 0203 	rsb	r2, r2, #3
 800260a:	490e      	ldr	r1, [pc, #56]	; (8002644 <dataToBuffer+0x80>)
 800260c:	5c8a      	ldrb	r2, [r1, r2]
 800260e:	701a      	strb	r2, [r3, #0]
	for(i=0;i<sizeof(float);i++)
 8002610:	7bbb      	ldrb	r3, [r7, #14]
 8002612:	3301      	adds	r3, #1
 8002614:	73bb      	strb	r3, [r7, #14]
 8002616:	7bbb      	ldrb	r3, [r7, #14]
 8002618:	2b03      	cmp	r3, #3
 800261a:	d9ec      	bls.n	80025f6 <dataToBuffer+0x32>
	for(j=0;j<NUM_OF_FLOATS_SEND_USART;j++)
 800261c:	7bfb      	ldrb	r3, [r7, #15]
 800261e:	3301      	adds	r3, #1
 8002620:	73fb      	strb	r3, [r7, #15]
 8002622:	7bfb      	ldrb	r3, [r7, #15]
 8002624:	2b0d      	cmp	r3, #13
 8002626:	d9dc      	bls.n	80025e2 <dataToBuffer+0x1e>
	}
	}
	bufSend[2+sizeof(float)*NUM_OF_FLOATS_SEND_USART] = '!';		// End of frame
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	333a      	adds	r3, #58	; 0x3a
 800262c:	2221      	movs	r2, #33	; 0x21
 800262e:	701a      	strb	r2, [r3, #0]
	bufSend[3+sizeof(float)*NUM_OF_FLOATS_SEND_USART] = '!';
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	333b      	adds	r3, #59	; 0x3b
 8002634:	2221      	movs	r2, #33	; 0x21
 8002636:	701a      	strb	r2, [r3, #0]
}
 8002638:	bf00      	nop
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	2000013c 	.word	0x2000013c

08002648 <USART3_IRQHandler>:

void USART3_IRQHandler()
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
	// Receive buffer not empty
	// Frame checking
	if(USART3->ISR & USART_ISR_RXNE)
 800264e:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <USART3_IRQHandler+0x58>)
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	f003 0320 	and.w	r3, r3, #32
 8002656:	2b00      	cmp	r3, #0
 8002658:	d01c      	beq.n	8002694 <USART3_IRQHandler+0x4c>
	{
		unsigned char data = USART3->RDR;
 800265a:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <USART3_IRQHandler+0x58>)
 800265c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800265e:	b29b      	uxth	r3, r3
 8002660:	71fb      	strb	r3, [r7, #7]
		bufReceive[wp] = data;
 8002662:	4b10      	ldr	r3, [pc, #64]	; (80026a4 <USART3_IRQHandler+0x5c>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	4619      	mov	r1, r3
 8002668:	4a0f      	ldr	r2, [pc, #60]	; (80026a8 <USART3_IRQHandler+0x60>)
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	5453      	strb	r3, [r2, r1]
		wp++;
 800266e:	4b0d      	ldr	r3, [pc, #52]	; (80026a4 <USART3_IRQHandler+0x5c>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	3301      	adds	r3, #1
 8002674:	b2da      	uxtb	r2, r3
 8002676:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <USART3_IRQHandler+0x5c>)
 8002678:	701a      	strb	r2, [r3, #0]
		if(bufReceive[wp-1] == '#')
 800267a:	4b0a      	ldr	r3, [pc, #40]	; (80026a4 <USART3_IRQHandler+0x5c>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	3b01      	subs	r3, #1
 8002680:	4a09      	ldr	r2, [pc, #36]	; (80026a8 <USART3_IRQHandler+0x60>)
 8002682:	5cd3      	ldrb	r3, [r2, r3]
 8002684:	2b23      	cmp	r3, #35	; 0x23
 8002686:	d105      	bne.n	8002694 <USART3_IRQHandler+0x4c>
		{
			wp = 0;
 8002688:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <USART3_IRQHandler+0x5c>)
 800268a:	2200      	movs	r2, #0
 800268c:	701a      	strb	r2, [r3, #0]
			receivedMessageFromUSART = 1;
 800268e:	4b07      	ldr	r3, [pc, #28]	; (80026ac <USART3_IRQHandler+0x64>)
 8002690:	2201      	movs	r2, #1
 8002692:	701a      	strb	r2, [r3, #0]
	{
		USART3_ReadMessage(wp);
		wp=0;
		USART3->ICR |= USART_ICR_IDLECF;
	}*/
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	40004800 	.word	0x40004800
 80026a4:	200000bc 	.word	0x200000bc
 80026a8:	20000140 	.word	0x20000140
 80026ac:	20000138 	.word	0x20000138

080026b0 <USART3_SendChar>:


// Send a single char
void USART3_SendChar(unsigned char c)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	71fb      	strb	r3, [r7, #7]
	while(!(USART3->ISR & USART_ISR_TXE));	// wait for transmission complete
 80026ba:	bf00      	nop
 80026bc:	4b07      	ldr	r3, [pc, #28]	; (80026dc <USART3_SendChar+0x2c>)
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0f9      	beq.n	80026bc <USART3_SendChar+0xc>
	USART3->TDR = c; 						//load char to register
 80026c8:	4b04      	ldr	r3, [pc, #16]	; (80026dc <USART3_SendChar+0x2c>)
 80026ca:	79fa      	ldrb	r2, [r7, #7]
 80026cc:	b292      	uxth	r2, r2
 80026ce:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	40004800 	.word	0x40004800

080026e0 <USART3_SendData>:

// Send string from uint8_t array
void USART3_SendData(float *var, unsigned char *buf, char len)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	4613      	mov	r3, r2
 80026ec:	71fb      	strb	r3, [r7, #7]
	dataToBuffer(var,buf);
 80026ee:	68b9      	ldr	r1, [r7, #8]
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f7ff ff67 	bl	80025c4 <dataToBuffer>
	for(i=0;i<len;i++)
 80026f6:	4b0e      	ldr	r3, [pc, #56]	; (8002730 <USART3_SendData+0x50>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	701a      	strb	r2, [r3, #0]
 80026fc:	e00e      	b.n	800271c <USART3_SendData+0x3c>
	{
		USART3_SendChar(buf[i]);
 80026fe:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <USART3_SendData+0x50>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	4413      	add	r3, r2
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff ffd0 	bl	80026b0 <USART3_SendChar>
	for(i=0;i<len;i++)
 8002710:	4b07      	ldr	r3, [pc, #28]	; (8002730 <USART3_SendData+0x50>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	3301      	adds	r3, #1
 8002716:	b2da      	uxtb	r2, r3
 8002718:	4b05      	ldr	r3, [pc, #20]	; (8002730 <USART3_SendData+0x50>)
 800271a:	701a      	strb	r2, [r3, #0]
 800271c:	4b04      	ldr	r3, [pc, #16]	; (8002730 <USART3_SendData+0x50>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	79fa      	ldrb	r2, [r7, #7]
 8002722:	429a      	cmp	r2, r3
 8002724:	d8eb      	bhi.n	80026fe <USART3_SendData+0x1e>
	}
}
 8002726:	bf00      	nop
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	200000bd 	.word	0x200000bd

08002734 <main>:
void AlgorithmSunCalculatePosition();
unsigned char charToNum(unsigned char sign);


int main(void)
{
 8002734:	b590      	push	{r4, r7, lr}
 8002736:	b085      	sub	sp, #20
 8002738:	af02      	add	r7, sp, #8
	/*Init flags */
	receivedMessageFromUSART = 0;
 800273a:	4b47      	ldr	r3, [pc, #284]	; (8002858 <main+0x124>)
 800273c:	2200      	movs	r2, #0
 800273e:	701a      	strb	r2, [r3, #0]

	/*Init peripherials */
	SysClockHSI_Init();
 8002740:	f7ff f9b8 	bl	8001ab4 <SysClockHSI_Init>
	RTC_Init();
 8002744:	f7fe ff0a 	bl	800155c <RTC_Init>
	RTC_SetTime(14,20,0);
 8002748:	2200      	movs	r2, #0
 800274a:	2114      	movs	r1, #20
 800274c:	200e      	movs	r0, #14
 800274e:	f7fe ff3d 	bl	80015cc <RTC_SetTime>
	RTC_SetDate(4,5,23);
 8002752:	2217      	movs	r2, #23
 8002754:	2105      	movs	r1, #5
 8002756:	2004      	movs	r0, #4
 8002758:	f7fe ffe6 	bl	8001728 <RTC_SetDate>
	SysTickInit();
 800275c:	f7ff fe84 	bl	8002468 <SysTickInit>
	USART3_Init();
 8002760:	f7ff feec 	bl	800253c <USART3_Init>
	LedInit();
 8002764:	f7fe fdf0 	bl	8001348 <LedInit>
	ServoInit();
 8002768:	f7ff fa00 	bl	8001b6c <ServoInit>
	ButtonsInit();
 800276c:	f7fe fa8e 	bl	8000c8c <ButtonsInit>
	ADC_Init();
 8002770:	f7fe fa16 	bl	8000ba0 <ADC_Init>

	/* Check switch autoMode */
	if(GPIOE->IDR & GPIO_IDR_ID7) autoMode = 0;	// check switch position
 8002774:	4b39      	ldr	r3, [pc, #228]	; (800285c <main+0x128>)
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277c:	2b00      	cmp	r3, #0
 800277e:	d003      	beq.n	8002788 <main+0x54>
 8002780:	4b37      	ldr	r3, [pc, #220]	; (8002860 <main+0x12c>)
 8002782:	2200      	movs	r2, #0
 8002784:	701a      	strb	r2, [r3, #0]
 8002786:	e002      	b.n	800278e <main+0x5a>
	else autoMode = 1;
 8002788:	4b35      	ldr	r3, [pc, #212]	; (8002860 <main+0x12c>)
 800278a:	2201      	movs	r2, #1
 800278c:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  while (1)
  {
	// 'TASK 1' - Auto mode
	if(autoMode)
 800278e:	4b34      	ldr	r3, [pc, #208]	; (8002860 <main+0x12c>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	d02c      	beq.n	80027f2 <main+0xbe>
	{
	if(timeElapsed(15,previousTimeAutoMode))
 8002798:	4b32      	ldr	r3, [pc, #200]	; (8002864 <main+0x130>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4619      	mov	r1, r3
 800279e:	200f      	movs	r0, #15
 80027a0:	f7ff fe9c 	bl	80024dc <timeElapsed>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 8088 	beq.w	80028bc <main+0x188>
	 {
		LedWrite(LED_AUTO,ON);
 80027ac:	2101      	movs	r1, #1
 80027ae:	2004      	movs	r0, #4
 80027b0:	f7fe fe00 	bl	80013b4 <LedWrite>
		LedWrite(LED_MAN,OFF);
 80027b4:	2100      	movs	r1, #0
 80027b6:	2001      	movs	r0, #1
 80027b8:	f7fe fdfc 	bl	80013b4 <LedWrite>

		// Algorithm light sensors
		//AlgorithmLightSensors();

		// Algorithm Sun calculate position
		AlgorithmSunCalculatePosition();
 80027bc:	f000 fab6 	bl	8002d2c <AlgorithmSunCalculatePosition>

		// Set servo position
	  	ServoSetAngleHorizontal(angleHorizontal);
 80027c0:	4b29      	ldr	r3, [pc, #164]	; (8002868 <main+0x134>)
 80027c2:	edd3 7a00 	vldr	s15, [r3]
 80027c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027ca:	ee17 0a90 	vmov	r0, s15
 80027ce:	f7ff fa2f 	bl	8001c30 <ServoSetAngleHorizontal>
	  	ServoSetAngleVertical(angleVertical);
 80027d2:	4b26      	ldr	r3, [pc, #152]	; (800286c <main+0x138>)
 80027d4:	edd3 7a00 	vldr	s15, [r3]
 80027d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027dc:	ee17 0a90 	vmov	r0, s15
 80027e0:	f7ff fa5e 	bl	8001ca0 <ServoSetAngleVertical>

	  	previousTimeAutoMode = millis();
 80027e4:	f7ff fe6e 	bl	80024c4 <millis>
 80027e8:	4603      	mov	r3, r0
 80027ea:	461a      	mov	r2, r3
 80027ec:	4b1d      	ldr	r3, [pc, #116]	; (8002864 <main+0x130>)
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	e064      	b.n	80028bc <main+0x188>
	 }
	 }
	// manual mode
	 else
	 {
		 LedWrite(LED_MAN,ON);
 80027f2:	2101      	movs	r1, #1
 80027f4:	2001      	movs	r0, #1
 80027f6:	f7fe fddd 	bl	80013b4 <LedWrite>
		 LedWrite(LED_AUTO,OFF);
 80027fa:	2100      	movs	r1, #0
 80027fc:	2004      	movs	r0, #4
 80027fe:	f7fe fdd9 	bl	80013b4 <LedWrite>

		 ReadPushbuttons();
 8002802:	f000 fa3d 	bl	8002c80 <ReadPushbuttons>

		 // Limits
		 if(angleVertical > 90) angleVertical = 90;
 8002806:	4b19      	ldr	r3, [pc, #100]	; (800286c <main+0x138>)
 8002808:	edd3 7a00 	vldr	s15, [r3]
 800280c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002870 <main+0x13c>
 8002810:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002818:	dd03      	ble.n	8002822 <main+0xee>
 800281a:	4b14      	ldr	r3, [pc, #80]	; (800286c <main+0x138>)
 800281c:	4a15      	ldr	r2, [pc, #84]	; (8002874 <main+0x140>)
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	e00b      	b.n	800283a <main+0x106>
		 else if(angleVertical < 0) angleVertical = 0;
 8002822:	4b12      	ldr	r3, [pc, #72]	; (800286c <main+0x138>)
 8002824:	edd3 7a00 	vldr	s15, [r3]
 8002828:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800282c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002830:	d503      	bpl.n	800283a <main+0x106>
 8002832:	4b0e      	ldr	r3, [pc, #56]	; (800286c <main+0x138>)
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
		 if(angleHorizontal > 180) angleHorizontal = 180;
 800283a:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <main+0x134>)
 800283c:	edd3 7a00 	vldr	s15, [r3]
 8002840:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8002878 <main+0x144>
 8002844:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800284c:	dd18      	ble.n	8002880 <main+0x14c>
 800284e:	4b06      	ldr	r3, [pc, #24]	; (8002868 <main+0x134>)
 8002850:	4a0a      	ldr	r2, [pc, #40]	; (800287c <main+0x148>)
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	e020      	b.n	8002898 <main+0x164>
 8002856:	bf00      	nop
 8002858:	20000138 	.word	0x20000138
 800285c:	48001000 	.word	0x48001000
 8002860:	200000ec 	.word	0x200000ec
 8002864:	200000c0 	.word	0x200000c0
 8002868:	200000d0 	.word	0x200000d0
 800286c:	200000cc 	.word	0x200000cc
 8002870:	42b40000 	.word	0x42b40000
 8002874:	42b40000 	.word	0x42b40000
 8002878:	43340000 	.word	0x43340000
 800287c:	43340000 	.word	0x43340000
		 else if(angleHorizontal < 0) angleHorizontal = 0;
 8002880:	4bbc      	ldr	r3, [pc, #752]	; (8002b74 <main+0x440>)
 8002882:	edd3 7a00 	vldr	s15, [r3]
 8002886:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800288a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800288e:	d503      	bpl.n	8002898 <main+0x164>
 8002890:	4bb8      	ldr	r3, [pc, #736]	; (8002b74 <main+0x440>)
 8002892:	f04f 0200 	mov.w	r2, #0
 8002896:	601a      	str	r2, [r3, #0]

		 // set servo position
		 ServoSetAngleHorizontal(angleHorizontal);
 8002898:	4bb6      	ldr	r3, [pc, #728]	; (8002b74 <main+0x440>)
 800289a:	edd3 7a00 	vldr	s15, [r3]
 800289e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028a2:	ee17 0a90 	vmov	r0, s15
 80028a6:	f7ff f9c3 	bl	8001c30 <ServoSetAngleHorizontal>
		 ServoSetAngleVertical(angleVertical);
 80028aa:	4bb3      	ldr	r3, [pc, #716]	; (8002b78 <main+0x444>)
 80028ac:	edd3 7a00 	vldr	s15, [r3]
 80028b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028b4:	ee17 0a90 	vmov	r0, s15
 80028b8:	f7ff f9f2 	bl	8001ca0 <ServoSetAngleVertical>
	 }

	// 'TASK 2' - Read light sensor
	if(timeElapsed(10,previousTimeReadSensor))
 80028bc:	4baf      	ldr	r3, [pc, #700]	; (8002b7c <main+0x448>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4619      	mov	r1, r3
 80028c2:	200a      	movs	r0, #10
 80028c4:	f7ff fe0a 	bl	80024dc <timeElapsed>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d007      	beq.n	80028de <main+0x1aa>
	{
		ReadLightSensors();
 80028ce:	f000 f9af 	bl	8002c30 <ReadLightSensors>
		previousTimeReadSensor = millis();
 80028d2:	f7ff fdf7 	bl	80024c4 <millis>
 80028d6:	4603      	mov	r3, r0
 80028d8:	461a      	mov	r2, r3
 80028da:	4ba8      	ldr	r3, [pc, #672]	; (8002b7c <main+0x448>)
 80028dc:	601a      	str	r2, [r3, #0]
	}

	// 'TASK 3' - Send message USART
	if(timeElapsed(TIME_BETWEEN_SEND_USART,previousTimeSendingUSART))
 80028de:	4ba8      	ldr	r3, [pc, #672]	; (8002b80 <main+0x44c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4619      	mov	r1, r3
 80028e4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80028e8:	f7ff fdf8 	bl	80024dc <timeElapsed>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 80b3 	beq.w	8002a5a <main+0x326>
	{
	// Reading and calculate only to sending
	RTC_ReadTime(&hr, &mn, &sc);
 80028f4:	4aa3      	ldr	r2, [pc, #652]	; (8002b84 <main+0x450>)
 80028f6:	49a4      	ldr	r1, [pc, #656]	; (8002b88 <main+0x454>)
 80028f8:	48a4      	ldr	r0, [pc, #656]	; (8002b8c <main+0x458>)
 80028fa:	f7fe ffbd 	bl	8001878 <RTC_ReadTime>
	RTC_ReadDate(&day,&month, &year);
 80028fe:	4aa4      	ldr	r2, [pc, #656]	; (8002b90 <main+0x45c>)
 8002900:	49a4      	ldr	r1, [pc, #656]	; (8002b94 <main+0x460>)
 8002902:	48a5      	ldr	r0, [pc, #660]	; (8002b98 <main+0x464>)
 8002904:	f7ff f80a 	bl	800191c <RTC_ReadDate>
	SunCalculatePosition(timezone,dayYear(day,month),hr,mn,sc,LONGITUDE,LATITUDE);
 8002908:	4ba4      	ldr	r3, [pc, #656]	; (8002b9c <main+0x468>)
 800290a:	781c      	ldrb	r4, [r3, #0]
 800290c:	4ba2      	ldr	r3, [pc, #648]	; (8002b98 <main+0x464>)
 800290e:	781a      	ldrb	r2, [r3, #0]
 8002910:	4ba0      	ldr	r3, [pc, #640]	; (8002b94 <main+0x460>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	4619      	mov	r1, r3
 8002916:	4610      	mov	r0, r2
 8002918:	f7ff f852 	bl	80019c0 <dayYear>
 800291c:	4603      	mov	r3, r0
 800291e:	4618      	mov	r0, r3
 8002920:	4b9a      	ldr	r3, [pc, #616]	; (8002b8c <main+0x458>)
 8002922:	781a      	ldrb	r2, [r3, #0]
 8002924:	4b98      	ldr	r3, [pc, #608]	; (8002b88 <main+0x454>)
 8002926:	7819      	ldrb	r1, [r3, #0]
 8002928:	4b96      	ldr	r3, [pc, #600]	; (8002b84 <main+0x450>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	eddf 0a9c 	vldr	s1, [pc, #624]	; 8002ba0 <main+0x46c>
 8002932:	ed9f 0a9c 	vldr	s0, [pc, #624]	; 8002ba4 <main+0x470>
 8002936:	460b      	mov	r3, r1
 8002938:	4601      	mov	r1, r0
 800293a:	4620      	mov	r0, r4
 800293c:	f7ff f9e8 	bl	8001d10 <SunCalculatePosition>

	// Write data to buf
	ClearBufToSend();
 8002940:	f000 f95a 	bl	8002bf8 <ClearBufToSend>
	bufToSend[0]= (float)hr;					// current hour
 8002944:	4b91      	ldr	r3, [pc, #580]	; (8002b8c <main+0x458>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	ee07 3a90 	vmov	s15, r3
 800294c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002950:	4b95      	ldr	r3, [pc, #596]	; (8002ba8 <main+0x474>)
 8002952:	edc3 7a00 	vstr	s15, [r3]
	bufToSend[1]= (float)mn;					// current minute
 8002956:	4b8c      	ldr	r3, [pc, #560]	; (8002b88 <main+0x454>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	ee07 3a90 	vmov	s15, r3
 800295e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002962:	4b91      	ldr	r3, [pc, #580]	; (8002ba8 <main+0x474>)
 8002964:	edc3 7a01 	vstr	s15, [r3, #4]
	bufToSend[2]= (float)sc;					// current second
 8002968:	4b86      	ldr	r3, [pc, #536]	; (8002b84 <main+0x450>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	ee07 3a90 	vmov	s15, r3
 8002970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002974:	4b8c      	ldr	r3, [pc, #560]	; (8002ba8 <main+0x474>)
 8002976:	edc3 7a02 	vstr	s15, [r3, #8]
	bufToSend[3]= (float)day;					// current day
 800297a:	4b87      	ldr	r3, [pc, #540]	; (8002b98 <main+0x464>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	ee07 3a90 	vmov	s15, r3
 8002982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002986:	4b88      	ldr	r3, [pc, #544]	; (8002ba8 <main+0x474>)
 8002988:	edc3 7a03 	vstr	s15, [r3, #12]
	bufToSend[4]= (float)month;					// current month
 800298c:	4b81      	ldr	r3, [pc, #516]	; (8002b94 <main+0x460>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	ee07 3a90 	vmov	s15, r3
 8002994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002998:	4b83      	ldr	r3, [pc, #524]	; (8002ba8 <main+0x474>)
 800299a:	edc3 7a04 	vstr	s15, [r3, #16]
	bufToSend[5]= (float)year;					// current year
 800299e:	4b7c      	ldr	r3, [pc, #496]	; (8002b90 <main+0x45c>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	ee07 3a90 	vmov	s15, r3
 80029a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029aa:	4b7f      	ldr	r3, [pc, #508]	; (8002ba8 <main+0x474>)
 80029ac:	edc3 7a05 	vstr	s15, [r3, #20]
	bufToSend[6]= SunGetCurrentAzimuth();		// calculate position
 80029b0:	f7ff fd3e 	bl	8002430 <SunGetCurrentAzimuth>
 80029b4:	eef0 7a40 	vmov.f32	s15, s0
 80029b8:	4b7b      	ldr	r3, [pc, #492]	; (8002ba8 <main+0x474>)
 80029ba:	edc3 7a06 	vstr	s15, [r3, #24]
	bufToSend[7]= 90.0- SunGetCurrentZenith();	// calculate position
 80029be:	f7ff fd45 	bl	800244c <SunGetCurrentZenith>
 80029c2:	eeb0 7a40 	vmov.f32	s14, s0
 80029c6:	eddf 7a79 	vldr	s15, [pc, #484]	; 8002bac <main+0x478>
 80029ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029ce:	4b76      	ldr	r3, [pc, #472]	; (8002ba8 <main+0x474>)
 80029d0:	edc3 7a07 	vstr	s15, [r3, #28]
	bufToSend[8]= 90.0 + angleHorizontal;		// current position horizontal (angle from N clockwise -> azimuth)
 80029d4:	4b67      	ldr	r3, [pc, #412]	; (8002b74 <main+0x440>)
 80029d6:	edd3 7a00 	vldr	s15, [r3]
 80029da:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8002bac <main+0x478>
 80029de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029e2:	4b71      	ldr	r3, [pc, #452]	; (8002ba8 <main+0x474>)
 80029e4:	edc3 7a08 	vstr	s15, [r3, #32]
	bufToSend[9]= 90.0 - angleVertical;			// current position vertical (angle from vertical)
 80029e8:	4b63      	ldr	r3, [pc, #396]	; (8002b78 <main+0x444>)
 80029ea:	edd3 7a00 	vldr	s15, [r3]
 80029ee:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8002bac <main+0x478>
 80029f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029f6:	4b6c      	ldr	r3, [pc, #432]	; (8002ba8 <main+0x474>)
 80029f8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	bufToSend[10]=(float)lightSensorUpIntensity;
 80029fc:	4b6c      	ldr	r3, [pc, #432]	; (8002bb0 <main+0x47c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	ee07 3a90 	vmov	s15, r3
 8002a04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a08:	4b67      	ldr	r3, [pc, #412]	; (8002ba8 <main+0x474>)
 8002a0a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	bufToSend[11]=(float)lightSensorDownIntensity;
 8002a0e:	4b69      	ldr	r3, [pc, #420]	; (8002bb4 <main+0x480>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	ee07 3a90 	vmov	s15, r3
 8002a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a1a:	4b63      	ldr	r3, [pc, #396]	; (8002ba8 <main+0x474>)
 8002a1c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	bufToSend[12]=(float)lightSensorWestIntensity;
 8002a20:	4b65      	ldr	r3, [pc, #404]	; (8002bb8 <main+0x484>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	ee07 3a90 	vmov	s15, r3
 8002a28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a2c:	4b5e      	ldr	r3, [pc, #376]	; (8002ba8 <main+0x474>)
 8002a2e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	bufToSend[13]=(float)lightSensorEastIntensity;
 8002a32:	4b62      	ldr	r3, [pc, #392]	; (8002bbc <main+0x488>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	ee07 3a90 	vmov	s15, r3
 8002a3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a3e:	4b5a      	ldr	r3, [pc, #360]	; (8002ba8 <main+0x474>)
 8002a40:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

	USART3_SendData(bufToSend,bufSend,(char)sizeof(bufSend));
 8002a44:	223c      	movs	r2, #60	; 0x3c
 8002a46:	495e      	ldr	r1, [pc, #376]	; (8002bc0 <main+0x48c>)
 8002a48:	4857      	ldr	r0, [pc, #348]	; (8002ba8 <main+0x474>)
 8002a4a:	f7ff fe49 	bl	80026e0 <USART3_SendData>

	previousTimeSendingUSART = millis();
 8002a4e:	f7ff fd39 	bl	80024c4 <millis>
 8002a52:	4603      	mov	r3, r0
 8002a54:	461a      	mov	r2, r3
 8002a56:	4b4a      	ldr	r3, [pc, #296]	; (8002b80 <main+0x44c>)
 8002a58:	601a      	str	r2, [r3, #0]
	}

	// 'TASK 4' - Analyze received frame
	if(receivedMessageFromUSART)
 8002a5a:	4b5a      	ldr	r3, [pc, #360]	; (8002bc4 <main+0x490>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f43f ae95 	beq.w	800278e <main+0x5a>
	{
		unsigned char calcHr, calcMn; // temp var time
		unsigned char calcDay,calcMonth, calcYear;	// temp var date

		switch(bufReceive[0])
 8002a64:	4b58      	ldr	r3, [pc, #352]	; (8002bc8 <main+0x494>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b44      	cmp	r3, #68	; 0x44
 8002a6a:	d03c      	beq.n	8002ae6 <main+0x3b2>
 8002a6c:	2b54      	cmp	r3, #84	; 0x54
 8002a6e:	f040 80b7 	bne.w	8002be0 <main+0x4ac>
		{
		// Set time
		case 'T': 	calcHr = charToNum(bufReceive[1])*10 + charToNum(bufReceive[2]);
 8002a72:	4b55      	ldr	r3, [pc, #340]	; (8002bc8 <main+0x494>)
 8002a74:	785b      	ldrb	r3, [r3, #1]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f000 f9a4 	bl	8002dc4 <charToNum>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	461a      	mov	r2, r3
 8002a80:	0092      	lsls	r2, r2, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	b2dc      	uxtb	r4, r3
 8002a88:	4b4f      	ldr	r3, [pc, #316]	; (8002bc8 <main+0x494>)
 8002a8a:	789b      	ldrb	r3, [r3, #2]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 f999 	bl	8002dc4 <charToNum>
 8002a92:	4603      	mov	r3, r0
 8002a94:	4423      	add	r3, r4
 8002a96:	71fb      	strb	r3, [r7, #7]
					calcMn = charToNum(bufReceive[3])*10 + charToNum(bufReceive[4]);
 8002a98:	4b4b      	ldr	r3, [pc, #300]	; (8002bc8 <main+0x494>)
 8002a9a:	78db      	ldrb	r3, [r3, #3]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 f991 	bl	8002dc4 <charToNum>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	0092      	lsls	r2, r2, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	b2dc      	uxtb	r4, r3
 8002aae:	4b46      	ldr	r3, [pc, #280]	; (8002bc8 <main+0x494>)
 8002ab0:	791b      	ldrb	r3, [r3, #4]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 f986 	bl	8002dc4 <charToNum>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	4423      	add	r3, r4
 8002abc:	71bb      	strb	r3, [r7, #6]
					if(calcHr<0 || calcHr >23 || calcMn<0 || calcMn>59) USART3_SendChar('N');
 8002abe:	79fb      	ldrb	r3, [r7, #7]
 8002ac0:	2b17      	cmp	r3, #23
 8002ac2:	d802      	bhi.n	8002aca <main+0x396>
 8002ac4:	79bb      	ldrb	r3, [r7, #6]
 8002ac6:	2b3b      	cmp	r3, #59	; 0x3b
 8002ac8:	d903      	bls.n	8002ad2 <main+0x39e>
 8002aca:	204e      	movs	r0, #78	; 0x4e
 8002acc:	f7ff fdf0 	bl	80026b0 <USART3_SendChar>
					else
					{
						USART3_SendChar('Y');
						RTC_SetTime(calcHr,calcMn,0);
					}
		break;
 8002ad0:	e086      	b.n	8002be0 <main+0x4ac>
						USART3_SendChar('Y');
 8002ad2:	2059      	movs	r0, #89	; 0x59
 8002ad4:	f7ff fdec 	bl	80026b0 <USART3_SendChar>
						RTC_SetTime(calcHr,calcMn,0);
 8002ad8:	79b9      	ldrb	r1, [r7, #6]
 8002ada:	79fb      	ldrb	r3, [r7, #7]
 8002adc:	2200      	movs	r2, #0
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fe fd74 	bl	80015cc <RTC_SetTime>
		break;
 8002ae4:	e07c      	b.n	8002be0 <main+0x4ac>

		// Set date
		case 'D':	calcDay = charToNum(bufReceive[1])*10 + charToNum(bufReceive[2]);
 8002ae6:	4b38      	ldr	r3, [pc, #224]	; (8002bc8 <main+0x494>)
 8002ae8:	785b      	ldrb	r3, [r3, #1]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 f96a 	bl	8002dc4 <charToNum>
 8002af0:	4603      	mov	r3, r0
 8002af2:	461a      	mov	r2, r3
 8002af4:	0092      	lsls	r2, r2, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	b2dc      	uxtb	r4, r3
 8002afc:	4b32      	ldr	r3, [pc, #200]	; (8002bc8 <main+0x494>)
 8002afe:	789b      	ldrb	r3, [r3, #2]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 f95f 	bl	8002dc4 <charToNum>
 8002b06:	4603      	mov	r3, r0
 8002b08:	4423      	add	r3, r4
 8002b0a:	717b      	strb	r3, [r7, #5]
					calcMonth = charToNum(bufReceive[3])*10 + charToNum(bufReceive[4]);
 8002b0c:	4b2e      	ldr	r3, [pc, #184]	; (8002bc8 <main+0x494>)
 8002b0e:	78db      	ldrb	r3, [r3, #3]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f000 f957 	bl	8002dc4 <charToNum>
 8002b16:	4603      	mov	r3, r0
 8002b18:	461a      	mov	r2, r3
 8002b1a:	0092      	lsls	r2, r2, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	b2dc      	uxtb	r4, r3
 8002b22:	4b29      	ldr	r3, [pc, #164]	; (8002bc8 <main+0x494>)
 8002b24:	791b      	ldrb	r3, [r3, #4]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 f94c 	bl	8002dc4 <charToNum>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	4423      	add	r3, r4
 8002b30:	713b      	strb	r3, [r7, #4]
					calcYear = charToNum(bufReceive[5])*10 + charToNum(bufReceive[6]);
 8002b32:	4b25      	ldr	r3, [pc, #148]	; (8002bc8 <main+0x494>)
 8002b34:	795b      	ldrb	r3, [r3, #5]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 f944 	bl	8002dc4 <charToNum>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	461a      	mov	r2, r3
 8002b40:	0092      	lsls	r2, r2, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	b2dc      	uxtb	r4, r3
 8002b48:	4b1f      	ldr	r3, [pc, #124]	; (8002bc8 <main+0x494>)
 8002b4a:	799b      	ldrb	r3, [r3, #6]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f000 f939 	bl	8002dc4 <charToNum>
 8002b52:	4603      	mov	r3, r0
 8002b54:	4423      	add	r3, r4
 8002b56:	70fb      	strb	r3, [r7, #3]
					if(calcDay<0 || calcDay >31 || calcMonth<0 || calcMonth>12 || calcYear<0 || calcYear >99) USART3_SendChar('N');
 8002b58:	797b      	ldrb	r3, [r7, #5]
 8002b5a:	2b1f      	cmp	r3, #31
 8002b5c:	d805      	bhi.n	8002b6a <main+0x436>
 8002b5e:	793b      	ldrb	r3, [r7, #4]
 8002b60:	2b0c      	cmp	r3, #12
 8002b62:	d802      	bhi.n	8002b6a <main+0x436>
 8002b64:	78fb      	ldrb	r3, [r7, #3]
 8002b66:	2b63      	cmp	r3, #99	; 0x63
 8002b68:	d930      	bls.n	8002bcc <main+0x498>
 8002b6a:	204e      	movs	r0, #78	; 0x4e
 8002b6c:	f7ff fda0 	bl	80026b0 <USART3_SendChar>
					else
					{
						USART3_SendChar('Y');
						RTC_SetDate(calcDay,calcMonth,calcYear);
					}
		break;
 8002b70:	e035      	b.n	8002bde <main+0x4aa>
 8002b72:	bf00      	nop
 8002b74:	200000d0 	.word	0x200000d0
 8002b78:	200000cc 	.word	0x200000cc
 8002b7c:	200000c8 	.word	0x200000c8
 8002b80:	200000c4 	.word	0x200000c4
 8002b84:	200000d6 	.word	0x200000d6
 8002b88:	200000d5 	.word	0x200000d5
 8002b8c:	200000d4 	.word	0x200000d4
 8002b90:	200000d9 	.word	0x200000d9
 8002b94:	200000d8 	.word	0x200000d8
 8002b98:	200000d7 	.word	0x200000d7
 8002b9c:	20000008 	.word	0x20000008
 8002ba0:	42481b8e 	.word	0x42481b8e
 8002ba4:	41afe1ea 	.word	0x41afe1ea
 8002ba8:	20000154 	.word	0x20000154
 8002bac:	42b40000 	.word	0x42b40000
 8002bb0:	200000dc 	.word	0x200000dc
 8002bb4:	200000e0 	.word	0x200000e0
 8002bb8:	200000e8 	.word	0x200000e8
 8002bbc:	200000e4 	.word	0x200000e4
 8002bc0:	200000fc 	.word	0x200000fc
 8002bc4:	20000138 	.word	0x20000138
 8002bc8:	20000140 	.word	0x20000140
						USART3_SendChar('Y');
 8002bcc:	2059      	movs	r0, #89	; 0x59
 8002bce:	f7ff fd6f 	bl	80026b0 <USART3_SendChar>
						RTC_SetDate(calcDay,calcMonth,calcYear);
 8002bd2:	78fa      	ldrb	r2, [r7, #3]
 8002bd4:	7939      	ldrb	r1, [r7, #4]
 8002bd6:	797b      	ldrb	r3, [r7, #5]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fe fda5 	bl	8001728 <RTC_SetDate>
		break;
 8002bde:	bf00      	nop
		}


		LedWrite(LED3,TOG);
 8002be0:	2102      	movs	r1, #2
 8002be2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002be6:	f7fe fbe5 	bl	80013b4 <LedWrite>
		receivedMessageFromUSART = 0;
 8002bea:	4b02      	ldr	r3, [pc, #8]	; (8002bf4 <main+0x4c0>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	701a      	strb	r2, [r3, #0]
	if(autoMode)
 8002bf0:	e5cd      	b.n	800278e <main+0x5a>
 8002bf2:	bf00      	nop
 8002bf4:	20000138 	.word	0x20000138

08002bf8 <ClearBufToSend>:
}
////// END MAIN ///////

// Clear buffer to send USART -> set 0
void ClearBufToSend()
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
	int i;
	for (i=0;i<NUM_OF_FLOATS_SEND_USART;i++)
 8002bfe:	2300      	movs	r3, #0
 8002c00:	607b      	str	r3, [r7, #4]
 8002c02:	e009      	b.n	8002c18 <ClearBufToSend+0x20>
	{
		bufToSend[i] = 0;
 8002c04:	4a09      	ldr	r2, [pc, #36]	; (8002c2c <ClearBufToSend+0x34>)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f04f 0200 	mov.w	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]
	for (i=0;i<NUM_OF_FLOATS_SEND_USART;i++)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3301      	adds	r3, #1
 8002c16:	607b      	str	r3, [r7, #4]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b0d      	cmp	r3, #13
 8002c1c:	ddf2      	ble.n	8002c04 <ClearBufToSend+0xc>
	}
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	20000154 	.word	0x20000154

08002c30 <ReadLightSensors>:
// Reading from light sensors
void ReadLightSensors()
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
	lightSensorUpIntensity = readADC(lightSensorUpChannel);
 8002c34:	2301      	movs	r3, #1
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fd ffe0 	bl	8000bfc <readADC>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <ReadLightSensors+0x40>)
 8002c40:	601a      	str	r2, [r3, #0]
	lightSensorDownIntensity = readADC(lightSensorDownChannel);
 8002c42:	2302      	movs	r3, #2
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fd ffd9 	bl	8000bfc <readADC>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <ReadLightSensors+0x44>)
 8002c4e:	601a      	str	r2, [r3, #0]
	lightSensorWestIntensity = readADC(lightSensorWestChannel);
 8002c50:	230e      	movs	r3, #14
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fd ffd2 	bl	8000bfc <readADC>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	4b07      	ldr	r3, [pc, #28]	; (8002c78 <ReadLightSensors+0x48>)
 8002c5c:	601a      	str	r2, [r3, #0]
	lightSensorEastIntensity = readADC(lightSensorEastChannel);
 8002c5e:	230d      	movs	r3, #13
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fd ffcb 	bl	8000bfc <readADC>
 8002c66:	4602      	mov	r2, r0
 8002c68:	4b04      	ldr	r3, [pc, #16]	; (8002c7c <ReadLightSensors+0x4c>)
 8002c6a:	601a      	str	r2, [r3, #0]
}
 8002c6c:	bf00      	nop
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	200000dc 	.word	0x200000dc
 8002c74:	200000e0 	.word	0x200000e0
 8002c78:	200000e8 	.word	0x200000e8
 8002c7c:	200000e4 	.word	0x200000e4

08002c80 <ReadPushbuttons>:

// Reading from pushbuttons
void ReadPushbuttons()
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
if(ButtonUpRead() == 1) {LedWrite(LED2,TOG); angleVertical +=5;}
 8002c84:	f7fe f898 	bl	8000db8 <ButtonUpRead>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d10d      	bne.n	8002caa <ReadPushbuttons+0x2a>
 8002c8e:	2102      	movs	r1, #2
 8002c90:	2080      	movs	r0, #128	; 0x80
 8002c92:	f7fe fb8f 	bl	80013b4 <LedWrite>
 8002c96:	4b23      	ldr	r3, [pc, #140]	; (8002d24 <ReadPushbuttons+0xa4>)
 8002c98:	edd3 7a00 	vldr	s15, [r3]
 8002c9c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002ca0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ca4:	4b1f      	ldr	r3, [pc, #124]	; (8002d24 <ReadPushbuttons+0xa4>)
 8002ca6:	edc3 7a00 	vstr	s15, [r3]
if(ButtonDownRead() == 1) {LedWrite(LED2,TOG); angleVertical -=5;}
 8002caa:	f7fe f937 	bl	8000f1c <ButtonDownRead>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d10d      	bne.n	8002cd0 <ReadPushbuttons+0x50>
 8002cb4:	2102      	movs	r1, #2
 8002cb6:	2080      	movs	r0, #128	; 0x80
 8002cb8:	f7fe fb7c 	bl	80013b4 <LedWrite>
 8002cbc:	4b19      	ldr	r3, [pc, #100]	; (8002d24 <ReadPushbuttons+0xa4>)
 8002cbe:	edd3 7a00 	vldr	s15, [r3]
 8002cc2:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002cc6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002cca:	4b16      	ldr	r3, [pc, #88]	; (8002d24 <ReadPushbuttons+0xa4>)
 8002ccc:	edc3 7a00 	vstr	s15, [r3]
if(ButtonLeftRead() == 1) {LedWrite(LED3,TOG); angleHorizontal +=5;}
 8002cd0:	f7fe f9d6 	bl	8001080 <ButtonLeftRead>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d10e      	bne.n	8002cf8 <ReadPushbuttons+0x78>
 8002cda:	2102      	movs	r1, #2
 8002cdc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002ce0:	f7fe fb68 	bl	80013b4 <LedWrite>
 8002ce4:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <ReadPushbuttons+0xa8>)
 8002ce6:	edd3 7a00 	vldr	s15, [r3]
 8002cea:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002cee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002cf2:	4b0d      	ldr	r3, [pc, #52]	; (8002d28 <ReadPushbuttons+0xa8>)
 8002cf4:	edc3 7a00 	vstr	s15, [r3]
if(ButtonRightRead() == 1) {LedWrite(LED3,TOG); angleHorizontal -=5;}
 8002cf8:	f7fe fa74 	bl	80011e4 <ButtonRightRead>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d10e      	bne.n	8002d20 <ReadPushbuttons+0xa0>
 8002d02:	2102      	movs	r1, #2
 8002d04:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002d08:	f7fe fb54 	bl	80013b4 <LedWrite>
 8002d0c:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <ReadPushbuttons+0xa8>)
 8002d0e:	edd3 7a00 	vldr	s15, [r3]
 8002d12:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002d16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d1a:	4b03      	ldr	r3, [pc, #12]	; (8002d28 <ReadPushbuttons+0xa8>)
 8002d1c:	edc3 7a00 	vstr	s15, [r3]
}
 8002d20:	bf00      	nop
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	200000cc 	.word	0x200000cc
 8002d28:	200000d0 	.word	0x200000d0

08002d2c <AlgorithmSunCalculatePosition>:
	if(angleHorizontal > 180) angleHorizontal = 180;
	else if(angleHorizontal < 0) angleHorizontal = 0;
}

void AlgorithmSunCalculatePosition()
{
 8002d2c:	b590      	push	{r4, r7, lr}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af02      	add	r7, sp, #8
	// Calculate Sun position
	SunCalculatePosition(timezone,dayYear(day,month),hr,mn,sc,LONGITUDE,LATITUDE);
 8002d32:	4b19      	ldr	r3, [pc, #100]	; (8002d98 <AlgorithmSunCalculatePosition+0x6c>)
 8002d34:	781c      	ldrb	r4, [r3, #0]
 8002d36:	4b19      	ldr	r3, [pc, #100]	; (8002d9c <AlgorithmSunCalculatePosition+0x70>)
 8002d38:	781a      	ldrb	r2, [r3, #0]
 8002d3a:	4b19      	ldr	r3, [pc, #100]	; (8002da0 <AlgorithmSunCalculatePosition+0x74>)
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4610      	mov	r0, r2
 8002d42:	f7fe fe3d 	bl	80019c0 <dayYear>
 8002d46:	4603      	mov	r3, r0
 8002d48:	4618      	mov	r0, r3
 8002d4a:	4b16      	ldr	r3, [pc, #88]	; (8002da4 <AlgorithmSunCalculatePosition+0x78>)
 8002d4c:	781a      	ldrb	r2, [r3, #0]
 8002d4e:	4b16      	ldr	r3, [pc, #88]	; (8002da8 <AlgorithmSunCalculatePosition+0x7c>)
 8002d50:	7819      	ldrb	r1, [r3, #0]
 8002d52:	4b16      	ldr	r3, [pc, #88]	; (8002dac <AlgorithmSunCalculatePosition+0x80>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	eddf 0a15 	vldr	s1, [pc, #84]	; 8002db0 <AlgorithmSunCalculatePosition+0x84>
 8002d5c:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8002db4 <AlgorithmSunCalculatePosition+0x88>
 8002d60:	460b      	mov	r3, r1
 8002d62:	4601      	mov	r1, r0
 8002d64:	4620      	mov	r0, r4
 8002d66:	f7fe ffd3 	bl	8001d10 <SunCalculatePosition>

	// Assign value
	angleHorizontal = SunGetCurrentAzimuth() - 90.0;	// -90 -> function return angle from N, device has max range from E to W
 8002d6a:	f7ff fb61 	bl	8002430 <SunGetCurrentAzimuth>
 8002d6e:	eeb0 7a40 	vmov.f32	s14, s0
 8002d72:	eddf 7a11 	vldr	s15, [pc, #68]	; 8002db8 <AlgorithmSunCalculatePosition+0x8c>
 8002d76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d7a:	4b10      	ldr	r3, [pc, #64]	; (8002dbc <AlgorithmSunCalculatePosition+0x90>)
 8002d7c:	edc3 7a00 	vstr	s15, [r3]
	angleVertical = SunGetCurrentZenith();
 8002d80:	f7ff fb64 	bl	800244c <SunGetCurrentZenith>
 8002d84:	eef0 7a40 	vmov.f32	s15, s0
 8002d88:	4b0d      	ldr	r3, [pc, #52]	; (8002dc0 <AlgorithmSunCalculatePosition+0x94>)
 8002d8a:	edc3 7a00 	vstr	s15, [r3]

}
 8002d8e:	bf00      	nop
 8002d90:	3704      	adds	r7, #4
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd90      	pop	{r4, r7, pc}
 8002d96:	bf00      	nop
 8002d98:	20000008 	.word	0x20000008
 8002d9c:	200000d7 	.word	0x200000d7
 8002da0:	200000d8 	.word	0x200000d8
 8002da4:	200000d4 	.word	0x200000d4
 8002da8:	200000d5 	.word	0x200000d5
 8002dac:	200000d6 	.word	0x200000d6
 8002db0:	42481b8e 	.word	0x42481b8e
 8002db4:	41afe1ea 	.word	0x41afe1ea
 8002db8:	42b40000 	.word	0x42b40000
 8002dbc:	200000d0 	.word	0x200000d0
 8002dc0:	200000cc 	.word	0x200000cc

08002dc4 <charToNum>:

unsigned char charToNum(unsigned char sign)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	71fb      	strb	r3, [r7, #7]
	return (sign - 48);
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	3b30      	subs	r3, #48	; 0x30
 8002dd2:	b2db      	uxtb	r3, r3
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002de0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e18 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002de4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002de6:	e003      	b.n	8002df0 <LoopCopyDataInit>

08002de8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002de8:	4b0c      	ldr	r3, [pc, #48]	; (8002e1c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002dea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002dec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002dee:	3104      	adds	r1, #4

08002df0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002df0:	480b      	ldr	r0, [pc, #44]	; (8002e20 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002df2:	4b0c      	ldr	r3, [pc, #48]	; (8002e24 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002df4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002df6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002df8:	d3f6      	bcc.n	8002de8 <CopyDataInit>
	ldr	r2, =_sbss
 8002dfa:	4a0b      	ldr	r2, [pc, #44]	; (8002e28 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002dfc:	e002      	b.n	8002e04 <LoopFillZerobss>

08002dfe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002dfe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002e00:	f842 3b04 	str.w	r3, [r2], #4

08002e04 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002e04:	4b09      	ldr	r3, [pc, #36]	; (8002e2c <LoopForever+0x16>)
	cmp	r2, r3
 8002e06:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002e08:	d3f9      	bcc.n	8002dfe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e0a:	f000 f813 	bl	8002e34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e0e:	f000 f847 	bl	8002ea0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e12:	f7ff fc8f 	bl	8002734 <main>

08002e16 <LoopForever>:

LoopForever:
    b LoopForever
 8002e16:	e7fe      	b.n	8002e16 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002e18:	20040000 	.word	0x20040000
	ldr	r3, =_sidata
 8002e1c:	08004418 	.word	0x08004418
	ldr	r0, =_sdata
 8002e20:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002e24:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8002e28:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8002e2c:	2000018c 	.word	0x2000018c

08002e30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e30:	e7fe      	b.n	8002e30 <ADC1_2_IRQHandler>
	...

08002e34 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e38:	4a17      	ldr	r2, [pc, #92]	; (8002e98 <SystemInit+0x64>)
 8002e3a:	4b17      	ldr	r3, [pc, #92]	; (8002e98 <SystemInit+0x64>)
 8002e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002e48:	4a14      	ldr	r2, [pc, #80]	; (8002e9c <SystemInit+0x68>)
 8002e4a:	4b14      	ldr	r3, [pc, #80]	; (8002e9c <SystemInit+0x68>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f043 0301 	orr.w	r3, r3, #1
 8002e52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002e54:	4b11      	ldr	r3, [pc, #68]	; (8002e9c <SystemInit+0x68>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002e5a:	4a10      	ldr	r2, [pc, #64]	; (8002e9c <SystemInit+0x68>)
 8002e5c:	4b0f      	ldr	r3, [pc, #60]	; (8002e9c <SystemInit+0x68>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002e64:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002e68:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002e6a:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <SystemInit+0x68>)
 8002e6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e70:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e72:	4a0a      	ldr	r2, [pc, #40]	; (8002e9c <SystemInit+0x68>)
 8002e74:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <SystemInit+0x68>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e7c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002e7e:	4b07      	ldr	r3, [pc, #28]	; (8002e9c <SystemInit+0x68>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e84:	4b04      	ldr	r3, [pc, #16]	; (8002e98 <SystemInit+0x64>)
 8002e86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e8a:	609a      	str	r2, [r3, #8]
#endif
}
 8002e8c:	bf00      	nop
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	e000ed00 	.word	0xe000ed00
 8002e9c:	40021000 	.word	0x40021000

08002ea0 <__libc_init_array>:
 8002ea0:	b570      	push	{r4, r5, r6, lr}
 8002ea2:	4e0d      	ldr	r6, [pc, #52]	; (8002ed8 <__libc_init_array+0x38>)
 8002ea4:	4c0d      	ldr	r4, [pc, #52]	; (8002edc <__libc_init_array+0x3c>)
 8002ea6:	1ba4      	subs	r4, r4, r6
 8002ea8:	10a4      	asrs	r4, r4, #2
 8002eaa:	2500      	movs	r5, #0
 8002eac:	42a5      	cmp	r5, r4
 8002eae:	d109      	bne.n	8002ec4 <__libc_init_array+0x24>
 8002eb0:	4e0b      	ldr	r6, [pc, #44]	; (8002ee0 <__libc_init_array+0x40>)
 8002eb2:	4c0c      	ldr	r4, [pc, #48]	; (8002ee4 <__libc_init_array+0x44>)
 8002eb4:	f001 f8a8 	bl	8004008 <_init>
 8002eb8:	1ba4      	subs	r4, r4, r6
 8002eba:	10a4      	asrs	r4, r4, #2
 8002ebc:	2500      	movs	r5, #0
 8002ebe:	42a5      	cmp	r5, r4
 8002ec0:	d105      	bne.n	8002ece <__libc_init_array+0x2e>
 8002ec2:	bd70      	pop	{r4, r5, r6, pc}
 8002ec4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ec8:	4798      	blx	r3
 8002eca:	3501      	adds	r5, #1
 8002ecc:	e7ee      	b.n	8002eac <__libc_init_array+0xc>
 8002ece:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ed2:	4798      	blx	r3
 8002ed4:	3501      	adds	r5, #1
 8002ed6:	e7f2      	b.n	8002ebe <__libc_init_array+0x1e>
 8002ed8:	08004410 	.word	0x08004410
 8002edc:	08004410 	.word	0x08004410
 8002ee0:	08004410 	.word	0x08004410
 8002ee4:	08004414 	.word	0x08004414

08002ee8 <cosf>:
 8002ee8:	ee10 3a10 	vmov	r3, s0
 8002eec:	b507      	push	{r0, r1, r2, lr}
 8002eee:	4a1c      	ldr	r2, [pc, #112]	; (8002f60 <cosf+0x78>)
 8002ef0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	dc04      	bgt.n	8002f02 <cosf+0x1a>
 8002ef8:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8002f64 <cosf+0x7c>
 8002efc:	f000 fcba 	bl	8003874 <__kernel_cosf>
 8002f00:	e004      	b.n	8002f0c <cosf+0x24>
 8002f02:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8002f06:	db04      	blt.n	8002f12 <cosf+0x2a>
 8002f08:	ee30 0a40 	vsub.f32	s0, s0, s0
 8002f0c:	b003      	add	sp, #12
 8002f0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f12:	4668      	mov	r0, sp
 8002f14:	f000 fb3a 	bl	800358c <__ieee754_rem_pio2f>
 8002f18:	f000 0003 	and.w	r0, r0, #3
 8002f1c:	2801      	cmp	r0, #1
 8002f1e:	d007      	beq.n	8002f30 <cosf+0x48>
 8002f20:	2802      	cmp	r0, #2
 8002f22:	d00e      	beq.n	8002f42 <cosf+0x5a>
 8002f24:	b9a0      	cbnz	r0, 8002f50 <cosf+0x68>
 8002f26:	eddd 0a01 	vldr	s1, [sp, #4]
 8002f2a:	ed9d 0a00 	vldr	s0, [sp]
 8002f2e:	e7e5      	b.n	8002efc <cosf+0x14>
 8002f30:	eddd 0a01 	vldr	s1, [sp, #4]
 8002f34:	ed9d 0a00 	vldr	s0, [sp]
 8002f38:	f000 ff58 	bl	8003dec <__kernel_sinf>
 8002f3c:	eeb1 0a40 	vneg.f32	s0, s0
 8002f40:	e7e4      	b.n	8002f0c <cosf+0x24>
 8002f42:	eddd 0a01 	vldr	s1, [sp, #4]
 8002f46:	ed9d 0a00 	vldr	s0, [sp]
 8002f4a:	f000 fc93 	bl	8003874 <__kernel_cosf>
 8002f4e:	e7f5      	b.n	8002f3c <cosf+0x54>
 8002f50:	2001      	movs	r0, #1
 8002f52:	eddd 0a01 	vldr	s1, [sp, #4]
 8002f56:	ed9d 0a00 	vldr	s0, [sp]
 8002f5a:	f000 ff47 	bl	8003dec <__kernel_sinf>
 8002f5e:	e7d5      	b.n	8002f0c <cosf+0x24>
 8002f60:	3f490fd8 	.word	0x3f490fd8
 8002f64:	00000000 	.word	0x00000000

08002f68 <sinf>:
 8002f68:	ee10 3a10 	vmov	r3, s0
 8002f6c:	b507      	push	{r0, r1, r2, lr}
 8002f6e:	4a1d      	ldr	r2, [pc, #116]	; (8002fe4 <sinf+0x7c>)
 8002f70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f74:	4293      	cmp	r3, r2
 8002f76:	dc05      	bgt.n	8002f84 <sinf+0x1c>
 8002f78:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8002fe8 <sinf+0x80>
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	f000 ff35 	bl	8003dec <__kernel_sinf>
 8002f82:	e004      	b.n	8002f8e <sinf+0x26>
 8002f84:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8002f88:	db04      	blt.n	8002f94 <sinf+0x2c>
 8002f8a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8002f8e:	b003      	add	sp, #12
 8002f90:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f94:	4668      	mov	r0, sp
 8002f96:	f000 faf9 	bl	800358c <__ieee754_rem_pio2f>
 8002f9a:	f000 0003 	and.w	r0, r0, #3
 8002f9e:	2801      	cmp	r0, #1
 8002fa0:	d008      	beq.n	8002fb4 <sinf+0x4c>
 8002fa2:	2802      	cmp	r0, #2
 8002fa4:	d00d      	beq.n	8002fc2 <sinf+0x5a>
 8002fa6:	b9b0      	cbnz	r0, 8002fd6 <sinf+0x6e>
 8002fa8:	2001      	movs	r0, #1
 8002faa:	eddd 0a01 	vldr	s1, [sp, #4]
 8002fae:	ed9d 0a00 	vldr	s0, [sp]
 8002fb2:	e7e4      	b.n	8002f7e <sinf+0x16>
 8002fb4:	eddd 0a01 	vldr	s1, [sp, #4]
 8002fb8:	ed9d 0a00 	vldr	s0, [sp]
 8002fbc:	f000 fc5a 	bl	8003874 <__kernel_cosf>
 8002fc0:	e7e5      	b.n	8002f8e <sinf+0x26>
 8002fc2:	2001      	movs	r0, #1
 8002fc4:	eddd 0a01 	vldr	s1, [sp, #4]
 8002fc8:	ed9d 0a00 	vldr	s0, [sp]
 8002fcc:	f000 ff0e 	bl	8003dec <__kernel_sinf>
 8002fd0:	eeb1 0a40 	vneg.f32	s0, s0
 8002fd4:	e7db      	b.n	8002f8e <sinf+0x26>
 8002fd6:	eddd 0a01 	vldr	s1, [sp, #4]
 8002fda:	ed9d 0a00 	vldr	s0, [sp]
 8002fde:	f000 fc49 	bl	8003874 <__kernel_cosf>
 8002fe2:	e7f5      	b.n	8002fd0 <sinf+0x68>
 8002fe4:	3f490fd8 	.word	0x3f490fd8
 8002fe8:	00000000 	.word	0x00000000

08002fec <fmod>:
 8002fec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ff0:	ed2d 8b02 	vpush	{d8}
 8002ff4:	b08b      	sub	sp, #44	; 0x2c
 8002ff6:	ec55 4b10 	vmov	r4, r5, d0
 8002ffa:	ec57 6b11 	vmov	r6, r7, d1
 8002ffe:	f000 f8b1 	bl	8003164 <__ieee754_fmod>
 8003002:	4b2a      	ldr	r3, [pc, #168]	; (80030ac <fmod+0xc0>)
 8003004:	eeb0 8a40 	vmov.f32	s16, s0
 8003008:	eef0 8a60 	vmov.f32	s17, s1
 800300c:	f993 8000 	ldrsb.w	r8, [r3]
 8003010:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003014:	d030      	beq.n	8003078 <fmod+0x8c>
 8003016:	4632      	mov	r2, r6
 8003018:	463b      	mov	r3, r7
 800301a:	4630      	mov	r0, r6
 800301c:	4639      	mov	r1, r7
 800301e:	f7fd fd39 	bl	8000a94 <__aeabi_dcmpun>
 8003022:	bb48      	cbnz	r0, 8003078 <fmod+0x8c>
 8003024:	4622      	mov	r2, r4
 8003026:	462b      	mov	r3, r5
 8003028:	4620      	mov	r0, r4
 800302a:	4629      	mov	r1, r5
 800302c:	f7fd fd32 	bl	8000a94 <__aeabi_dcmpun>
 8003030:	4681      	mov	r9, r0
 8003032:	bb08      	cbnz	r0, 8003078 <fmod+0x8c>
 8003034:	2200      	movs	r2, #0
 8003036:	2300      	movs	r3, #0
 8003038:	4630      	mov	r0, r6
 800303a:	4639      	mov	r1, r7
 800303c:	f7fd fcf8 	bl	8000a30 <__aeabi_dcmpeq>
 8003040:	b1d0      	cbz	r0, 8003078 <fmod+0x8c>
 8003042:	2301      	movs	r3, #1
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	4b1a      	ldr	r3, [pc, #104]	; (80030b0 <fmod+0xc4>)
 8003048:	9301      	str	r3, [sp, #4]
 800304a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800304e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003052:	f8cd 9020 	str.w	r9, [sp, #32]
 8003056:	f1b8 0f00 	cmp.w	r8, #0
 800305a:	d116      	bne.n	800308a <fmod+0x9e>
 800305c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003060:	4668      	mov	r0, sp
 8003062:	f000 ff0b 	bl	8003e7c <matherr>
 8003066:	b1d8      	cbz	r0, 80030a0 <fmod+0xb4>
 8003068:	9b08      	ldr	r3, [sp, #32]
 800306a:	b11b      	cbz	r3, 8003074 <fmod+0x88>
 800306c:	f000 ffc6 	bl	8003ffc <__errno>
 8003070:	9b08      	ldr	r3, [sp, #32]
 8003072:	6003      	str	r3, [r0, #0]
 8003074:	ed9d 8b06 	vldr	d8, [sp, #24]
 8003078:	eeb0 0a48 	vmov.f32	s0, s16
 800307c:	eef0 0a68 	vmov.f32	s1, s17
 8003080:	b00b      	add	sp, #44	; 0x2c
 8003082:	ecbd 8b02 	vpop	{d8}
 8003086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800308a:	2200      	movs	r2, #0
 800308c:	2300      	movs	r3, #0
 800308e:	4610      	mov	r0, r2
 8003090:	4619      	mov	r1, r3
 8003092:	f7fd fb8f 	bl	80007b4 <__aeabi_ddiv>
 8003096:	f1b8 0f02 	cmp.w	r8, #2
 800309a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800309e:	d1df      	bne.n	8003060 <fmod+0x74>
 80030a0:	f000 ffac 	bl	8003ffc <__errno>
 80030a4:	2321      	movs	r3, #33	; 0x21
 80030a6:	6003      	str	r3, [r0, #0]
 80030a8:	e7de      	b.n	8003068 <fmod+0x7c>
 80030aa:	bf00      	nop
 80030ac:	20000009 	.word	0x20000009
 80030b0:	08004020 	.word	0x08004020

080030b4 <acosf>:
 80030b4:	b510      	push	{r4, lr}
 80030b6:	ed2d 8b02 	vpush	{d8}
 80030ba:	4c27      	ldr	r4, [pc, #156]	; (8003158 <acosf+0xa4>)
 80030bc:	b08a      	sub	sp, #40	; 0x28
 80030be:	eeb0 8a40 	vmov.f32	s16, s0
 80030c2:	f000 f967 	bl	8003394 <__ieee754_acosf>
 80030c6:	f994 3000 	ldrsb.w	r3, [r4]
 80030ca:	3301      	adds	r3, #1
 80030cc:	eef0 8a40 	vmov.f32	s17, s0
 80030d0:	d03c      	beq.n	800314c <acosf+0x98>
 80030d2:	eeb4 8a48 	vcmp.f32	s16, s16
 80030d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030da:	d637      	bvs.n	800314c <acosf+0x98>
 80030dc:	eeb0 0a48 	vmov.f32	s0, s16
 80030e0:	f000 fed6 	bl	8003e90 <fabsf>
 80030e4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80030e8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80030ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f0:	dd2c      	ble.n	800314c <acosf+0x98>
 80030f2:	2301      	movs	r3, #1
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	4b19      	ldr	r3, [pc, #100]	; (800315c <acosf+0xa8>)
 80030f8:	9301      	str	r3, [sp, #4]
 80030fa:	ee18 0a10 	vmov	r0, s16
 80030fe:	2300      	movs	r3, #0
 8003100:	9308      	str	r3, [sp, #32]
 8003102:	f7fd f9d9 	bl	80004b8 <__aeabi_f2d>
 8003106:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800310a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800310e:	4814      	ldr	r0, [pc, #80]	; (8003160 <acosf+0xac>)
 8003110:	f000 feb6 	bl	8003e80 <nan>
 8003114:	f994 3000 	ldrsb.w	r3, [r4]
 8003118:	2b02      	cmp	r3, #2
 800311a:	ed8d 0b06 	vstr	d0, [sp, #24]
 800311e:	d104      	bne.n	800312a <acosf+0x76>
 8003120:	f000 ff6c 	bl	8003ffc <__errno>
 8003124:	2321      	movs	r3, #33	; 0x21
 8003126:	6003      	str	r3, [r0, #0]
 8003128:	e004      	b.n	8003134 <acosf+0x80>
 800312a:	4668      	mov	r0, sp
 800312c:	f000 fea6 	bl	8003e7c <matherr>
 8003130:	2800      	cmp	r0, #0
 8003132:	d0f5      	beq.n	8003120 <acosf+0x6c>
 8003134:	9b08      	ldr	r3, [sp, #32]
 8003136:	b11b      	cbz	r3, 8003140 <acosf+0x8c>
 8003138:	f000 ff60 	bl	8003ffc <__errno>
 800313c:	9b08      	ldr	r3, [sp, #32]
 800313e:	6003      	str	r3, [r0, #0]
 8003140:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003144:	f7fd fcdc 	bl	8000b00 <__aeabi_d2f>
 8003148:	ee08 0a90 	vmov	s17, r0
 800314c:	eeb0 0a68 	vmov.f32	s0, s17
 8003150:	b00a      	add	sp, #40	; 0x28
 8003152:	ecbd 8b02 	vpop	{d8}
 8003156:	bd10      	pop	{r4, pc}
 8003158:	20000009 	.word	0x20000009
 800315c:	08004025 	.word	0x08004025
 8003160:	08004024 	.word	0x08004024

08003164 <__ieee754_fmod>:
 8003164:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003168:	ec53 2b11 	vmov	r2, r3, d1
 800316c:	ec57 6b10 	vmov	r6, r7, d0
 8003170:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8003174:	ea52 050e 	orrs.w	r5, r2, lr
 8003178:	ee10 9a10 	vmov	r9, s0
 800317c:	4639      	mov	r1, r7
 800317e:	ee10 4a10 	vmov	r4, s0
 8003182:	ee11 ca10 	vmov	ip, s2
 8003186:	4618      	mov	r0, r3
 8003188:	ee11 8a10 	vmov	r8, s2
 800318c:	d00c      	beq.n	80031a8 <__ieee754_fmod+0x44>
 800318e:	4d7a      	ldr	r5, [pc, #488]	; (8003378 <__ieee754_fmod+0x214>)
 8003190:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
 8003194:	45aa      	cmp	sl, r5
 8003196:	dc07      	bgt.n	80031a8 <__ieee754_fmod+0x44>
 8003198:	4255      	negs	r5, r2
 800319a:	4315      	orrs	r5, r2
 800319c:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 8003390 <__ieee754_fmod+0x22c>
 80031a0:	ea4e 75d5 	orr.w	r5, lr, r5, lsr #31
 80031a4:	455d      	cmp	r5, fp
 80031a6:	d90d      	bls.n	80031c4 <__ieee754_fmod+0x60>
 80031a8:	4630      	mov	r0, r6
 80031aa:	4639      	mov	r1, r7
 80031ac:	f7fd f9d8 	bl	8000560 <__aeabi_dmul>
 80031b0:	4602      	mov	r2, r0
 80031b2:	460b      	mov	r3, r1
 80031b4:	f7fd fafe 	bl	80007b4 <__aeabi_ddiv>
 80031b8:	4606      	mov	r6, r0
 80031ba:	460f      	mov	r7, r1
 80031bc:	ec47 6b10 	vmov	d0, r6, r7
 80031c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031c4:	45f2      	cmp	sl, lr
 80031c6:	f007 4500 	and.w	r5, r7, #2147483648	; 0x80000000
 80031ca:	dc0a      	bgt.n	80031e2 <__ieee754_fmod+0x7e>
 80031cc:	dbf6      	blt.n	80031bc <__ieee754_fmod+0x58>
 80031ce:	4296      	cmp	r6, r2
 80031d0:	d3f4      	bcc.n	80031bc <__ieee754_fmod+0x58>
 80031d2:	d106      	bne.n	80031e2 <__ieee754_fmod+0x7e>
 80031d4:	4a69      	ldr	r2, [pc, #420]	; (800337c <__ieee754_fmod+0x218>)
 80031d6:	0fed      	lsrs	r5, r5, #31
 80031d8:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80031dc:	e9d5 6700 	ldrd	r6, r7, [r5]
 80031e0:	e7ec      	b.n	80031bc <__ieee754_fmod+0x58>
 80031e2:	4b67      	ldr	r3, [pc, #412]	; (8003380 <__ieee754_fmod+0x21c>)
 80031e4:	459a      	cmp	sl, r3
 80031e6:	dc48      	bgt.n	800327a <__ieee754_fmod+0x116>
 80031e8:	f1ba 0f00 	cmp.w	sl, #0
 80031ec:	d13c      	bne.n	8003268 <__ieee754_fmod+0x104>
 80031ee:	4e65      	ldr	r6, [pc, #404]	; (8003384 <__ieee754_fmod+0x220>)
 80031f0:	464a      	mov	r2, r9
 80031f2:	2a00      	cmp	r2, #0
 80031f4:	dc35      	bgt.n	8003262 <__ieee754_fmod+0xfe>
 80031f6:	459e      	cmp	lr, r3
 80031f8:	dc50      	bgt.n	800329c <__ieee754_fmod+0x138>
 80031fa:	f1be 0f00 	cmp.w	lr, #0
 80031fe:	d144      	bne.n	800328a <__ieee754_fmod+0x126>
 8003200:	4a60      	ldr	r2, [pc, #384]	; (8003384 <__ieee754_fmod+0x220>)
 8003202:	4663      	mov	r3, ip
 8003204:	2b00      	cmp	r3, #0
 8003206:	dc3d      	bgt.n	8003284 <__ieee754_fmod+0x120>
 8003208:	4b5f      	ldr	r3, [pc, #380]	; (8003388 <__ieee754_fmod+0x224>)
 800320a:	429e      	cmp	r6, r3
 800320c:	db4b      	blt.n	80032a6 <__ieee754_fmod+0x142>
 800320e:	f3c1 0313 	ubfx	r3, r1, #0, #20
 8003212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003216:	495c      	ldr	r1, [pc, #368]	; (8003388 <__ieee754_fmod+0x224>)
 8003218:	428a      	cmp	r2, r1
 800321a:	db58      	blt.n	80032ce <__ieee754_fmod+0x16a>
 800321c:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8003220:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 8003224:	1ab6      	subs	r6, r6, r2
 8003226:	1a19      	subs	r1, r3, r0
 8003228:	2e00      	cmp	r6, #0
 800322a:	d167      	bne.n	80032fc <__ieee754_fmod+0x198>
 800322c:	4544      	cmp	r4, r8
 800322e:	bf38      	it	cc
 8003230:	f101 31ff 	addcc.w	r1, r1, #4294967295
 8003234:	2900      	cmp	r1, #0
 8003236:	bfa4      	itt	ge
 8003238:	eba4 0408 	subge.w	r4, r4, r8
 800323c:	460b      	movge	r3, r1
 800323e:	ea53 0104 	orrs.w	r1, r3, r4
 8003242:	d0c7      	beq.n	80031d4 <__ieee754_fmod+0x70>
 8003244:	494e      	ldr	r1, [pc, #312]	; (8003380 <__ieee754_fmod+0x21c>)
 8003246:	428b      	cmp	r3, r1
 8003248:	dd6e      	ble.n	8003328 <__ieee754_fmod+0x1c4>
 800324a:	494f      	ldr	r1, [pc, #316]	; (8003388 <__ieee754_fmod+0x224>)
 800324c:	428a      	cmp	r2, r1
 800324e:	db71      	blt.n	8003334 <__ieee754_fmod+0x1d0>
 8003250:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8003254:	431d      	orrs	r5, r3
 8003256:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800325a:	ea45 5702 	orr.w	r7, r5, r2, lsl #20
 800325e:	4626      	mov	r6, r4
 8003260:	e7ac      	b.n	80031bc <__ieee754_fmod+0x58>
 8003262:	3e01      	subs	r6, #1
 8003264:	0052      	lsls	r2, r2, #1
 8003266:	e7c4      	b.n	80031f2 <__ieee754_fmod+0x8e>
 8003268:	4e47      	ldr	r6, [pc, #284]	; (8003388 <__ieee754_fmod+0x224>)
 800326a:	ea4f 22ca 	mov.w	r2, sl, lsl #11
 800326e:	0052      	lsls	r2, r2, #1
 8003270:	2a00      	cmp	r2, #0
 8003272:	f106 36ff 	add.w	r6, r6, #4294967295
 8003276:	dcfa      	bgt.n	800326e <__ieee754_fmod+0x10a>
 8003278:	e7bd      	b.n	80031f6 <__ieee754_fmod+0x92>
 800327a:	ea4f 562a 	mov.w	r6, sl, asr #20
 800327e:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8003282:	e7b8      	b.n	80031f6 <__ieee754_fmod+0x92>
 8003284:	3a01      	subs	r2, #1
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	e7bc      	b.n	8003204 <__ieee754_fmod+0xa0>
 800328a:	4a3f      	ldr	r2, [pc, #252]	; (8003388 <__ieee754_fmod+0x224>)
 800328c:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	f102 32ff 	add.w	r2, r2, #4294967295
 8003298:	dcfa      	bgt.n	8003290 <__ieee754_fmod+0x12c>
 800329a:	e7b5      	b.n	8003208 <__ieee754_fmod+0xa4>
 800329c:	ea4f 522e 	mov.w	r2, lr, asr #20
 80032a0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80032a4:	e7b0      	b.n	8003208 <__ieee754_fmod+0xa4>
 80032a6:	1b9c      	subs	r4, r3, r6
 80032a8:	2c1f      	cmp	r4, #31
 80032aa:	dc0a      	bgt.n	80032c2 <__ieee754_fmod+0x15e>
 80032ac:	f1c4 0320 	rsb	r3, r4, #32
 80032b0:	fa0a fa04 	lsl.w	sl, sl, r4
 80032b4:	fa29 f303 	lsr.w	r3, r9, r3
 80032b8:	ea43 030a 	orr.w	r3, r3, sl
 80032bc:	fa09 f404 	lsl.w	r4, r9, r4
 80032c0:	e7a9      	b.n	8003216 <__ieee754_fmod+0xb2>
 80032c2:	4b32      	ldr	r3, [pc, #200]	; (800338c <__ieee754_fmod+0x228>)
 80032c4:	1b9b      	subs	r3, r3, r6
 80032c6:	fa09 f303 	lsl.w	r3, r9, r3
 80032ca:	2400      	movs	r4, #0
 80032cc:	e7a3      	b.n	8003216 <__ieee754_fmod+0xb2>
 80032ce:	eba1 0802 	sub.w	r8, r1, r2
 80032d2:	f1b8 0f1f 	cmp.w	r8, #31
 80032d6:	dc0a      	bgt.n	80032ee <__ieee754_fmod+0x18a>
 80032d8:	f1c8 0020 	rsb	r0, r8, #32
 80032dc:	fa0e fe08 	lsl.w	lr, lr, r8
 80032e0:	fa2c f000 	lsr.w	r0, ip, r0
 80032e4:	ea40 000e 	orr.w	r0, r0, lr
 80032e8:	fa0c f808 	lsl.w	r8, ip, r8
 80032ec:	e79a      	b.n	8003224 <__ieee754_fmod+0xc0>
 80032ee:	4827      	ldr	r0, [pc, #156]	; (800338c <__ieee754_fmod+0x228>)
 80032f0:	1a80      	subs	r0, r0, r2
 80032f2:	fa0c f000 	lsl.w	r0, ip, r0
 80032f6:	f04f 0800 	mov.w	r8, #0
 80032fa:	e793      	b.n	8003224 <__ieee754_fmod+0xc0>
 80032fc:	4544      	cmp	r4, r8
 80032fe:	bf38      	it	cc
 8003300:	f101 31ff 	addcc.w	r1, r1, #4294967295
 8003304:	2900      	cmp	r1, #0
 8003306:	da05      	bge.n	8003314 <__ieee754_fmod+0x1b0>
 8003308:	0fe1      	lsrs	r1, r4, #31
 800330a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800330e:	0064      	lsls	r4, r4, #1
 8003310:	3e01      	subs	r6, #1
 8003312:	e788      	b.n	8003226 <__ieee754_fmod+0xc2>
 8003314:	eba4 0408 	sub.w	r4, r4, r8
 8003318:	ea51 0304 	orrs.w	r3, r1, r4
 800331c:	f43f af5a 	beq.w	80031d4 <__ieee754_fmod+0x70>
 8003320:	0fe3      	lsrs	r3, r4, #31
 8003322:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8003326:	e7f2      	b.n	800330e <__ieee754_fmod+0x1aa>
 8003328:	0fe0      	lsrs	r0, r4, #31
 800332a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800332e:	0064      	lsls	r4, r4, #1
 8003330:	3a01      	subs	r2, #1
 8003332:	e788      	b.n	8003246 <__ieee754_fmod+0xe2>
 8003334:	1a89      	subs	r1, r1, r2
 8003336:	2914      	cmp	r1, #20
 8003338:	dc0a      	bgt.n	8003350 <__ieee754_fmod+0x1ec>
 800333a:	f1c1 0220 	rsb	r2, r1, #32
 800333e:	fa03 f202 	lsl.w	r2, r3, r2
 8003342:	40cc      	lsrs	r4, r1
 8003344:	4322      	orrs	r2, r4
 8003346:	410b      	asrs	r3, r1
 8003348:	ea43 0705 	orr.w	r7, r3, r5
 800334c:	4616      	mov	r6, r2
 800334e:	e735      	b.n	80031bc <__ieee754_fmod+0x58>
 8003350:	291f      	cmp	r1, #31
 8003352:	dc07      	bgt.n	8003364 <__ieee754_fmod+0x200>
 8003354:	fa24 f201 	lsr.w	r2, r4, r1
 8003358:	f1c1 0120 	rsb	r1, r1, #32
 800335c:	408b      	lsls	r3, r1
 800335e:	431a      	orrs	r2, r3
 8003360:	462b      	mov	r3, r5
 8003362:	e7f1      	b.n	8003348 <__ieee754_fmod+0x1e4>
 8003364:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8003368:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800336c:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8003370:	32e2      	adds	r2, #226	; 0xe2
 8003372:	fa43 f202 	asr.w	r2, r3, r2
 8003376:	e7f3      	b.n	8003360 <__ieee754_fmod+0x1fc>
 8003378:	7fefffff 	.word	0x7fefffff
 800337c:	08004030 	.word	0x08004030
 8003380:	000fffff 	.word	0x000fffff
 8003384:	fffffbed 	.word	0xfffffbed
 8003388:	fffffc02 	.word	0xfffffc02
 800338c:	fffffbe2 	.word	0xfffffbe2
 8003390:	7ff00000 	.word	0x7ff00000

08003394 <__ieee754_acosf>:
 8003394:	b508      	push	{r3, lr}
 8003396:	ee10 3a10 	vmov	r3, s0
 800339a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800339e:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80033a2:	ed2d 8b0c 	vpush	{d8-d13}
 80033a6:	d10a      	bne.n	80033be <__ieee754_acosf+0x2a>
 80033a8:	ed9f 8a67 	vldr	s16, [pc, #412]	; 8003548 <__ieee754_acosf+0x1b4>
 80033ac:	ed9f 0a67 	vldr	s0, [pc, #412]	; 800354c <__ieee754_acosf+0x1b8>
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	bfd8      	it	le
 80033b4:	eeb0 0a48 	vmovle.f32	s0, s16
 80033b8:	ecbd 8b0c 	vpop	{d8-d13}
 80033bc:	bd08      	pop	{r3, pc}
 80033be:	dd04      	ble.n	80033ca <__ieee754_acosf+0x36>
 80033c0:	ee30 8a40 	vsub.f32	s16, s0, s0
 80033c4:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80033c8:	e7f6      	b.n	80033b8 <__ieee754_acosf+0x24>
 80033ca:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 80033ce:	da3e      	bge.n	800344e <__ieee754_acosf+0xba>
 80033d0:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 80033d4:	f340 80b5 	ble.w	8003542 <__ieee754_acosf+0x1ae>
 80033d8:	ee60 7a00 	vmul.f32	s15, s0, s0
 80033dc:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8003550 <__ieee754_acosf+0x1bc>
 80033e0:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8003554 <__ieee754_acosf+0x1c0>
 80033e4:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 8003558 <__ieee754_acosf+0x1c4>
 80033e8:	ed9f 8a5c 	vldr	s16, [pc, #368]	; 800355c <__ieee754_acosf+0x1c8>
 80033ec:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80033f0:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8003560 <__ieee754_acosf+0x1cc>
 80033f4:	eee7 6a87 	vfma.f32	s13, s15, s14
 80033f8:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8003564 <__ieee754_acosf+0x1d0>
 80033fc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8003400:	eddf 6a59 	vldr	s13, [pc, #356]	; 8003568 <__ieee754_acosf+0x1d4>
 8003404:	eee7 6a87 	vfma.f32	s13, s15, s14
 8003408:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800356c <__ieee754_acosf+0x1d8>
 800340c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8003410:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003570 <__ieee754_acosf+0x1dc>
 8003414:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8003418:	eddf 6a56 	vldr	s13, [pc, #344]	; 8003574 <__ieee754_acosf+0x1e0>
 800341c:	eee7 6a86 	vfma.f32	s13, s15, s12
 8003420:	ed9f 6a55 	vldr	s12, [pc, #340]	; 8003578 <__ieee754_acosf+0x1e4>
 8003424:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8003428:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800342c:	eee7 6a86 	vfma.f32	s13, s15, s12
 8003430:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003434:	eef0 7a66 	vmov.f32	s15, s13
 8003438:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800343c:	eea0 8a66 	vfms.f32	s16, s0, s13
 8003440:	ee30 8a48 	vsub.f32	s16, s0, s16
 8003444:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800357c <__ieee754_acosf+0x1e8>
 8003448:	ee30 0a48 	vsub.f32	s0, s0, s16
 800344c:	e7b4      	b.n	80033b8 <__ieee754_acosf+0x24>
 800344e:	2b00      	cmp	r3, #0
 8003450:	eddf da3f 	vldr	s27, [pc, #252]	; 8003550 <__ieee754_acosf+0x1bc>
 8003454:	eddf ca3f 	vldr	s25, [pc, #252]	; 8003554 <__ieee754_acosf+0x1c0>
 8003458:	ed9f ca41 	vldr	s24, [pc, #260]	; 8003560 <__ieee754_acosf+0x1cc>
 800345c:	eddf ba41 	vldr	s23, [pc, #260]	; 8003564 <__ieee754_acosf+0x1d0>
 8003460:	ed9f ba41 	vldr	s22, [pc, #260]	; 8003568 <__ieee754_acosf+0x1d4>
 8003464:	eddf 8a41 	vldr	s17, [pc, #260]	; 800356c <__ieee754_acosf+0x1d8>
 8003468:	ed9f da41 	vldr	s26, [pc, #260]	; 8003570 <__ieee754_acosf+0x1dc>
 800346c:	eddf aa3a 	vldr	s21, [pc, #232]	; 8003558 <__ieee754_acosf+0x1c4>
 8003470:	ed9f aa40 	vldr	s20, [pc, #256]	; 8003574 <__ieee754_acosf+0x1e0>
 8003474:	eddf 9a40 	vldr	s19, [pc, #256]	; 8003578 <__ieee754_acosf+0x1e4>
 8003478:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800347c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003480:	da28      	bge.n	80034d4 <__ieee754_acosf+0x140>
 8003482:	ee30 0a09 	vadd.f32	s0, s0, s18
 8003486:	ee20 0a27 	vmul.f32	s0, s0, s15
 800348a:	eee0 ca2d 	vfma.f32	s25, s0, s27
 800348e:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8003492:	eea0 ca2c 	vfma.f32	s24, s0, s25
 8003496:	eea0 aa2a 	vfma.f32	s20, s0, s21
 800349a:	eee0 ba0c 	vfma.f32	s23, s0, s24
 800349e:	eee0 9a0a 	vfma.f32	s19, s0, s20
 80034a2:	eea0 ba2b 	vfma.f32	s22, s0, s23
 80034a6:	eea0 9a29 	vfma.f32	s18, s0, s19
 80034aa:	eee0 8a0b 	vfma.f32	s17, s0, s22
 80034ae:	ee68 8a80 	vmul.f32	s17, s17, s0
 80034b2:	f000 f997 	bl	80037e4 <__ieee754_sqrtf>
 80034b6:	ee88 7a89 	vdiv.f32	s14, s17, s18
 80034ba:	eddf 7a31 	vldr	s15, [pc, #196]	; 8003580 <__ieee754_acosf+0x1ec>
 80034be:	eee0 7a07 	vfma.f32	s15, s0, s14
 80034c2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80034c6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80034ca:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8003584 <__ieee754_acosf+0x1f0>
 80034ce:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80034d2:	e771      	b.n	80033b8 <__ieee754_acosf+0x24>
 80034d4:	ee39 8a40 	vsub.f32	s16, s18, s0
 80034d8:	ee28 8a27 	vmul.f32	s16, s16, s15
 80034dc:	eeb0 0a48 	vmov.f32	s0, s16
 80034e0:	f000 f980 	bl	80037e4 <__ieee754_sqrtf>
 80034e4:	eee8 ca2d 	vfma.f32	s25, s16, s27
 80034e8:	eee8 aa0d 	vfma.f32	s21, s16, s26
 80034ec:	eea8 ca2c 	vfma.f32	s24, s16, s25
 80034f0:	eea8 aa2a 	vfma.f32	s20, s16, s21
 80034f4:	eee8 ba0c 	vfma.f32	s23, s16, s24
 80034f8:	ee10 3a10 	vmov	r3, s0
 80034fc:	eea8 ba2b 	vfma.f32	s22, s16, s23
 8003500:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003504:	f023 030f 	bic.w	r3, r3, #15
 8003508:	eee8 9a0a 	vfma.f32	s19, s16, s20
 800350c:	ee07 3a90 	vmov	s15, r3
 8003510:	eee8 8a0b 	vfma.f32	s17, s16, s22
 8003514:	eeb0 6a48 	vmov.f32	s12, s16
 8003518:	eea7 6ae7 	vfms.f32	s12, s15, s15
 800351c:	eea8 9a29 	vfma.f32	s18, s16, s19
 8003520:	ee77 6a80 	vadd.f32	s13, s15, s0
 8003524:	ee68 8a88 	vmul.f32	s17, s17, s16
 8003528:	eeb0 7a40 	vmov.f32	s14, s0
 800352c:	ee86 0a26 	vdiv.f32	s0, s12, s13
 8003530:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8003534:	eea7 0a26 	vfma.f32	s0, s14, s13
 8003538:	ee30 0a27 	vadd.f32	s0, s0, s15
 800353c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003540:	e73a      	b.n	80033b8 <__ieee754_acosf+0x24>
 8003542:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8003588 <__ieee754_acosf+0x1f4>
 8003546:	e737      	b.n	80033b8 <__ieee754_acosf+0x24>
 8003548:	40490fdb 	.word	0x40490fdb
 800354c:	00000000 	.word	0x00000000
 8003550:	3811ef08 	.word	0x3811ef08
 8003554:	3a4f7f04 	.word	0x3a4f7f04
 8003558:	bf303361 	.word	0xbf303361
 800355c:	33a22168 	.word	0x33a22168
 8003560:	bd241146 	.word	0xbd241146
 8003564:	3e4e0aa8 	.word	0x3e4e0aa8
 8003568:	bea6b090 	.word	0xbea6b090
 800356c:	3e2aaaab 	.word	0x3e2aaaab
 8003570:	3d9dc62e 	.word	0x3d9dc62e
 8003574:	4001572d 	.word	0x4001572d
 8003578:	c019d139 	.word	0xc019d139
 800357c:	3fc90fda 	.word	0x3fc90fda
 8003580:	b3a22168 	.word	0xb3a22168
 8003584:	40490fda 	.word	0x40490fda
 8003588:	3fc90fdb 	.word	0x3fc90fdb

0800358c <__ieee754_rem_pio2f>:
 800358c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800358e:	ee10 6a10 	vmov	r6, s0
 8003592:	4b86      	ldr	r3, [pc, #536]	; (80037ac <__ieee754_rem_pio2f+0x220>)
 8003594:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8003598:	429c      	cmp	r4, r3
 800359a:	b087      	sub	sp, #28
 800359c:	4605      	mov	r5, r0
 800359e:	dc05      	bgt.n	80035ac <__ieee754_rem_pio2f+0x20>
 80035a0:	2300      	movs	r3, #0
 80035a2:	ed85 0a00 	vstr	s0, [r5]
 80035a6:	6043      	str	r3, [r0, #4]
 80035a8:	2000      	movs	r0, #0
 80035aa:	e020      	b.n	80035ee <__ieee754_rem_pio2f+0x62>
 80035ac:	4b80      	ldr	r3, [pc, #512]	; (80037b0 <__ieee754_rem_pio2f+0x224>)
 80035ae:	429c      	cmp	r4, r3
 80035b0:	dc38      	bgt.n	8003624 <__ieee754_rem_pio2f+0x98>
 80035b2:	2e00      	cmp	r6, #0
 80035b4:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80037b4 <__ieee754_rem_pio2f+0x228>
 80035b8:	4b7f      	ldr	r3, [pc, #508]	; (80037b8 <__ieee754_rem_pio2f+0x22c>)
 80035ba:	f024 040f 	bic.w	r4, r4, #15
 80035be:	dd18      	ble.n	80035f2 <__ieee754_rem_pio2f+0x66>
 80035c0:	429c      	cmp	r4, r3
 80035c2:	ee70 7a47 	vsub.f32	s15, s0, s14
 80035c6:	bf09      	itett	eq
 80035c8:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80037bc <__ieee754_rem_pio2f+0x230>
 80035cc:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80037c0 <__ieee754_rem_pio2f+0x234>
 80035d0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80035d4:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80037c4 <__ieee754_rem_pio2f+0x238>
 80035d8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80035dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80035e0:	edc0 6a00 	vstr	s13, [r0]
 80035e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80035e8:	edc0 7a01 	vstr	s15, [r0, #4]
 80035ec:	2001      	movs	r0, #1
 80035ee:	b007      	add	sp, #28
 80035f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035f2:	429c      	cmp	r4, r3
 80035f4:	ee70 7a07 	vadd.f32	s15, s0, s14
 80035f8:	bf09      	itett	eq
 80035fa:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80037bc <__ieee754_rem_pio2f+0x230>
 80035fe:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80037c0 <__ieee754_rem_pio2f+0x234>
 8003602:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8003606:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80037c4 <__ieee754_rem_pio2f+0x238>
 800360a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800360e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003612:	edc0 6a00 	vstr	s13, [r0]
 8003616:	ee77 7a87 	vadd.f32	s15, s15, s14
 800361a:	edc0 7a01 	vstr	s15, [r0, #4]
 800361e:	f04f 30ff 	mov.w	r0, #4294967295
 8003622:	e7e4      	b.n	80035ee <__ieee754_rem_pio2f+0x62>
 8003624:	4b68      	ldr	r3, [pc, #416]	; (80037c8 <__ieee754_rem_pio2f+0x23c>)
 8003626:	429c      	cmp	r4, r3
 8003628:	dc71      	bgt.n	800370e <__ieee754_rem_pio2f+0x182>
 800362a:	f000 fc31 	bl	8003e90 <fabsf>
 800362e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80037cc <__ieee754_rem_pio2f+0x240>
 8003632:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003636:	eee0 7a07 	vfma.f32	s15, s0, s14
 800363a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800363e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003642:	ee17 0a90 	vmov	r0, s15
 8003646:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80037b4 <__ieee754_rem_pio2f+0x228>
 800364a:	eeb1 7a46 	vneg.f32	s14, s12
 800364e:	eea7 0a27 	vfma.f32	s0, s14, s15
 8003652:	281f      	cmp	r0, #31
 8003654:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80037c0 <__ieee754_rem_pio2f+0x234>
 8003658:	ee66 7a27 	vmul.f32	s15, s12, s15
 800365c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8003660:	ee16 3a90 	vmov	r3, s13
 8003664:	dc1c      	bgt.n	80036a0 <__ieee754_rem_pio2f+0x114>
 8003666:	1e47      	subs	r7, r0, #1
 8003668:	4959      	ldr	r1, [pc, #356]	; (80037d0 <__ieee754_rem_pio2f+0x244>)
 800366a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800366e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8003672:	428a      	cmp	r2, r1
 8003674:	d014      	beq.n	80036a0 <__ieee754_rem_pio2f+0x114>
 8003676:	602b      	str	r3, [r5, #0]
 8003678:	ed95 7a00 	vldr	s14, [r5]
 800367c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003680:	2e00      	cmp	r6, #0
 8003682:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003686:	ed85 0a01 	vstr	s0, [r5, #4]
 800368a:	dab0      	bge.n	80035ee <__ieee754_rem_pio2f+0x62>
 800368c:	eeb1 7a47 	vneg.f32	s14, s14
 8003690:	eeb1 0a40 	vneg.f32	s0, s0
 8003694:	ed85 7a00 	vstr	s14, [r5]
 8003698:	ed85 0a01 	vstr	s0, [r5, #4]
 800369c:	4240      	negs	r0, r0
 800369e:	e7a6      	b.n	80035ee <__ieee754_rem_pio2f+0x62>
 80036a0:	15e4      	asrs	r4, r4, #23
 80036a2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80036a6:	1aa2      	subs	r2, r4, r2
 80036a8:	2a08      	cmp	r2, #8
 80036aa:	dde4      	ble.n	8003676 <__ieee754_rem_pio2f+0xea>
 80036ac:	eddf 7a43 	vldr	s15, [pc, #268]	; 80037bc <__ieee754_rem_pio2f+0x230>
 80036b0:	eef0 6a40 	vmov.f32	s13, s0
 80036b4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80036b8:	ee30 0a66 	vsub.f32	s0, s0, s13
 80036bc:	eea7 0a27 	vfma.f32	s0, s14, s15
 80036c0:	eddf 7a40 	vldr	s15, [pc, #256]	; 80037c4 <__ieee754_rem_pio2f+0x238>
 80036c4:	ee96 0a27 	vfnms.f32	s0, s12, s15
 80036c8:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80036cc:	eef0 7a40 	vmov.f32	s15, s0
 80036d0:	ee15 3a90 	vmov	r3, s11
 80036d4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80036d8:	1aa4      	subs	r4, r4, r2
 80036da:	2c19      	cmp	r4, #25
 80036dc:	dc04      	bgt.n	80036e8 <__ieee754_rem_pio2f+0x15c>
 80036de:	edc5 5a00 	vstr	s11, [r5]
 80036e2:	eeb0 0a66 	vmov.f32	s0, s13
 80036e6:	e7c7      	b.n	8003678 <__ieee754_rem_pio2f+0xec>
 80036e8:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80037d4 <__ieee754_rem_pio2f+0x248>
 80036ec:	eeb0 0a66 	vmov.f32	s0, s13
 80036f0:	eea7 0a25 	vfma.f32	s0, s14, s11
 80036f4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80036f8:	eee7 7a25 	vfma.f32	s15, s14, s11
 80036fc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80037d8 <__ieee754_rem_pio2f+0x24c>
 8003700:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8003704:	ee30 7a67 	vsub.f32	s14, s0, s15
 8003708:	ed85 7a00 	vstr	s14, [r5]
 800370c:	e7b4      	b.n	8003678 <__ieee754_rem_pio2f+0xec>
 800370e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8003712:	db06      	blt.n	8003722 <__ieee754_rem_pio2f+0x196>
 8003714:	ee70 7a40 	vsub.f32	s15, s0, s0
 8003718:	edc0 7a01 	vstr	s15, [r0, #4]
 800371c:	edc0 7a00 	vstr	s15, [r0]
 8003720:	e742      	b.n	80035a8 <__ieee754_rem_pio2f+0x1c>
 8003722:	15e2      	asrs	r2, r4, #23
 8003724:	3a86      	subs	r2, #134	; 0x86
 8003726:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800372a:	ee07 3a90 	vmov	s15, r3
 800372e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003732:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80037dc <__ieee754_rem_pio2f+0x250>
 8003736:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800373a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800373e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8003742:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003746:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800374a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800374e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003752:	ed8d 7a04 	vstr	s14, [sp, #16]
 8003756:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800375a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800375e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003762:	edcd 7a05 	vstr	s15, [sp, #20]
 8003766:	d11e      	bne.n	80037a6 <__ieee754_rem_pio2f+0x21a>
 8003768:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800376c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003770:	bf14      	ite	ne
 8003772:	2302      	movne	r3, #2
 8003774:	2301      	moveq	r3, #1
 8003776:	491a      	ldr	r1, [pc, #104]	; (80037e0 <__ieee754_rem_pio2f+0x254>)
 8003778:	9101      	str	r1, [sp, #4]
 800377a:	2102      	movs	r1, #2
 800377c:	9100      	str	r1, [sp, #0]
 800377e:	a803      	add	r0, sp, #12
 8003780:	4629      	mov	r1, r5
 8003782:	f000 f8d5 	bl	8003930 <__kernel_rem_pio2f>
 8003786:	2e00      	cmp	r6, #0
 8003788:	f6bf af31 	bge.w	80035ee <__ieee754_rem_pio2f+0x62>
 800378c:	edd5 7a00 	vldr	s15, [r5]
 8003790:	eef1 7a67 	vneg.f32	s15, s15
 8003794:	edc5 7a00 	vstr	s15, [r5]
 8003798:	edd5 7a01 	vldr	s15, [r5, #4]
 800379c:	eef1 7a67 	vneg.f32	s15, s15
 80037a0:	edc5 7a01 	vstr	s15, [r5, #4]
 80037a4:	e77a      	b.n	800369c <__ieee754_rem_pio2f+0x110>
 80037a6:	2303      	movs	r3, #3
 80037a8:	e7e5      	b.n	8003776 <__ieee754_rem_pio2f+0x1ea>
 80037aa:	bf00      	nop
 80037ac:	3f490fd8 	.word	0x3f490fd8
 80037b0:	4016cbe3 	.word	0x4016cbe3
 80037b4:	3fc90f80 	.word	0x3fc90f80
 80037b8:	3fc90fd0 	.word	0x3fc90fd0
 80037bc:	37354400 	.word	0x37354400
 80037c0:	37354443 	.word	0x37354443
 80037c4:	2e85a308 	.word	0x2e85a308
 80037c8:	43490f80 	.word	0x43490f80
 80037cc:	3f22f984 	.word	0x3f22f984
 80037d0:	08004040 	.word	0x08004040
 80037d4:	2e85a300 	.word	0x2e85a300
 80037d8:	248d3132 	.word	0x248d3132
 80037dc:	43800000 	.word	0x43800000
 80037e0:	080040c0 	.word	0x080040c0

080037e4 <__ieee754_sqrtf>:
 80037e4:	ee10 2a10 	vmov	r2, s0
 80037e8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80037ec:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80037f0:	b570      	push	{r4, r5, r6, lr}
 80037f2:	d302      	bcc.n	80037fa <__ieee754_sqrtf+0x16>
 80037f4:	eea0 0a00 	vfma.f32	s0, s0, s0
 80037f8:	bd70      	pop	{r4, r5, r6, pc}
 80037fa:	b3b1      	cbz	r1, 800386a <__ieee754_sqrtf+0x86>
 80037fc:	2a00      	cmp	r2, #0
 80037fe:	da04      	bge.n	800380a <__ieee754_sqrtf+0x26>
 8003800:	ee70 7a40 	vsub.f32	s15, s0, s0
 8003804:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8003808:	bd70      	pop	{r4, r5, r6, pc}
 800380a:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800380e:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8003812:	d204      	bcs.n	800381e <__ieee754_sqrtf+0x3a>
 8003814:	2100      	movs	r1, #0
 8003816:	0210      	lsls	r0, r2, #8
 8003818:	d528      	bpl.n	800386c <__ieee754_sqrtf+0x88>
 800381a:	3901      	subs	r1, #1
 800381c:	1a5b      	subs	r3, r3, r1
 800381e:	3b7f      	subs	r3, #127	; 0x7f
 8003820:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8003824:	07d9      	lsls	r1, r3, #31
 8003826:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800382a:	bf48      	it	mi
 800382c:	0052      	lslmi	r2, r2, #1
 800382e:	1059      	asrs	r1, r3, #1
 8003830:	2300      	movs	r3, #0
 8003832:	0052      	lsls	r2, r2, #1
 8003834:	2419      	movs	r4, #25
 8003836:	461e      	mov	r6, r3
 8003838:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800383c:	1835      	adds	r5, r6, r0
 800383e:	4295      	cmp	r5, r2
 8003840:	bfde      	ittt	le
 8003842:	182e      	addle	r6, r5, r0
 8003844:	1b52      	suble	r2, r2, r5
 8003846:	181b      	addle	r3, r3, r0
 8003848:	3c01      	subs	r4, #1
 800384a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800384e:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8003852:	d1f3      	bne.n	800383c <__ieee754_sqrtf+0x58>
 8003854:	b112      	cbz	r2, 800385c <__ieee754_sqrtf+0x78>
 8003856:	3301      	adds	r3, #1
 8003858:	f023 0301 	bic.w	r3, r3, #1
 800385c:	105b      	asrs	r3, r3, #1
 800385e:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 8003862:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 8003866:	ee00 3a10 	vmov	s0, r3
 800386a:	bd70      	pop	{r4, r5, r6, pc}
 800386c:	0052      	lsls	r2, r2, #1
 800386e:	3101      	adds	r1, #1
 8003870:	e7d1      	b.n	8003816 <__ieee754_sqrtf+0x32>
	...

08003874 <__kernel_cosf>:
 8003874:	ee10 3a10 	vmov	r3, s0
 8003878:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800387c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8003880:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003884:	da05      	bge.n	8003892 <__kernel_cosf+0x1e>
 8003886:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800388a:	ee17 2a90 	vmov	r2, s15
 800388e:	2a00      	cmp	r2, #0
 8003890:	d03b      	beq.n	800390a <__kernel_cosf+0x96>
 8003892:	ee20 7a00 	vmul.f32	s14, s0, s0
 8003896:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8003910 <__kernel_cosf+0x9c>
 800389a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8003914 <__kernel_cosf+0xa0>
 800389e:	eddf 5a1e 	vldr	s11, [pc, #120]	; 8003918 <__kernel_cosf+0xa4>
 80038a2:	4a1e      	ldr	r2, [pc, #120]	; (800391c <__kernel_cosf+0xa8>)
 80038a4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80038a8:	4293      	cmp	r3, r2
 80038aa:	ee60 0a20 	vmul.f32	s1, s0, s1
 80038ae:	eee7 5a06 	vfma.f32	s11, s14, s12
 80038b2:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8003920 <__kernel_cosf+0xac>
 80038b6:	eea7 6a25 	vfma.f32	s12, s14, s11
 80038ba:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8003924 <__kernel_cosf+0xb0>
 80038be:	eee7 5a06 	vfma.f32	s11, s14, s12
 80038c2:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8003928 <__kernel_cosf+0xb4>
 80038c6:	eea7 6a25 	vfma.f32	s12, s14, s11
 80038ca:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80038ce:	ee26 6a07 	vmul.f32	s12, s12, s14
 80038d2:	dc06      	bgt.n	80038e2 <__kernel_cosf+0x6e>
 80038d4:	eed7 0a06 	vfnms.f32	s1, s14, s12
 80038d8:	eed7 0a25 	vfnms.f32	s1, s14, s11
 80038dc:	ee36 0ae0 	vsub.f32	s0, s13, s1
 80038e0:	4770      	bx	lr
 80038e2:	4a12      	ldr	r2, [pc, #72]	; (800392c <__kernel_cosf+0xb8>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	bfda      	itte	le
 80038e8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80038ec:	ee07 3a90 	vmovle	s15, r3
 80038f0:	eef5 7a02 	vmovgt.f32	s15, #82	; 0x3e900000  0.2812500
 80038f4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80038f8:	eed7 0a06 	vfnms.f32	s1, s14, s12
 80038fc:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8003900:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8003904:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8003908:	4770      	bx	lr
 800390a:	eeb0 0a66 	vmov.f32	s0, s13
 800390e:	4770      	bx	lr
 8003910:	310f74f6 	.word	0x310f74f6
 8003914:	ad47d74e 	.word	0xad47d74e
 8003918:	b493f27c 	.word	0xb493f27c
 800391c:	3e999999 	.word	0x3e999999
 8003920:	37d00d01 	.word	0x37d00d01
 8003924:	bab60b61 	.word	0xbab60b61
 8003928:	3d2aaaab 	.word	0x3d2aaaab
 800392c:	3f480000 	.word	0x3f480000

08003930 <__kernel_rem_pio2f>:
 8003930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003934:	ed2d 8b04 	vpush	{d8-d9}
 8003938:	b0d7      	sub	sp, #348	; 0x15c
 800393a:	468b      	mov	fp, r1
 800393c:	9301      	str	r3, [sp, #4]
 800393e:	9964      	ldr	r1, [sp, #400]	; 0x190
 8003940:	4bcb      	ldr	r3, [pc, #812]	; (8003c70 <__kernel_rem_pio2f+0x340>)
 8003942:	9002      	str	r0, [sp, #8]
 8003944:	f853 a021 	ldr.w	sl, [r3, r1, lsl #2]
 8003948:	9b01      	ldr	r3, [sp, #4]
 800394a:	9e65      	ldr	r6, [sp, #404]	; 0x194
 800394c:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8003c80 <__kernel_rem_pio2f+0x350>
 8003950:	3b01      	subs	r3, #1
 8003952:	1ed0      	subs	r0, r2, #3
 8003954:	2408      	movs	r4, #8
 8003956:	fb90 f0f4 	sdiv	r0, r0, r4
 800395a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800395e:	1c45      	adds	r5, r0, #1
 8003960:	1ac7      	subs	r7, r0, r3
 8003962:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8003966:	eb0a 0e03 	add.w	lr, sl, r3
 800396a:	ac1a      	add	r4, sp, #104	; 0x68
 800396c:	eb06 0c87 	add.w	ip, r6, r7, lsl #2
 8003970:	2200      	movs	r2, #0
 8003972:	4572      	cmp	r2, lr
 8003974:	dd0f      	ble.n	8003996 <__kernel_rem_pio2f+0x66>
 8003976:	f50d 7e84 	add.w	lr, sp, #264	; 0x108
 800397a:	2400      	movs	r4, #0
 800397c:	4554      	cmp	r4, sl
 800397e:	dc26      	bgt.n	80039ce <__kernel_rem_pio2f+0x9e>
 8003980:	9a01      	ldr	r2, [sp, #4]
 8003982:	9f02      	ldr	r7, [sp, #8]
 8003984:	eddf 7abe 	vldr	s15, [pc, #760]	; 8003c80 <__kernel_rem_pio2f+0x350>
 8003988:	4422      	add	r2, r4
 800398a:	a91a      	add	r1, sp, #104	; 0x68
 800398c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8003990:	f04f 0c00 	mov.w	ip, #0
 8003994:	e015      	b.n	80039c2 <__kernel_rem_pio2f+0x92>
 8003996:	42d7      	cmn	r7, r2
 8003998:	bf5d      	ittte	pl
 800399a:	f85c 1022 	ldrpl.w	r1, [ip, r2, lsl #2]
 800399e:	ee07 1a90 	vmovpl	s15, r1
 80039a2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80039a6:	eef0 7a47 	vmovmi.f32	s15, s14
 80039aa:	ece4 7a01 	vstmia	r4!, {s15}
 80039ae:	3201      	adds	r2, #1
 80039b0:	e7df      	b.n	8003972 <__kernel_rem_pio2f+0x42>
 80039b2:	ecf7 6a01 	vldmia	r7!, {s13}
 80039b6:	ed32 7a01 	vldmdb	r2!, {s14}
 80039ba:	eee6 7a87 	vfma.f32	s15, s13, s14
 80039be:	f10c 0c01 	add.w	ip, ip, #1
 80039c2:	459c      	cmp	ip, r3
 80039c4:	ddf5      	ble.n	80039b2 <__kernel_rem_pio2f+0x82>
 80039c6:	ecee 7a01 	vstmia	lr!, {s15}
 80039ca:	3401      	adds	r4, #1
 80039cc:	e7d6      	b.n	800397c <__kernel_rem_pio2f+0x4c>
 80039ce:	aa06      	add	r2, sp, #24
 80039d0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80039d4:	9204      	str	r2, [sp, #16]
 80039d6:	eddf 8aa7 	vldr	s17, [pc, #668]	; 8003c74 <__kernel_rem_pio2f+0x344>
 80039da:	ed9f 9aa7 	vldr	s18, [pc, #668]	; 8003c78 <__kernel_rem_pio2f+0x348>
 80039de:	eb06 0280 	add.w	r2, r6, r0, lsl #2
 80039e2:	9203      	str	r2, [sp, #12]
 80039e4:	4657      	mov	r7, sl
 80039e6:	aa56      	add	r2, sp, #344	; 0x158
 80039e8:	f107 4880 	add.w	r8, r7, #1073741824	; 0x40000000
 80039ec:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 80039f0:	f108 38ff 	add.w	r8, r8, #4294967295
 80039f4:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
 80039f8:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80039fc:	aa56      	add	r2, sp, #344	; 0x158
 80039fe:	eb02 0008 	add.w	r0, r2, r8
 8003a02:	384c      	subs	r0, #76	; 0x4c
 8003a04:	2200      	movs	r2, #0
 8003a06:	1abc      	subs	r4, r7, r2
 8003a08:	2c00      	cmp	r4, #0
 8003a0a:	dc4a      	bgt.n	8003aa2 <__kernel_rem_pio2f+0x172>
 8003a0c:	4628      	mov	r0, r5
 8003a0e:	9305      	str	r3, [sp, #20]
 8003a10:	f000 fa88 	bl	8003f24 <scalbnf>
 8003a14:	eeb0 8a40 	vmov.f32	s16, s0
 8003a18:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8003a1c:	ee28 0a00 	vmul.f32	s0, s16, s0
 8003a20:	f000 fa3e 	bl	8003ea0 <floorf>
 8003a24:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8003a28:	eea0 8a67 	vfms.f32	s16, s0, s15
 8003a2c:	2d00      	cmp	r5, #0
 8003a2e:	9b05      	ldr	r3, [sp, #20]
 8003a30:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8003a34:	ee17 9a90 	vmov	r9, s15
 8003a38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a3c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8003a40:	dd44      	ble.n	8003acc <__kernel_rem_pio2f+0x19c>
 8003a42:	1e78      	subs	r0, r7, #1
 8003a44:	aa06      	add	r2, sp, #24
 8003a46:	f1c5 0408 	rsb	r4, r5, #8
 8003a4a:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8003a4e:	fa46 f204 	asr.w	r2, r6, r4
 8003a52:	4491      	add	r9, r2
 8003a54:	40a2      	lsls	r2, r4
 8003a56:	1ab6      	subs	r6, r6, r2
 8003a58:	aa06      	add	r2, sp, #24
 8003a5a:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8003a5e:	f1c5 0207 	rsb	r2, r5, #7
 8003a62:	4116      	asrs	r6, r2
 8003a64:	2e00      	cmp	r6, #0
 8003a66:	dd40      	ble.n	8003aea <__kernel_rem_pio2f+0x1ba>
 8003a68:	2400      	movs	r4, #0
 8003a6a:	f109 0901 	add.w	r9, r9, #1
 8003a6e:	4620      	mov	r0, r4
 8003a70:	42a7      	cmp	r7, r4
 8003a72:	dc75      	bgt.n	8003b60 <__kernel_rem_pio2f+0x230>
 8003a74:	2d00      	cmp	r5, #0
 8003a76:	dd05      	ble.n	8003a84 <__kernel_rem_pio2f+0x154>
 8003a78:	2d01      	cmp	r5, #1
 8003a7a:	f000 8086 	beq.w	8003b8a <__kernel_rem_pio2f+0x25a>
 8003a7e:	2d02      	cmp	r5, #2
 8003a80:	f000 808d 	beq.w	8003b9e <__kernel_rem_pio2f+0x26e>
 8003a84:	2e02      	cmp	r6, #2
 8003a86:	d130      	bne.n	8003aea <__kernel_rem_pio2f+0x1ba>
 8003a88:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003a8c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8003a90:	b358      	cbz	r0, 8003aea <__kernel_rem_pio2f+0x1ba>
 8003a92:	4628      	mov	r0, r5
 8003a94:	9305      	str	r3, [sp, #20]
 8003a96:	f000 fa45 	bl	8003f24 <scalbnf>
 8003a9a:	9b05      	ldr	r3, [sp, #20]
 8003a9c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8003aa0:	e023      	b.n	8003aea <__kernel_rem_pio2f+0x1ba>
 8003aa2:	ee60 7a28 	vmul.f32	s15, s0, s17
 8003aa6:	ac06      	add	r4, sp, #24
 8003aa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003aac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ab0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8003ab4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003ab8:	ee10 1a10 	vmov	r1, s0
 8003abc:	ed30 0a01 	vldmdb	r0!, {s0}
 8003ac0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8003ac4:	ee37 0a80 	vadd.f32	s0, s15, s0
 8003ac8:	3201      	adds	r2, #1
 8003aca:	e79c      	b.n	8003a06 <__kernel_rem_pio2f+0xd6>
 8003acc:	d105      	bne.n	8003ada <__kernel_rem_pio2f+0x1aa>
 8003ace:	1e7a      	subs	r2, r7, #1
 8003ad0:	a906      	add	r1, sp, #24
 8003ad2:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8003ad6:	1236      	asrs	r6, r6, #8
 8003ad8:	e7c4      	b.n	8003a64 <__kernel_rem_pio2f+0x134>
 8003ada:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003ade:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae6:	da39      	bge.n	8003b5c <__kernel_rem_pio2f+0x22c>
 8003ae8:	2600      	movs	r6, #0
 8003aea:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8003aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af2:	f040 808d 	bne.w	8003c10 <__kernel_rem_pio2f+0x2e0>
 8003af6:	1e7c      	subs	r4, r7, #1
 8003af8:	4620      	mov	r0, r4
 8003afa:	2200      	movs	r2, #0
 8003afc:	4550      	cmp	r0, sl
 8003afe:	da55      	bge.n	8003bac <__kernel_rem_pio2f+0x27c>
 8003b00:	2a00      	cmp	r2, #0
 8003b02:	d164      	bne.n	8003bce <__kernel_rem_pio2f+0x29e>
 8003b04:	2401      	movs	r4, #1
 8003b06:	f06f 0003 	mvn.w	r0, #3
 8003b0a:	fb00 f204 	mul.w	r2, r0, r4
 8003b0e:	9904      	ldr	r1, [sp, #16]
 8003b10:	588a      	ldr	r2, [r1, r2]
 8003b12:	2a00      	cmp	r2, #0
 8003b14:	d050      	beq.n	8003bb8 <__kernel_rem_pio2f+0x288>
 8003b16:	aa56      	add	r2, sp, #344	; 0x158
 8003b18:	4490      	add	r8, r2
 8003b1a:	9a01      	ldr	r2, [sp, #4]
 8003b1c:	a91a      	add	r1, sp, #104	; 0x68
 8003b1e:	443a      	add	r2, r7
 8003b20:	1c78      	adds	r0, r7, #1
 8003b22:	f1a8 0848 	sub.w	r8, r8, #72	; 0x48
 8003b26:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8003b2a:	4427      	add	r7, r4
 8003b2c:	42b8      	cmp	r0, r7
 8003b2e:	f73f af5a 	bgt.w	80039e6 <__kernel_rem_pio2f+0xb6>
 8003b32:	9903      	ldr	r1, [sp, #12]
 8003b34:	9e02      	ldr	r6, [sp, #8]
 8003b36:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8003b3a:	9105      	str	r1, [sp, #20]
 8003b3c:	ee07 1a90 	vmov	s15, r1
 8003b40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b44:	2400      	movs	r4, #0
 8003b46:	ece2 7a01 	vstmia	r2!, {s15}
 8003b4a:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8003c80 <__kernel_rem_pio2f+0x350>
 8003b4e:	4696      	mov	lr, r2
 8003b50:	429c      	cmp	r4, r3
 8003b52:	dd33      	ble.n	8003bbc <__kernel_rem_pio2f+0x28c>
 8003b54:	ece8 7a01 	vstmia	r8!, {s15}
 8003b58:	3001      	adds	r0, #1
 8003b5a:	e7e7      	b.n	8003b2c <__kernel_rem_pio2f+0x1fc>
 8003b5c:	2602      	movs	r6, #2
 8003b5e:	e783      	b.n	8003a68 <__kernel_rem_pio2f+0x138>
 8003b60:	aa06      	add	r2, sp, #24
 8003b62:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8003b66:	b948      	cbnz	r0, 8003b7c <__kernel_rem_pio2f+0x24c>
 8003b68:	b12a      	cbz	r2, 8003b76 <__kernel_rem_pio2f+0x246>
 8003b6a:	a906      	add	r1, sp, #24
 8003b6c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8003b70:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8003b74:	2201      	movs	r2, #1
 8003b76:	3401      	adds	r4, #1
 8003b78:	4610      	mov	r0, r2
 8003b7a:	e779      	b.n	8003a70 <__kernel_rem_pio2f+0x140>
 8003b7c:	a906      	add	r1, sp, #24
 8003b7e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8003b82:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8003b86:	4602      	mov	r2, r0
 8003b88:	e7f5      	b.n	8003b76 <__kernel_rem_pio2f+0x246>
 8003b8a:	1e7c      	subs	r4, r7, #1
 8003b8c:	aa06      	add	r2, sp, #24
 8003b8e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8003b92:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b96:	a906      	add	r1, sp, #24
 8003b98:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 8003b9c:	e772      	b.n	8003a84 <__kernel_rem_pio2f+0x154>
 8003b9e:	1e7c      	subs	r4, r7, #1
 8003ba0:	aa06      	add	r2, sp, #24
 8003ba2:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8003ba6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003baa:	e7f4      	b.n	8003b96 <__kernel_rem_pio2f+0x266>
 8003bac:	a906      	add	r1, sp, #24
 8003bae:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8003bb2:	3801      	subs	r0, #1
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	e7a1      	b.n	8003afc <__kernel_rem_pio2f+0x1cc>
 8003bb8:	3401      	adds	r4, #1
 8003bba:	e7a6      	b.n	8003b0a <__kernel_rem_pio2f+0x1da>
 8003bbc:	ecf6 6a01 	vldmia	r6!, {s13}
 8003bc0:	ed3e 7a01 	vldmdb	lr!, {s14}
 8003bc4:	3401      	adds	r4, #1
 8003bc6:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003bca:	e7c1      	b.n	8003b50 <__kernel_rem_pio2f+0x220>
 8003bcc:	3c01      	subs	r4, #1
 8003bce:	ab06      	add	r3, sp, #24
 8003bd0:	3d08      	subs	r5, #8
 8003bd2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0f8      	beq.n	8003bcc <__kernel_rem_pio2f+0x29c>
 8003bda:	4628      	mov	r0, r5
 8003bdc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003be0:	f000 f9a0 	bl	8003f24 <scalbnf>
 8003be4:	00a3      	lsls	r3, r4, #2
 8003be6:	aa42      	add	r2, sp, #264	; 0x108
 8003be8:	3304      	adds	r3, #4
 8003bea:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003c74 <__kernel_rem_pio2f+0x344>
 8003bee:	18d0      	adds	r0, r2, r3
 8003bf0:	4622      	mov	r2, r4
 8003bf2:	2a00      	cmp	r2, #0
 8003bf4:	da46      	bge.n	8003c84 <__kernel_rem_pio2f+0x354>
 8003bf6:	f10d 0eb8 	add.w	lr, sp, #184	; 0xb8
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	1aa5      	subs	r5, r4, r2
 8003bfe:	d460      	bmi.n	8003cc2 <__kernel_rem_pio2f+0x392>
 8003c00:	a942      	add	r1, sp, #264	; 0x108
 8003c02:	4f1e      	ldr	r7, [pc, #120]	; (8003c7c <__kernel_rem_pio2f+0x34c>)
 8003c04:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8003c80 <__kernel_rem_pio2f+0x350>
 8003c08:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 8003c0c:	2000      	movs	r0, #0
 8003c0e:	e050      	b.n	8003cb2 <__kernel_rem_pio2f+0x382>
 8003c10:	4268      	negs	r0, r5
 8003c12:	eeb0 0a48 	vmov.f32	s0, s16
 8003c16:	f000 f985 	bl	8003f24 <scalbnf>
 8003c1a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003c78 <__kernel_rem_pio2f+0x348>
 8003c1e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8003c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c26:	db19      	blt.n	8003c5c <__kernel_rem_pio2f+0x32c>
 8003c28:	eddf 7a12 	vldr	s15, [pc, #72]	; 8003c74 <__kernel_rem_pio2f+0x344>
 8003c2c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8003c30:	aa06      	add	r2, sp, #24
 8003c32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c36:	1c7c      	adds	r4, r7, #1
 8003c38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c3c:	3508      	adds	r5, #8
 8003c3e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8003c42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c46:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003c4a:	ee10 3a10 	vmov	r3, s0
 8003c4e:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8003c52:	ee17 3a90 	vmov	r3, s15
 8003c56:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8003c5a:	e7be      	b.n	8003bda <__kernel_rem_pio2f+0x2aa>
 8003c5c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003c60:	aa06      	add	r2, sp, #24
 8003c62:	ee10 3a10 	vmov	r3, s0
 8003c66:	463c      	mov	r4, r7
 8003c68:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8003c6c:	e7b5      	b.n	8003bda <__kernel_rem_pio2f+0x2aa>
 8003c6e:	bf00      	nop
 8003c70:	08004404 	.word	0x08004404
 8003c74:	3b800000 	.word	0x3b800000
 8003c78:	43800000 	.word	0x43800000
 8003c7c:	080043d8 	.word	0x080043d8
 8003c80:	00000000 	.word	0x00000000
 8003c84:	a906      	add	r1, sp, #24
 8003c86:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8003c8a:	9101      	str	r1, [sp, #4]
 8003c8c:	ee07 1a90 	vmov	s15, r1
 8003c90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c94:	3a01      	subs	r2, #1
 8003c96:	ee67 7a80 	vmul.f32	s15, s15, s0
 8003c9a:	ee20 0a07 	vmul.f32	s0, s0, s14
 8003c9e:	ed60 7a01 	vstmdb	r0!, {s15}
 8003ca2:	e7a6      	b.n	8003bf2 <__kernel_rem_pio2f+0x2c2>
 8003ca4:	ecf7 6a01 	vldmia	r7!, {s13}
 8003ca8:	ecb5 7a01 	vldmia	r5!, {s14}
 8003cac:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003cb0:	3001      	adds	r0, #1
 8003cb2:	4550      	cmp	r0, sl
 8003cb4:	dc01      	bgt.n	8003cba <__kernel_rem_pio2f+0x38a>
 8003cb6:	4290      	cmp	r0, r2
 8003cb8:	ddf4      	ble.n	8003ca4 <__kernel_rem_pio2f+0x374>
 8003cba:	ecee 7a01 	vstmia	lr!, {s15}
 8003cbe:	3201      	adds	r2, #1
 8003cc0:	e79c      	b.n	8003bfc <__kernel_rem_pio2f+0x2cc>
 8003cc2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8003cc4:	2a03      	cmp	r2, #3
 8003cc6:	d843      	bhi.n	8003d50 <__kernel_rem_pio2f+0x420>
 8003cc8:	e8df f002 	tbb	[pc, r2]
 8003ccc:	021d1d37 	.word	0x021d1d37
 8003cd0:	aa2e      	add	r2, sp, #184	; 0xb8
 8003cd2:	4413      	add	r3, r2
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	4620      	mov	r0, r4
 8003cd8:	2800      	cmp	r0, #0
 8003cda:	dc55      	bgt.n	8003d88 <__kernel_rem_pio2f+0x458>
 8003cdc:	461a      	mov	r2, r3
 8003cde:	4620      	mov	r0, r4
 8003ce0:	2801      	cmp	r0, #1
 8003ce2:	dc61      	bgt.n	8003da8 <__kernel_rem_pio2f+0x478>
 8003ce4:	ed5f 7a1a 	vldr	s15, [pc, #-104]	; 8003c80 <__kernel_rem_pio2f+0x350>
 8003ce8:	2c01      	cmp	r4, #1
 8003cea:	dc6d      	bgt.n	8003dc8 <__kernel_rem_pio2f+0x498>
 8003cec:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8003cf0:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8003cf4:	2e00      	cmp	r6, #0
 8003cf6:	d16d      	bne.n	8003dd4 <__kernel_rem_pio2f+0x4a4>
 8003cf8:	edcb 6a00 	vstr	s13, [fp]
 8003cfc:	ed8b 7a01 	vstr	s14, [fp, #4]
 8003d00:	edcb 7a02 	vstr	s15, [fp, #8]
 8003d04:	e024      	b.n	8003d50 <__kernel_rem_pio2f+0x420>
 8003d06:	aa2e      	add	r2, sp, #184	; 0xb8
 8003d08:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 8003c80 <__kernel_rem_pio2f+0x350>
 8003d0c:	4413      	add	r3, r2
 8003d0e:	4622      	mov	r2, r4
 8003d10:	2a00      	cmp	r2, #0
 8003d12:	da2a      	bge.n	8003d6a <__kernel_rem_pio2f+0x43a>
 8003d14:	b37e      	cbz	r6, 8003d76 <__kernel_rem_pio2f+0x446>
 8003d16:	eef1 7a47 	vneg.f32	s15, s14
 8003d1a:	edcb 7a00 	vstr	s15, [fp]
 8003d1e:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8003d22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d26:	aa2f      	add	r2, sp, #188	; 0xbc
 8003d28:	2301      	movs	r3, #1
 8003d2a:	429c      	cmp	r4, r3
 8003d2c:	da26      	bge.n	8003d7c <__kernel_rem_pio2f+0x44c>
 8003d2e:	b10e      	cbz	r6, 8003d34 <__kernel_rem_pio2f+0x404>
 8003d30:	eef1 7a67 	vneg.f32	s15, s15
 8003d34:	edcb 7a01 	vstr	s15, [fp, #4]
 8003d38:	e00a      	b.n	8003d50 <__kernel_rem_pio2f+0x420>
 8003d3a:	aa2e      	add	r2, sp, #184	; 0xb8
 8003d3c:	ed5f 7a30 	vldr	s15, [pc, #-192]	; 8003c80 <__kernel_rem_pio2f+0x350>
 8003d40:	4413      	add	r3, r2
 8003d42:	2c00      	cmp	r4, #0
 8003d44:	da0b      	bge.n	8003d5e <__kernel_rem_pio2f+0x42e>
 8003d46:	b10e      	cbz	r6, 8003d4c <__kernel_rem_pio2f+0x41c>
 8003d48:	eef1 7a67 	vneg.f32	s15, s15
 8003d4c:	edcb 7a00 	vstr	s15, [fp]
 8003d50:	f009 0007 	and.w	r0, r9, #7
 8003d54:	b057      	add	sp, #348	; 0x15c
 8003d56:	ecbd 8b04 	vpop	{d8-d9}
 8003d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d5e:	ed33 7a01 	vldmdb	r3!, {s14}
 8003d62:	3c01      	subs	r4, #1
 8003d64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d68:	e7eb      	b.n	8003d42 <__kernel_rem_pio2f+0x412>
 8003d6a:	ed73 7a01 	vldmdb	r3!, {s15}
 8003d6e:	3a01      	subs	r2, #1
 8003d70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d74:	e7cc      	b.n	8003d10 <__kernel_rem_pio2f+0x3e0>
 8003d76:	eef0 7a47 	vmov.f32	s15, s14
 8003d7a:	e7ce      	b.n	8003d1a <__kernel_rem_pio2f+0x3ea>
 8003d7c:	ecb2 7a01 	vldmia	r2!, {s14}
 8003d80:	3301      	adds	r3, #1
 8003d82:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d86:	e7d0      	b.n	8003d2a <__kernel_rem_pio2f+0x3fa>
 8003d88:	ed52 6a01 	vldr	s13, [r2, #-4]
 8003d8c:	ed52 7a02 	vldr	s15, [r2, #-8]
 8003d90:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003d94:	3801      	subs	r0, #1
 8003d96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d9e:	ed62 7a01 	vstmdb	r2!, {s15}
 8003da2:	ed02 7a01 	vstr	s14, [r2, #-4]
 8003da6:	e797      	b.n	8003cd8 <__kernel_rem_pio2f+0x3a8>
 8003da8:	ed52 6a01 	vldr	s13, [r2, #-4]
 8003dac:	ed52 7a02 	vldr	s15, [r2, #-8]
 8003db0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003db4:	3801      	subs	r0, #1
 8003db6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dbe:	ed62 7a01 	vstmdb	r2!, {s15}
 8003dc2:	ed02 7a01 	vstr	s14, [r2, #-4]
 8003dc6:	e78b      	b.n	8003ce0 <__kernel_rem_pio2f+0x3b0>
 8003dc8:	ed33 7a01 	vldmdb	r3!, {s14}
 8003dcc:	3c01      	subs	r4, #1
 8003dce:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003dd2:	e789      	b.n	8003ce8 <__kernel_rem_pio2f+0x3b8>
 8003dd4:	eef1 6a66 	vneg.f32	s13, s13
 8003dd8:	eeb1 7a47 	vneg.f32	s14, s14
 8003ddc:	edcb 6a00 	vstr	s13, [fp]
 8003de0:	ed8b 7a01 	vstr	s14, [fp, #4]
 8003de4:	eef1 7a67 	vneg.f32	s15, s15
 8003de8:	e78a      	b.n	8003d00 <__kernel_rem_pio2f+0x3d0>
 8003dea:	bf00      	nop

08003dec <__kernel_sinf>:
 8003dec:	ee10 3a10 	vmov	r3, s0
 8003df0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003df4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8003df8:	da04      	bge.n	8003e04 <__kernel_sinf+0x18>
 8003dfa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003dfe:	ee17 3a90 	vmov	r3, s15
 8003e02:	b35b      	cbz	r3, 8003e5c <__kernel_sinf+0x70>
 8003e04:	ee20 7a00 	vmul.f32	s14, s0, s0
 8003e08:	eddf 7a15 	vldr	s15, [pc, #84]	; 8003e60 <__kernel_sinf+0x74>
 8003e0c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8003e64 <__kernel_sinf+0x78>
 8003e10:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003e14:	eddf 7a14 	vldr	s15, [pc, #80]	; 8003e68 <__kernel_sinf+0x7c>
 8003e18:	eee7 7a06 	vfma.f32	s15, s14, s12
 8003e1c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8003e6c <__kernel_sinf+0x80>
 8003e20:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003e24:	eddf 7a12 	vldr	s15, [pc, #72]	; 8003e70 <__kernel_sinf+0x84>
 8003e28:	ee60 6a07 	vmul.f32	s13, s0, s14
 8003e2c:	eee7 7a06 	vfma.f32	s15, s14, s12
 8003e30:	b930      	cbnz	r0, 8003e40 <__kernel_sinf+0x54>
 8003e32:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8003e74 <__kernel_sinf+0x88>
 8003e36:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003e3a:	eea6 0a86 	vfma.f32	s0, s13, s12
 8003e3e:	4770      	bx	lr
 8003e40:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8003e44:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8003e48:	eee0 7a86 	vfma.f32	s15, s1, s12
 8003e4c:	eed7 0a27 	vfnms.f32	s1, s14, s15
 8003e50:	eddf 7a09 	vldr	s15, [pc, #36]	; 8003e78 <__kernel_sinf+0x8c>
 8003e54:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8003e58:	ee30 0a60 	vsub.f32	s0, s0, s1
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	2f2ec9d3 	.word	0x2f2ec9d3
 8003e64:	b2d72f34 	.word	0xb2d72f34
 8003e68:	3638ef1b 	.word	0x3638ef1b
 8003e6c:	b9500d01 	.word	0xb9500d01
 8003e70:	3c088889 	.word	0x3c088889
 8003e74:	be2aaaab 	.word	0xbe2aaaab
 8003e78:	3e2aaaab 	.word	0x3e2aaaab

08003e7c <matherr>:
 8003e7c:	2000      	movs	r0, #0
 8003e7e:	4770      	bx	lr

08003e80 <nan>:
 8003e80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8003e88 <nan+0x8>
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	00000000 	.word	0x00000000
 8003e8c:	7ff80000 	.word	0x7ff80000

08003e90 <fabsf>:
 8003e90:	ee10 3a10 	vmov	r3, s0
 8003e94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e98:	ee00 3a10 	vmov	s0, r3
 8003e9c:	4770      	bx	lr
	...

08003ea0 <floorf>:
 8003ea0:	ee10 3a10 	vmov	r3, s0
 8003ea4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003ea8:	0dca      	lsrs	r2, r1, #23
 8003eaa:	3a7f      	subs	r2, #127	; 0x7f
 8003eac:	2a16      	cmp	r2, #22
 8003eae:	dc2a      	bgt.n	8003f06 <floorf+0x66>
 8003eb0:	2a00      	cmp	r2, #0
 8003eb2:	da11      	bge.n	8003ed8 <floorf+0x38>
 8003eb4:	eddf 7a18 	vldr	s15, [pc, #96]	; 8003f18 <floorf+0x78>
 8003eb8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003ebc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ec4:	dd05      	ble.n	8003ed2 <floorf+0x32>
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	da23      	bge.n	8003f12 <floorf+0x72>
 8003eca:	4a14      	ldr	r2, [pc, #80]	; (8003f1c <floorf+0x7c>)
 8003ecc:	2900      	cmp	r1, #0
 8003ece:	bf18      	it	ne
 8003ed0:	4613      	movne	r3, r2
 8003ed2:	ee00 3a10 	vmov	s0, r3
 8003ed6:	4770      	bx	lr
 8003ed8:	4911      	ldr	r1, [pc, #68]	; (8003f20 <floorf+0x80>)
 8003eda:	4111      	asrs	r1, r2
 8003edc:	420b      	tst	r3, r1
 8003ede:	d0fa      	beq.n	8003ed6 <floorf+0x36>
 8003ee0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8003f18 <floorf+0x78>
 8003ee4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003ee8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ef0:	ddef      	ble.n	8003ed2 <floorf+0x32>
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	bfbe      	ittt	lt
 8003ef6:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8003efa:	fa40 f202 	asrlt.w	r2, r0, r2
 8003efe:	189b      	addlt	r3, r3, r2
 8003f00:	ea23 0301 	bic.w	r3, r3, r1
 8003f04:	e7e5      	b.n	8003ed2 <floorf+0x32>
 8003f06:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8003f0a:	d3e4      	bcc.n	8003ed6 <floorf+0x36>
 8003f0c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003f10:	4770      	bx	lr
 8003f12:	2300      	movs	r3, #0
 8003f14:	e7dd      	b.n	8003ed2 <floorf+0x32>
 8003f16:	bf00      	nop
 8003f18:	7149f2ca 	.word	0x7149f2ca
 8003f1c:	bf800000 	.word	0xbf800000
 8003f20:	007fffff 	.word	0x007fffff

08003f24 <scalbnf>:
 8003f24:	b508      	push	{r3, lr}
 8003f26:	ee10 2a10 	vmov	r2, s0
 8003f2a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8003f2e:	ed2d 8b02 	vpush	{d8}
 8003f32:	eef0 0a40 	vmov.f32	s1, s0
 8003f36:	d004      	beq.n	8003f42 <scalbnf+0x1e>
 8003f38:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003f3c:	d306      	bcc.n	8003f4c <scalbnf+0x28>
 8003f3e:	ee70 0a00 	vadd.f32	s1, s0, s0
 8003f42:	ecbd 8b02 	vpop	{d8}
 8003f46:	eeb0 0a60 	vmov.f32	s0, s1
 8003f4a:	bd08      	pop	{r3, pc}
 8003f4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f50:	d21c      	bcs.n	8003f8c <scalbnf+0x68>
 8003f52:	4b1f      	ldr	r3, [pc, #124]	; (8003fd0 <scalbnf+0xac>)
 8003f54:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8003fd4 <scalbnf+0xb0>
 8003f58:	4298      	cmp	r0, r3
 8003f5a:	ee60 0a27 	vmul.f32	s1, s0, s15
 8003f5e:	db10      	blt.n	8003f82 <scalbnf+0x5e>
 8003f60:	ee10 2a90 	vmov	r2, s1
 8003f64:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8003f68:	3b19      	subs	r3, #25
 8003f6a:	4403      	add	r3, r0
 8003f6c:	2bfe      	cmp	r3, #254	; 0xfe
 8003f6e:	dd0f      	ble.n	8003f90 <scalbnf+0x6c>
 8003f70:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8003fd8 <scalbnf+0xb4>
 8003f74:	eeb0 0a48 	vmov.f32	s0, s16
 8003f78:	f000 f834 	bl	8003fe4 <copysignf>
 8003f7c:	ee60 0a08 	vmul.f32	s1, s0, s16
 8003f80:	e7df      	b.n	8003f42 <scalbnf+0x1e>
 8003f82:	eddf 7a16 	vldr	s15, [pc, #88]	; 8003fdc <scalbnf+0xb8>
 8003f86:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8003f8a:	e7da      	b.n	8003f42 <scalbnf+0x1e>
 8003f8c:	0ddb      	lsrs	r3, r3, #23
 8003f8e:	e7ec      	b.n	8003f6a <scalbnf+0x46>
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	dd06      	ble.n	8003fa2 <scalbnf+0x7e>
 8003f94:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8003f98:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8003f9c:	ee00 3a90 	vmov	s1, r3
 8003fa0:	e7cf      	b.n	8003f42 <scalbnf+0x1e>
 8003fa2:	f113 0f16 	cmn.w	r3, #22
 8003fa6:	da06      	bge.n	8003fb6 <scalbnf+0x92>
 8003fa8:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003fac:	4298      	cmp	r0, r3
 8003fae:	dcdf      	bgt.n	8003f70 <scalbnf+0x4c>
 8003fb0:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8003fdc <scalbnf+0xb8>
 8003fb4:	e7de      	b.n	8003f74 <scalbnf+0x50>
 8003fb6:	3319      	adds	r3, #25
 8003fb8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8003fbc:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8003fc0:	eddf 7a07 	vldr	s15, [pc, #28]	; 8003fe0 <scalbnf+0xbc>
 8003fc4:	ee07 3a10 	vmov	s14, r3
 8003fc8:	ee67 0a27 	vmul.f32	s1, s14, s15
 8003fcc:	e7b9      	b.n	8003f42 <scalbnf+0x1e>
 8003fce:	bf00      	nop
 8003fd0:	ffff3cb0 	.word	0xffff3cb0
 8003fd4:	4c000000 	.word	0x4c000000
 8003fd8:	7149f2ca 	.word	0x7149f2ca
 8003fdc:	0da24260 	.word	0x0da24260
 8003fe0:	33000000 	.word	0x33000000

08003fe4 <copysignf>:
 8003fe4:	ee10 3a10 	vmov	r3, s0
 8003fe8:	ee10 2a90 	vmov	r2, s1
 8003fec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ff0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	ee00 3a10 	vmov	s0, r3
 8003ffa:	4770      	bx	lr

08003ffc <__errno>:
 8003ffc:	4b01      	ldr	r3, [pc, #4]	; (8004004 <__errno+0x8>)
 8003ffe:	6818      	ldr	r0, [r3, #0]
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	2000000c 	.word	0x2000000c

08004008 <_init>:
 8004008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800400a:	bf00      	nop
 800400c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800400e:	bc08      	pop	{r3}
 8004010:	469e      	mov	lr, r3
 8004012:	4770      	bx	lr

08004014 <_fini>:
 8004014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004016:	bf00      	nop
 8004018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800401a:	bc08      	pop	{r3}
 800401c:	469e      	mov	lr, r3
 800401e:	4770      	bx	lr
